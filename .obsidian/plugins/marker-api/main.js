/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@mistralai/mistralai/lib/url.js
var require_url = __commonJS({
  "node_modules/@mistralai/mistralai/lib/url.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pathToFunc = pathToFunc;
    var hasOwn = Object.prototype.hasOwnProperty;
    function pathToFunc(pathPattern, options) {
      const paramRE = /\{([a-zA-Z0-9_]+?)\}/g;
      return function buildURLPath(params = {}) {
        return pathPattern.replace(paramRE, function(_, placeholder) {
          if (!hasOwn.call(params, placeholder)) {
            throw new Error(`Parameter '${placeholder}' is required`);
          }
          const value = params[placeholder];
          if (typeof value !== "string" && typeof value !== "number") {
            throw new Error(`Parameter '${placeholder}' must be a string or number`);
          }
          return (options == null ? void 0 : options.charEncoding) === "percent" ? encodeURIComponent(`${value}`) : `${value}`;
        });
      };
    }
  }
});

// node_modules/@mistralai/mistralai/lib/config.js
var require_config = __commonJS({
  "node_modules/@mistralai/mistralai/lib/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SDK_METADATA = exports.ServerList = exports.ServerEu = void 0;
    exports.serverURLFromOptions = serverURLFromOptions;
    var url_js_1 = require_url();
    exports.ServerEu = "eu";
    exports.ServerList = {
      [exports.ServerEu]: "https://api.mistral.ai"
    };
    function serverURLFromOptions(options) {
      var _a;
      let serverURL = options.serverURL;
      const params = {};
      if (!serverURL) {
        const server = (_a = options.server) != null ? _a : exports.ServerEu;
        serverURL = exports.ServerList[server] || "";
      }
      const u = (0, url_js_1.pathToFunc)(serverURL)(params);
      return new URL(u);
    }
    exports.SDK_METADATA = {
      language: "typescript",
      openapiDocVersion: "0.0.2",
      sdkVersion: "1.5.2",
      genVersion: "2.548.6",
      userAgent: "speakeasy-sdk/typescript 1.5.2 2.548.6 0.0.2 @mistralai/mistralai"
    };
  }
});

// node_modules/@mistralai/mistralai/lib/files.js
var require_files = __commonJS({
  "node_modules/@mistralai/mistralai/lib/files.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.readableStreamToArrayBuffer = readableStreamToArrayBuffer;
    async function readableStreamToArrayBuffer(readable) {
      const reader = readable.getReader();
      const chunks = [];
      let totalLength = 0;
      let done = false;
      while (!done) {
        const { value, done: doneReading } = await reader.read();
        if (doneReading) {
          done = true;
        } else {
          chunks.push(value);
          totalLength += value.length;
        }
      }
      const concatenatedChunks = new Uint8Array(totalLength);
      let offset = 0;
      for (const chunk of chunks) {
        concatenatedChunks.set(chunk, offset);
        offset += chunk.length;
      }
      return concatenatedChunks.buffer;
    }
  }
});

// node_modules/@mistralai/mistralai/hooks/custom_user_agent.js
var require_custom_user_agent = __commonJS({
  "node_modules/@mistralai/mistralai/hooks/custom_user_agent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomUserAgentHook = void 0;
    var config_1 = require_config();
    var CustomUserAgentHook = class {
      beforeRequest(_, request) {
        const version = config_1.SDK_METADATA.sdkVersion;
        const ua = `mistral-client-typescript/${version}`;
        request.headers.set("user-agent", ua);
        if (!request.headers.get("user-agent")) {
          request.headers.set("x-mistral-user-agent", ua);
        }
        return request;
      }
    };
    exports.CustomUserAgentHook = CustomUserAgentHook;
  }
});

// node_modules/@mistralai/mistralai/hooks/deprecation_warning.js
var require_deprecation_warning = __commonJS({
  "node_modules/@mistralai/mistralai/hooks/deprecation_warning.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeprecationWarningHook = void 0;
    var HEADER_MODEL_DEPRECATION_TIMESTAMP = "x-model-deprecation-timestamp";
    var DeprecationWarningHook = class {
      afterSuccess(_, response) {
        if (response.headers.has(HEADER_MODEL_DEPRECATION_TIMESTAMP)) {
          response.clone().json().then((body) => {
            const model = body.model;
            console.warn(`WARNING: The model ${model} is deprecated and will be removed on ${response.headers.get(HEADER_MODEL_DEPRECATION_TIMESTAMP)}. Please refer to https://docs.mistral.ai/getting-started/models/#api-versioning for more information.`);
          });
        }
        return response;
      }
    };
    exports.DeprecationWarningHook = DeprecationWarningHook;
  }
});

// node_modules/@mistralai/mistralai/hooks/registration.js
var require_registration = __commonJS({
  "node_modules/@mistralai/mistralai/hooks/registration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.initHooks = initHooks;
    var custom_user_agent_1 = require_custom_user_agent();
    var deprecation_warning_1 = require_deprecation_warning();
    function initHooks(hooks) {
      const customUserAgentHook = new custom_user_agent_1.CustomUserAgentHook();
      hooks.registerBeforeRequestHook(customUserAgentHook);
      const deprecationWarningHook = new deprecation_warning_1.DeprecationWarningHook();
      hooks.registerAfterSuccessHook(deprecationWarningHook);
    }
  }
});

// node_modules/@mistralai/mistralai/hooks/hooks.js
var require_hooks = __commonJS({
  "node_modules/@mistralai/mistralai/hooks/hooks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SDKHooks = void 0;
    var registration_js_1 = require_registration();
    var SDKHooks = class {
      constructor() {
        this.sdkInitHooks = [];
        this.beforeCreateRequestHooks = [];
        this.beforeRequestHooks = [];
        this.afterSuccessHooks = [];
        this.afterErrorHooks = [];
        const presetHooks = [];
        for (const hook of presetHooks) {
          if ("sdkInit" in hook) {
            this.registerSDKInitHook(hook);
          }
          if ("beforeCreateRequest" in hook) {
            this.registerBeforeCreateRequestHook(hook);
          }
          if ("beforeRequest" in hook) {
            this.registerBeforeRequestHook(hook);
          }
          if ("afterSuccess" in hook) {
            this.registerAfterSuccessHook(hook);
          }
          if ("afterError" in hook) {
            this.registerAfterErrorHook(hook);
          }
        }
        (0, registration_js_1.initHooks)(this);
      }
      registerSDKInitHook(hook) {
        this.sdkInitHooks.push(hook);
      }
      registerBeforeCreateRequestHook(hook) {
        this.beforeCreateRequestHooks.push(hook);
      }
      registerBeforeRequestHook(hook) {
        this.beforeRequestHooks.push(hook);
      }
      registerAfterSuccessHook(hook) {
        this.afterSuccessHooks.push(hook);
      }
      registerAfterErrorHook(hook) {
        this.afterErrorHooks.push(hook);
      }
      sdkInit(opts) {
        return this.sdkInitHooks.reduce((opts2, hook) => hook.sdkInit(opts2), opts);
      }
      beforeCreateRequest(hookCtx, input) {
        let inp = input;
        for (const hook of this.beforeCreateRequestHooks) {
          inp = hook.beforeCreateRequest(hookCtx, inp);
        }
        return inp;
      }
      async beforeRequest(hookCtx, request) {
        let req = request;
        for (const hook of this.beforeRequestHooks) {
          req = await hook.beforeRequest(hookCtx, req);
        }
        return req;
      }
      async afterSuccess(hookCtx, response) {
        let res = response;
        for (const hook of this.afterSuccessHooks) {
          res = await hook.afterSuccess(hookCtx, res);
        }
        return res;
      }
      async afterError(hookCtx, response, error) {
        let res = response;
        let err = error;
        for (const hook of this.afterErrorHooks) {
          const result = await hook.afterError(hookCtx, res, err);
          res = result.response;
          err = result.error;
        }
        return { response: res, error: err };
      }
    };
    exports.SDKHooks = SDKHooks;
  }
});

// node_modules/@mistralai/mistralai/models/errors/httpclienterrors.js
var require_httpclienterrors = __commonJS({
  "node_modules/@mistralai/mistralai/models/errors/httpclienterrors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ConnectionError = exports.RequestTimeoutError = exports.RequestAbortedError = exports.InvalidRequestError = exports.UnexpectedClientError = exports.HTTPClientError = void 0;
    var HTTPClientError = class extends Error {
      constructor(message, opts) {
        let msg = message;
        if (opts == null ? void 0 : opts.cause) {
          msg += `: ${opts.cause}`;
        }
        super(msg, opts);
        this.name = "HTTPClientError";
        if (typeof this.cause === "undefined") {
          this.cause = opts == null ? void 0 : opts.cause;
        }
      }
    };
    exports.HTTPClientError = HTTPClientError;
    var UnexpectedClientError = class extends HTTPClientError {
      constructor() {
        super(...arguments);
        this.name = "UnexpectedClientError";
      }
    };
    exports.UnexpectedClientError = UnexpectedClientError;
    var InvalidRequestError = class extends HTTPClientError {
      constructor() {
        super(...arguments);
        this.name = "InvalidRequestError";
      }
    };
    exports.InvalidRequestError = InvalidRequestError;
    var RequestAbortedError = class extends HTTPClientError {
      constructor() {
        super(...arguments);
        this.name = "RequestAbortedError";
      }
    };
    exports.RequestAbortedError = RequestAbortedError;
    var RequestTimeoutError = class extends HTTPClientError {
      constructor() {
        super(...arguments);
        this.name = "RequestTimeoutError";
      }
    };
    exports.RequestTimeoutError = RequestTimeoutError;
    var ConnectionError = class extends HTTPClientError {
      constructor() {
        super(...arguments);
        this.name = "ConnectionError";
      }
    };
    exports.ConnectionError = ConnectionError;
  }
});

// node_modules/@mistralai/mistralai/types/fp.js
var require_fp = __commonJS({
  "node_modules/@mistralai/mistralai/types/fp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OK = OK;
    exports.ERR = ERR;
    exports.unwrap = unwrap;
    exports.unwrapAsync = unwrapAsync;
    function OK(value) {
      return { ok: true, value };
    }
    function ERR(error) {
      return { ok: false, error };
    }
    function unwrap(r) {
      if (!r.ok) {
        throw r.error;
      }
      return r.value;
    }
    async function unwrapAsync(pr) {
      const r = await pr;
      if (!r.ok) {
        throw r.error;
      }
      return r.value;
    }
  }
});

// node_modules/zod/lib/helpers/util.js
var require_util = __commonJS({
  "node_modules/zod/lib/helpers/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getParsedType = exports.ZodParsedType = exports.objectUtil = exports.util = void 0;
    var util;
    (function(util2) {
      util2.assertEqual = (val) => val;
      function assertIs(_arg) {
      }
      util2.assertIs = assertIs;
      function assertNever(_x) {
        throw new Error();
      }
      util2.assertNever = assertNever;
      util2.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
          obj[item] = item;
        }
        return obj;
      };
      util2.getValidEnumValues = (obj) => {
        const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys) {
          filtered[k] = obj[k];
        }
        return util2.objectValues(filtered);
      };
      util2.objectValues = (obj) => {
        return util2.objectKeys(obj).map(function(e) {
          return obj[e];
        });
      };
      util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
        const keys = [];
        for (const key in object) {
          if (Object.prototype.hasOwnProperty.call(object, key)) {
            keys.push(key);
          }
        }
        return keys;
      };
      util2.find = (arr, checker) => {
        for (const item of arr) {
          if (checker(item))
            return item;
        }
        return void 0;
      };
      util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
      function joinValues(array, separator = " | ") {
        return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
      }
      util2.joinValues = joinValues;
      util2.jsonStringifyReplacer = (_, value) => {
        if (typeof value === "bigint") {
          return value.toString();
        }
        return value;
      };
    })(util || (exports.util = util = {}));
    var objectUtil;
    (function(objectUtil2) {
      objectUtil2.mergeShapes = (first, second) => {
        return {
          ...first,
          ...second
          // second overwrites first
        };
      };
    })(objectUtil || (exports.objectUtil = objectUtil = {}));
    exports.ZodParsedType = util.arrayToEnum([
      "string",
      "nan",
      "number",
      "integer",
      "float",
      "boolean",
      "date",
      "bigint",
      "symbol",
      "function",
      "undefined",
      "null",
      "array",
      "object",
      "unknown",
      "promise",
      "void",
      "never",
      "map",
      "set"
    ]);
    var getParsedType = (data) => {
      const t = typeof data;
      switch (t) {
        case "undefined":
          return exports.ZodParsedType.undefined;
        case "string":
          return exports.ZodParsedType.string;
        case "number":
          return isNaN(data) ? exports.ZodParsedType.nan : exports.ZodParsedType.number;
        case "boolean":
          return exports.ZodParsedType.boolean;
        case "function":
          return exports.ZodParsedType.function;
        case "bigint":
          return exports.ZodParsedType.bigint;
        case "symbol":
          return exports.ZodParsedType.symbol;
        case "object":
          if (Array.isArray(data)) {
            return exports.ZodParsedType.array;
          }
          if (data === null) {
            return exports.ZodParsedType.null;
          }
          if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
            return exports.ZodParsedType.promise;
          }
          if (typeof Map !== "undefined" && data instanceof Map) {
            return exports.ZodParsedType.map;
          }
          if (typeof Set !== "undefined" && data instanceof Set) {
            return exports.ZodParsedType.set;
          }
          if (typeof Date !== "undefined" && data instanceof Date) {
            return exports.ZodParsedType.date;
          }
          return exports.ZodParsedType.object;
        default:
          return exports.ZodParsedType.unknown;
      }
    };
    exports.getParsedType = getParsedType;
  }
});

// node_modules/zod/lib/ZodError.js
var require_ZodError = __commonJS({
  "node_modules/zod/lib/ZodError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ZodError = exports.quotelessJson = exports.ZodIssueCode = void 0;
    var util_1 = require_util();
    exports.ZodIssueCode = util_1.util.arrayToEnum([
      "invalid_type",
      "invalid_literal",
      "custom",
      "invalid_union",
      "invalid_union_discriminator",
      "invalid_enum_value",
      "unrecognized_keys",
      "invalid_arguments",
      "invalid_return_type",
      "invalid_date",
      "invalid_string",
      "too_small",
      "too_big",
      "invalid_intersection_types",
      "not_multiple_of",
      "not_finite"
    ]);
    var quotelessJson = (obj) => {
      const json = JSON.stringify(obj, null, 2);
      return json.replace(/"([^"]+)":/g, "$1:");
    };
    exports.quotelessJson = quotelessJson;
    var ZodError = class extends Error {
      get errors() {
        return this.issues;
      }
      constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
          this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
          this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(this, actualProto);
        } else {
          this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
      }
      format(_mapper) {
        const mapper = _mapper || function(issue) {
          return issue.message;
        };
        const fieldErrors = { _errors: [] };
        const processError = (error) => {
          for (const issue of error.issues) {
            if (issue.code === "invalid_union") {
              issue.unionErrors.map(processError);
            } else if (issue.code === "invalid_return_type") {
              processError(issue.returnTypeError);
            } else if (issue.code === "invalid_arguments") {
              processError(issue.argumentsError);
            } else if (issue.path.length === 0) {
              fieldErrors._errors.push(mapper(issue));
            } else {
              let curr = fieldErrors;
              let i = 0;
              while (i < issue.path.length) {
                const el = issue.path[i];
                const terminal = i === issue.path.length - 1;
                if (!terminal) {
                  curr[el] = curr[el] || { _errors: [] };
                } else {
                  curr[el] = curr[el] || { _errors: [] };
                  curr[el]._errors.push(mapper(issue));
                }
                curr = curr[el];
                i++;
              }
            }
          }
        };
        processError(this);
        return fieldErrors;
      }
      static assert(value) {
        if (!(value instanceof ZodError)) {
          throw new Error(`Not a ZodError: ${value}`);
        }
      }
      toString() {
        return this.message;
      }
      get message() {
        return JSON.stringify(this.issues, util_1.util.jsonStringifyReplacer, 2);
      }
      get isEmpty() {
        return this.issues.length === 0;
      }
      flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
          if (sub.path.length > 0) {
            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
            fieldErrors[sub.path[0]].push(mapper(sub));
          } else {
            formErrors.push(mapper(sub));
          }
        }
        return { formErrors, fieldErrors };
      }
      get formErrors() {
        return this.flatten();
      }
    };
    exports.ZodError = ZodError;
    ZodError.create = (issues) => {
      const error = new ZodError(issues);
      return error;
    };
  }
});

// node_modules/zod/lib/locales/en.js
var require_en = __commonJS({
  "node_modules/zod/lib/locales/en.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util_1 = require_util();
    var ZodError_1 = require_ZodError();
    var errorMap = (issue, _ctx) => {
      let message;
      switch (issue.code) {
        case ZodError_1.ZodIssueCode.invalid_type:
          if (issue.received === util_1.ZodParsedType.undefined) {
            message = "Required";
          } else {
            message = `Expected ${issue.expected}, received ${issue.received}`;
          }
          break;
        case ZodError_1.ZodIssueCode.invalid_literal:
          message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util_1.util.jsonStringifyReplacer)}`;
          break;
        case ZodError_1.ZodIssueCode.unrecognized_keys:
          message = `Unrecognized key(s) in object: ${util_1.util.joinValues(issue.keys, ", ")}`;
          break;
        case ZodError_1.ZodIssueCode.invalid_union:
          message = `Invalid input`;
          break;
        case ZodError_1.ZodIssueCode.invalid_union_discriminator:
          message = `Invalid discriminator value. Expected ${util_1.util.joinValues(issue.options)}`;
          break;
        case ZodError_1.ZodIssueCode.invalid_enum_value:
          message = `Invalid enum value. Expected ${util_1.util.joinValues(issue.options)}, received '${issue.received}'`;
          break;
        case ZodError_1.ZodIssueCode.invalid_arguments:
          message = `Invalid function arguments`;
          break;
        case ZodError_1.ZodIssueCode.invalid_return_type:
          message = `Invalid function return type`;
          break;
        case ZodError_1.ZodIssueCode.invalid_date:
          message = `Invalid date`;
          break;
        case ZodError_1.ZodIssueCode.invalid_string:
          if (typeof issue.validation === "object") {
            if ("includes" in issue.validation) {
              message = `Invalid input: must include "${issue.validation.includes}"`;
              if (typeof issue.validation.position === "number") {
                message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
              }
            } else if ("startsWith" in issue.validation) {
              message = `Invalid input: must start with "${issue.validation.startsWith}"`;
            } else if ("endsWith" in issue.validation) {
              message = `Invalid input: must end with "${issue.validation.endsWith}"`;
            } else {
              util_1.util.assertNever(issue.validation);
            }
          } else if (issue.validation !== "regex") {
            message = `Invalid ${issue.validation}`;
          } else {
            message = "Invalid";
          }
          break;
        case ZodError_1.ZodIssueCode.too_small:
          if (issue.type === "array")
            message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
          else if (issue.type === "string")
            message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
          else if (issue.type === "number")
            message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
          else if (issue.type === "date")
            message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
          else
            message = "Invalid input";
          break;
        case ZodError_1.ZodIssueCode.too_big:
          if (issue.type === "array")
            message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
          else if (issue.type === "string")
            message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
          else if (issue.type === "number")
            message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "bigint")
            message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "date")
            message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
          else
            message = "Invalid input";
          break;
        case ZodError_1.ZodIssueCode.custom:
          message = `Invalid input`;
          break;
        case ZodError_1.ZodIssueCode.invalid_intersection_types:
          message = `Intersection results could not be merged`;
          break;
        case ZodError_1.ZodIssueCode.not_multiple_of:
          message = `Number must be a multiple of ${issue.multipleOf}`;
          break;
        case ZodError_1.ZodIssueCode.not_finite:
          message = "Number must be finite";
          break;
        default:
          message = _ctx.defaultError;
          util_1.util.assertNever(issue);
      }
      return { message };
    };
    exports.default = errorMap;
  }
});

// node_modules/zod/lib/errors.js
var require_errors = __commonJS({
  "node_modules/zod/lib/errors.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getErrorMap = exports.setErrorMap = exports.defaultErrorMap = void 0;
    var en_1 = __importDefault(require_en());
    exports.defaultErrorMap = en_1.default;
    var overrideErrorMap = en_1.default;
    function setErrorMap(map) {
      overrideErrorMap = map;
    }
    exports.setErrorMap = setErrorMap;
    function getErrorMap() {
      return overrideErrorMap;
    }
    exports.getErrorMap = getErrorMap;
  }
});

// node_modules/zod/lib/helpers/parseUtil.js
var require_parseUtil = __commonJS({
  "node_modules/zod/lib/helpers/parseUtil.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isAsync = exports.isValid = exports.isDirty = exports.isAborted = exports.OK = exports.DIRTY = exports.INVALID = exports.ParseStatus = exports.addIssueToContext = exports.EMPTY_PATH = exports.makeIssue = void 0;
    var errors_1 = require_errors();
    var en_1 = __importDefault(require_en());
    var makeIssue = (params) => {
      const { data, path, errorMaps, issueData } = params;
      const fullPath = [...path, ...issueData.path || []];
      const fullIssue = {
        ...issueData,
        path: fullPath
      };
      if (issueData.message !== void 0) {
        return {
          ...issueData,
          path: fullPath,
          message: issueData.message
        };
      }
      let errorMessage = "";
      const maps = errorMaps.filter((m) => !!m).slice().reverse();
      for (const map of maps) {
        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
      }
      return {
        ...issueData,
        path: fullPath,
        message: errorMessage
      };
    };
    exports.makeIssue = makeIssue;
    exports.EMPTY_PATH = [];
    function addIssueToContext(ctx, issueData) {
      const overrideMap = (0, errors_1.getErrorMap)();
      const issue = (0, exports.makeIssue)({
        issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          // contextual error map is first priority
          ctx.schemaErrorMap,
          // then schema-bound map if available
          overrideMap,
          // then global override map
          overrideMap === en_1.default ? void 0 : en_1.default
          // then global default map
        ].filter((x) => !!x)
      });
      ctx.common.issues.push(issue);
    }
    exports.addIssueToContext = addIssueToContext;
    var ParseStatus = class {
      constructor() {
        this.value = "valid";
      }
      dirty() {
        if (this.value === "valid")
          this.value = "dirty";
      }
      abort() {
        if (this.value !== "aborted")
          this.value = "aborted";
      }
      static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results) {
          if (s.status === "aborted")
            return exports.INVALID;
          if (s.status === "dirty")
            status.dirty();
          arrayValue.push(s.value);
        }
        return { status: status.value, value: arrayValue };
      }
      static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value
          });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
      }
      static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
          const { key, value } = pair;
          if (key.status === "aborted")
            return exports.INVALID;
          if (value.status === "aborted")
            return exports.INVALID;
          if (key.status === "dirty")
            status.dirty();
          if (value.status === "dirty")
            status.dirty();
          if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
            finalObject[key.value] = value.value;
          }
        }
        return { status: status.value, value: finalObject };
      }
    };
    exports.ParseStatus = ParseStatus;
    exports.INVALID = Object.freeze({
      status: "aborted"
    });
    var DIRTY = (value) => ({ status: "dirty", value });
    exports.DIRTY = DIRTY;
    var OK = (value) => ({ status: "valid", value });
    exports.OK = OK;
    var isAborted = (x) => x.status === "aborted";
    exports.isAborted = isAborted;
    var isDirty = (x) => x.status === "dirty";
    exports.isDirty = isDirty;
    var isValid = (x) => x.status === "valid";
    exports.isValid = isValid;
    var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
    exports.isAsync = isAsync;
  }
});

// node_modules/zod/lib/helpers/typeAliases.js
var require_typeAliases = __commonJS({
  "node_modules/zod/lib/helpers/typeAliases.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/zod/lib/helpers/errorUtil.js
var require_errorUtil = __commonJS({
  "node_modules/zod/lib/helpers/errorUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.errorUtil = void 0;
    var errorUtil;
    (function(errorUtil2) {
      errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
      errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
    })(errorUtil || (exports.errorUtil = errorUtil = {}));
  }
});

// node_modules/zod/lib/types.js
var require_types = __commonJS({
  "node_modules/zod/lib/types.js"(exports) {
    "use strict";
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var _ZodEnum_cache;
    var _ZodNativeEnum_cache;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.boolean = exports.bigint = exports.array = exports.any = exports.coerce = exports.ZodFirstPartyTypeKind = exports.late = exports.ZodSchema = exports.Schema = exports.custom = exports.ZodReadonly = exports.ZodPipeline = exports.ZodBranded = exports.BRAND = exports.ZodNaN = exports.ZodCatch = exports.ZodDefault = exports.ZodNullable = exports.ZodOptional = exports.ZodTransformer = exports.ZodEffects = exports.ZodPromise = exports.ZodNativeEnum = exports.ZodEnum = exports.ZodLiteral = exports.ZodLazy = exports.ZodFunction = exports.ZodSet = exports.ZodMap = exports.ZodRecord = exports.ZodTuple = exports.ZodIntersection = exports.ZodDiscriminatedUnion = exports.ZodUnion = exports.ZodObject = exports.ZodArray = exports.ZodVoid = exports.ZodNever = exports.ZodUnknown = exports.ZodAny = exports.ZodNull = exports.ZodUndefined = exports.ZodSymbol = exports.ZodDate = exports.ZodBoolean = exports.ZodBigInt = exports.ZodNumber = exports.ZodString = exports.datetimeRegex = exports.ZodType = void 0;
    exports.NEVER = exports.void = exports.unknown = exports.union = exports.undefined = exports.tuple = exports.transformer = exports.symbol = exports.string = exports.strictObject = exports.set = exports.record = exports.promise = exports.preprocess = exports.pipeline = exports.ostring = exports.optional = exports.onumber = exports.oboolean = exports.object = exports.number = exports.nullable = exports.null = exports.never = exports.nativeEnum = exports.nan = exports.map = exports.literal = exports.lazy = exports.intersection = exports.instanceof = exports.function = exports.enum = exports.effect = exports.discriminatedUnion = exports.date = void 0;
    var errors_1 = require_errors();
    var errorUtil_1 = require_errorUtil();
    var parseUtil_1 = require_parseUtil();
    var util_1 = require_util();
    var ZodError_1 = require_ZodError();
    var ParseInputLazyPath = class {
      constructor(parent, value, path, key) {
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
      }
      get path() {
        if (!this._cachedPath.length) {
          if (this._key instanceof Array) {
            this._cachedPath.push(...this._path, ...this._key);
          } else {
            this._cachedPath.push(...this._path, this._key);
          }
        }
        return this._cachedPath;
      }
    };
    var handleResult = (ctx, result) => {
      if ((0, parseUtil_1.isValid)(result)) {
        return { success: true, data: result.value };
      } else {
        if (!ctx.common.issues.length) {
          throw new Error("Validation failed but no issues detected.");
        }
        return {
          success: false,
          get error() {
            if (this._error)
              return this._error;
            const error = new ZodError_1.ZodError(ctx.common.issues);
            this._error = error;
            return this._error;
          }
        };
      }
    };
    function processCreateParams(params) {
      if (!params)
        return {};
      const { errorMap, invalid_type_error, required_error, description } = params;
      if (errorMap && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
      }
      if (errorMap)
        return { errorMap, description };
      const customMap = (iss, ctx) => {
        var _a, _b;
        const { message } = params;
        if (iss.code === "invalid_enum_value") {
          return { message: message !== null && message !== void 0 ? message : ctx.defaultError };
        }
        if (typeof ctx.data === "undefined") {
          return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };
        }
        if (iss.code !== "invalid_type")
          return { message: ctx.defaultError };
        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };
      };
      return { errorMap: customMap, description };
    }
    var ZodType = class {
      get description() {
        return this._def.description;
      }
      _getType(input) {
        return (0, util_1.getParsedType)(input.data);
      }
      _getOrReturnCtx(input, ctx) {
        return ctx || {
          common: input.parent.common,
          data: input.data,
          parsedType: (0, util_1.getParsedType)(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        };
      }
      _processInputParams(input) {
        return {
          status: new parseUtil_1.ParseStatus(),
          ctx: {
            common: input.parent.common,
            data: input.data,
            parsedType: (0, util_1.getParsedType)(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          }
        };
      }
      _parseSync(input) {
        const result = this._parse(input);
        if ((0, parseUtil_1.isAsync)(result)) {
          throw new Error("Synchronous parse encountered promise.");
        }
        return result;
      }
      _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
      }
      parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      safeParse(data, params) {
        var _a;
        const ctx = {
          common: {
            issues: [],
            async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
            contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
          },
          path: (params === null || params === void 0 ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: (0, util_1.getParsedType)(data)
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult(ctx, result);
      }
      "~validate"(data) {
        var _a, _b;
        const ctx = {
          common: {
            issues: [],
            async: !!this["~standard"].async
          },
          path: [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: (0, util_1.getParsedType)(data)
        };
        if (!this["~standard"].async) {
          try {
            const result = this._parseSync({ data, path: [], parent: ctx });
            return (0, parseUtil_1.isValid)(result) ? {
              value: result.value
            } : {
              issues: ctx.common.issues
            };
          } catch (err) {
            if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes("encountered")) {
              this["~standard"].async = true;
            }
            ctx.common = {
              issues: [],
              async: true
            };
          }
        }
        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => (0, parseUtil_1.isValid)(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        });
      }
      async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      async safeParseAsync(data, params) {
        const ctx = {
          common: {
            issues: [],
            contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
            async: true
          },
          path: (params === null || params === void 0 ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: (0, util_1.getParsedType)(data)
        };
        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
        const result = await ((0, parseUtil_1.isAsync)(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
      }
      refine(check, message) {
        const getIssueProperties = (val) => {
          if (typeof message === "string" || typeof message === "undefined") {
            return { message };
          } else if (typeof message === "function") {
            return message(val);
          } else {
            return message;
          }
        };
        return this._refinement((val, ctx) => {
          const result = check(val);
          const setError = () => ctx.addIssue({
            code: ZodError_1.ZodIssueCode.custom,
            ...getIssueProperties(val)
          });
          if (typeof Promise !== "undefined" && result instanceof Promise) {
            return result.then((data) => {
              if (!data) {
                setError();
                return false;
              } else {
                return true;
              }
            });
          }
          if (!result) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
          if (!check(val)) {
            ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
            return false;
          } else {
            return true;
          }
        });
      }
      _refinement(refinement) {
        return new ZodEffects({
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: "refinement", refinement }
        });
      }
      superRefine(refinement) {
        return this._refinement(refinement);
      }
      constructor(def) {
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
        this["~standard"] = {
          version: 1,
          vendor: "zod",
          validate: (data) => this["~validate"](data)
        };
      }
      optional() {
        return ZodOptional.create(this, this._def);
      }
      nullable() {
        return ZodNullable.create(this, this._def);
      }
      nullish() {
        return this.nullable().optional();
      }
      array() {
        return ZodArray.create(this);
      }
      promise() {
        return ZodPromise.create(this, this._def);
      }
      or(option) {
        return ZodUnion.create([this, option], this._def);
      }
      and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
      }
      transform(transform) {
        return new ZodEffects({
          ...processCreateParams(this._def),
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: "transform", transform }
        });
      }
      default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault({
          ...processCreateParams(this._def),
          innerType: this,
          defaultValue: defaultValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodDefault
        });
      }
      brand() {
        return new ZodBranded({
          typeName: ZodFirstPartyTypeKind.ZodBranded,
          type: this,
          ...processCreateParams(this._def)
        });
      }
      catch(def) {
        const catchValueFunc = typeof def === "function" ? def : () => def;
        return new ZodCatch({
          ...processCreateParams(this._def),
          innerType: this,
          catchValue: catchValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodCatch
        });
      }
      describe(description) {
        const This = this.constructor;
        return new This({
          ...this._def,
          description
        });
      }
      pipe(target) {
        return ZodPipeline.create(this, target);
      }
      readonly() {
        return ZodReadonly.create(this);
      }
      isOptional() {
        return this.safeParse(void 0).success;
      }
      isNullable() {
        return this.safeParse(null).success;
      }
    };
    exports.ZodType = ZodType;
    exports.Schema = ZodType;
    exports.ZodSchema = ZodType;
    var cuidRegex = /^c[^\s-]{8,}$/i;
    var cuid2Regex = /^[0-9a-z]+$/;
    var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
    var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
    var nanoidRegex = /^[a-z0-9_-]{21}$/i;
    var jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
    var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
    var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
    var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
    var emojiRegex;
    var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
    var ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
    var ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
    var ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
    var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
    var base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
    var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
    var dateRegex = new RegExp(`^${dateRegexSource}$`);
    function timeRegexSource(args) {
      let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
      if (args.precision) {
        regex = `${regex}\\.\\d{${args.precision}}`;
      } else if (args.precision == null) {
        regex = `${regex}(\\.\\d+)?`;
      }
      return regex;
    }
    function timeRegex(args) {
      return new RegExp(`^${timeRegexSource(args)}$`);
    }
    function datetimeRegex(args) {
      let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
      const opts = [];
      opts.push(args.local ? `Z?` : `Z`);
      if (args.offset)
        opts.push(`([+-]\\d{2}:?\\d{2})`);
      regex = `${regex}(${opts.join("|")})`;
      return new RegExp(`^${regex}$`);
    }
    exports.datetimeRegex = datetimeRegex;
    function isValidIP(ip, version) {
      if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
        return true;
      }
      if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
        return true;
      }
      return false;
    }
    function isValidJWT(jwt, alg) {
      if (!jwtRegex.test(jwt))
        return false;
      try {
        const [header] = jwt.split(".");
        const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
        const decoded = JSON.parse(atob(base64));
        if (typeof decoded !== "object" || decoded === null)
          return false;
        if (!decoded.typ || !decoded.alg)
          return false;
        if (alg && decoded.alg !== alg)
          return false;
        return true;
      } catch (_a) {
        return false;
      }
    }
    function isValidCidr(ip, version) {
      if ((version === "v4" || !version) && ipv4CidrRegex.test(ip)) {
        return true;
      }
      if ((version === "v6" || !version) && ipv6CidrRegex.test(ip)) {
        return true;
      }
      return false;
    }
    var ZodString = class extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.string) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.string,
            received: ctx2.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const status = new parseUtil_1.ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.length < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.length > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "length") {
            const tooBig = input.data.length > check.value;
            const tooSmall = input.data.length < check.value;
            if (tooBig || tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              if (tooBig) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_big,
                  maximum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              } else if (tooSmall) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_small,
                  minimum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              }
              status.dirty();
            }
          } else if (check.kind === "email") {
            if (!emailRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "email",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "emoji") {
            if (!emojiRegex) {
              emojiRegex = new RegExp(_emojiRegex, "u");
            }
            if (!emojiRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "emoji",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "uuid") {
            if (!uuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "uuid",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "nanoid") {
            if (!nanoidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "nanoid",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid") {
            if (!cuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "cuid",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid2") {
            if (!cuid2Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "cuid2",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ulid") {
            if (!ulidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "ulid",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "url") {
            try {
              new URL(input.data);
            } catch (_a) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "url",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "regex") {
            check.regex.lastIndex = 0;
            const testResult = check.regex.test(input.data);
            if (!testResult) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "regex",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "trim") {
            input.data = input.data.trim();
          } else if (check.kind === "includes") {
            if (!input.data.includes(check.value, check.position)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: { includes: check.value, position: check.position },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "toLowerCase") {
            input.data = input.data.toLowerCase();
          } else if (check.kind === "toUpperCase") {
            input.data = input.data.toUpperCase();
          } else if (check.kind === "startsWith") {
            if (!input.data.startsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: { startsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "endsWith") {
            if (!input.data.endsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: { endsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "datetime") {
            const regex = datetimeRegex(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: "datetime",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "date") {
            const regex = dateRegex;
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: "date",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "time") {
            const regex = timeRegex(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: "time",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "duration") {
            if (!durationRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "duration",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ip") {
            if (!isValidIP(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "ip",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "jwt") {
            if (!isValidJWT(input.data, check.alg)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "jwt",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cidr") {
            if (!isValidCidr(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "cidr",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "base64") {
            if (!base64Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "base64",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "base64url") {
            if (!base64urlRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "base64url",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util_1.util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      _regex(regex, validation, message) {
        return this.refinement((data) => regex.test(data), {
          validation,
          code: ZodError_1.ZodIssueCode.invalid_string,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      _addCheck(check) {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      email(message) {
        return this._addCheck({ kind: "email", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      url(message) {
        return this._addCheck({ kind: "url", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      emoji(message) {
        return this._addCheck({ kind: "emoji", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      uuid(message) {
        return this._addCheck({ kind: "uuid", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      nanoid(message) {
        return this._addCheck({ kind: "nanoid", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      cuid(message) {
        return this._addCheck({ kind: "cuid", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      cuid2(message) {
        return this._addCheck({ kind: "cuid2", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      ulid(message) {
        return this._addCheck({ kind: "ulid", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      base64(message) {
        return this._addCheck({ kind: "base64", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      base64url(message) {
        return this._addCheck({
          kind: "base64url",
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      jwt(options) {
        return this._addCheck({ kind: "jwt", ...errorUtil_1.errorUtil.errToObj(options) });
      }
      ip(options) {
        return this._addCheck({ kind: "ip", ...errorUtil_1.errorUtil.errToObj(options) });
      }
      cidr(options) {
        return this._addCheck({ kind: "cidr", ...errorUtil_1.errorUtil.errToObj(options) });
      }
      datetime(options) {
        var _a, _b;
        if (typeof options === "string") {
          return this._addCheck({
            kind: "datetime",
            precision: null,
            offset: false,
            local: false,
            message: options
          });
        }
        return this._addCheck({
          kind: "datetime",
          precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
          offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
          local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
          ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      date(message) {
        return this._addCheck({ kind: "date", message });
      }
      time(options) {
        if (typeof options === "string") {
          return this._addCheck({
            kind: "time",
            precision: null,
            message: options
          });
        }
        return this._addCheck({
          kind: "time",
          precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
          ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      duration(message) {
        return this._addCheck({ kind: "duration", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      regex(regex, message) {
        return this._addCheck({
          kind: "regex",
          regex,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      includes(value, options) {
        return this._addCheck({
          kind: "includes",
          value,
          position: options === null || options === void 0 ? void 0 : options.position,
          ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      startsWith(value, message) {
        return this._addCheck({
          kind: "startsWith",
          value,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      endsWith(value, message) {
        return this._addCheck({
          kind: "endsWith",
          value,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      min(minLength, message) {
        return this._addCheck({
          kind: "min",
          value: minLength,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      max(maxLength, message) {
        return this._addCheck({
          kind: "max",
          value: maxLength,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      length(len, message) {
        return this._addCheck({
          kind: "length",
          value: len,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      /**
       * Equivalent to `.min(1)`
       */
      nonempty(message) {
        return this.min(1, errorUtil_1.errorUtil.errToObj(message));
      }
      trim() {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "trim" }]
        });
      }
      toLowerCase() {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toLowerCase" }]
        });
      }
      toUpperCase() {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toUpperCase" }]
        });
      }
      get isDatetime() {
        return !!this._def.checks.find((ch) => ch.kind === "datetime");
      }
      get isDate() {
        return !!this._def.checks.find((ch) => ch.kind === "date");
      }
      get isTime() {
        return !!this._def.checks.find((ch) => ch.kind === "time");
      }
      get isDuration() {
        return !!this._def.checks.find((ch) => ch.kind === "duration");
      }
      get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
      }
      get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
      }
      get isEmoji() {
        return !!this._def.checks.find((ch) => ch.kind === "emoji");
      }
      get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
      }
      get isNANOID() {
        return !!this._def.checks.find((ch) => ch.kind === "nanoid");
      }
      get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
      }
      get isCUID2() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid2");
      }
      get isULID() {
        return !!this._def.checks.find((ch) => ch.kind === "ulid");
      }
      get isIP() {
        return !!this._def.checks.find((ch) => ch.kind === "ip");
      }
      get isCIDR() {
        return !!this._def.checks.find((ch) => ch.kind === "cidr");
      }
      get isBase64() {
        return !!this._def.checks.find((ch) => ch.kind === "base64");
      }
      get isBase64url() {
        return !!this._def.checks.find((ch) => ch.kind === "base64url");
      }
      get minLength() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxLength() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
    };
    exports.ZodString = ZodString;
    ZodString.create = (params) => {
      var _a;
      return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params)
      });
    };
    function floatSafeRemainder(val, step) {
      const valDecCount = (val.toString().split(".")[1] || "").length;
      const stepDecCount = (step.toString().split(".")[1] || "").length;
      const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
      const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
      const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
      return valInt % stepInt / Math.pow(10, decCount);
    }
    var ZodNumber = class extends ZodType {
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.number) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.number,
            received: ctx2.parsedType
          });
          return parseUtil_1.INVALID;
        }
        let ctx = void 0;
        const status = new parseUtil_1.ParseStatus();
        for (const check of this._def.checks) {
          if (check.kind === "int") {
            if (!util_1.util.isInteger(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: "integer",
                received: "float",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                minimum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                maximum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (floatSafeRemainder(input.data, check.value) !== 0) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "finite") {
            if (!Number.isFinite(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.not_finite,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util_1.util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      gte(value, message) {
        return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
      }
      gt(value, message) {
        return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
      }
      lte(value, message) {
        return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
      }
      lt(value, message) {
        return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil_1.errorUtil.toString(message)
            }
          ]
        });
      }
      _addCheck(check) {
        return new ZodNumber({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      int(message) {
        return this._addCheck({
          kind: "int",
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      positive(message) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: false,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      negative(message) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: false,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      nonpositive(message) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: true,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      nonnegative(message) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: true,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      finite(message) {
        return this._addCheck({
          kind: "finite",
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      safe(message) {
        return this._addCheck({
          kind: "min",
          inclusive: true,
          value: Number.MIN_SAFE_INTEGER,
          message: errorUtil_1.errorUtil.toString(message)
        })._addCheck({
          kind: "max",
          inclusive: true,
          value: Number.MAX_SAFE_INTEGER,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
      get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util_1.util.isInteger(ch.value));
      }
      get isFinite() {
        let max = null, min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
            return true;
          } else if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          } else if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return Number.isFinite(min) && Number.isFinite(max);
      }
    };
    exports.ZodNumber = ZodNumber;
    ZodNumber.create = (params) => {
      return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
      });
    };
    var ZodBigInt = class extends ZodType {
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
      }
      _parse(input) {
        if (this._def.coerce) {
          try {
            input.data = BigInt(input.data);
          } catch (_a) {
            return this._getInvalidInput(input);
          }
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.bigint) {
          return this._getInvalidInput(input);
        }
        let ctx = void 0;
        const status = new parseUtil_1.ParseStatus();
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                type: "bigint",
                minimum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                type: "bigint",
                maximum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (input.data % check.value !== BigInt(0)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util_1.util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      _getInvalidInput(input) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.bigint,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      gte(value, message) {
        return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
      }
      gt(value, message) {
        return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
      }
      lte(value, message) {
        return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
      }
      lt(value, message) {
        return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
        return new ZodBigInt({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil_1.errorUtil.toString(message)
            }
          ]
        });
      }
      _addCheck(check) {
        return new ZodBigInt({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      positive(message) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      negative(message) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      nonpositive(message) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      nonnegative(message) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
    };
    exports.ZodBigInt = ZodBigInt;
    ZodBigInt.create = (params) => {
      var _a;
      return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params)
      });
    };
    var ZodBoolean = class extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.boolean) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.boolean,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodBoolean = ZodBoolean;
    ZodBoolean.create = (params) => {
      return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
      });
    };
    var ZodDate = class extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.date) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.date,
            received: ctx2.parsedType
          });
          return parseUtil_1.INVALID;
        }
        if (isNaN(input.data.getTime())) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_date
          });
          return parseUtil_1.INVALID;
        }
        const status = new parseUtil_1.ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.getTime() < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                message: check.message,
                inclusive: true,
                exact: false,
                minimum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.getTime() > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                message: check.message,
                inclusive: true,
                exact: false,
                maximum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else {
            util_1.util.assertNever(check);
          }
        }
        return {
          status: status.value,
          value: new Date(input.data.getTime())
        };
      }
      _addCheck(check) {
        return new ZodDate({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      min(minDate, message) {
        return this._addCheck({
          kind: "min",
          value: minDate.getTime(),
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      max(maxDate, message) {
        return this._addCheck({
          kind: "max",
          value: maxDate.getTime(),
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      get minDate() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min != null ? new Date(min) : null;
      }
      get maxDate() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max != null ? new Date(max) : null;
      }
    };
    exports.ZodDate = ZodDate;
    ZodDate.create = (params) => {
      return new ZodDate({
        checks: [],
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params)
      });
    };
    var ZodSymbol = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.symbol) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.symbol,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodSymbol = ZodSymbol;
    ZodSymbol.create = (params) => {
      return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params)
      });
    };
    var ZodUndefined = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.undefined,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodUndefined = ZodUndefined;
    ZodUndefined.create = (params) => {
      return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params)
      });
    };
    var ZodNull = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.null) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.null,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodNull = ZodNull;
    ZodNull.create = (params) => {
      return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params)
      });
    };
    var ZodAny = class extends ZodType {
      constructor() {
        super(...arguments);
        this._any = true;
      }
      _parse(input) {
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodAny = ZodAny;
    ZodAny.create = (params) => {
      return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params)
      });
    };
    var ZodUnknown = class extends ZodType {
      constructor() {
        super(...arguments);
        this._unknown = true;
      }
      _parse(input) {
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodUnknown = ZodUnknown;
    ZodUnknown.create = (params) => {
      return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params)
      });
    };
    var ZodNever = class extends ZodType {
      _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.never,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
    };
    exports.ZodNever = ZodNever;
    ZodNever.create = (params) => {
      return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params)
      });
    };
    var ZodVoid = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.void,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodVoid = ZodVoid;
    ZodVoid.create = (params) => {
      return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params)
      });
    };
    var ZodArray = class extends ZodType {
      _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== util_1.ZodParsedType.array) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.array,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        if (def.exactLength !== null) {
          const tooBig = ctx.data.length > def.exactLength.value;
          const tooSmall = ctx.data.length < def.exactLength.value;
          if (tooBig || tooSmall) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: tooBig ? ZodError_1.ZodIssueCode.too_big : ZodError_1.ZodIssueCode.too_small,
              minimum: tooSmall ? def.exactLength.value : void 0,
              maximum: tooBig ? def.exactLength.value : void 0,
              type: "array",
              inclusive: true,
              exact: true,
              message: def.exactLength.message
            });
            status.dirty();
          }
        }
        if (def.minLength !== null) {
          if (ctx.data.length < def.minLength.value) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_small,
              minimum: def.minLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.minLength.message
            });
            status.dirty();
          }
        }
        if (def.maxLength !== null) {
          if (ctx.data.length > def.maxLength.value) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_big,
              maximum: def.maxLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.maxLength.message
            });
            status.dirty();
          }
        }
        if (ctx.common.async) {
          return Promise.all([...ctx.data].map((item, i) => {
            return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
          })).then((result2) => {
            return parseUtil_1.ParseStatus.mergeArray(status, result2);
          });
        }
        const result = [...ctx.data].map((item, i) => {
          return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return parseUtil_1.ParseStatus.mergeArray(status, result);
      }
      get element() {
        return this._def.type;
      }
      min(minLength, message) {
        return new ZodArray({
          ...this._def,
          minLength: { value: minLength, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      max(maxLength, message) {
        return new ZodArray({
          ...this._def,
          maxLength: { value: maxLength, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      length(len, message) {
        return new ZodArray({
          ...this._def,
          exactLength: { value: len, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      nonempty(message) {
        return this.min(1, message);
      }
    };
    exports.ZodArray = ZodArray;
    ZodArray.create = (schema, params) => {
      return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params)
      });
    };
    function deepPartialify(schema) {
      if (schema instanceof ZodObject) {
        const newShape = {};
        for (const key in schema.shape) {
          const fieldSchema = schema.shape[key];
          newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
          ...schema._def,
          shape: () => newShape
        });
      } else if (schema instanceof ZodArray) {
        return new ZodArray({
          ...schema._def,
          type: deepPartialify(schema.element)
        });
      } else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
      } else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
      } else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
      } else {
        return schema;
      }
    }
    var ZodObject = class extends ZodType {
      constructor() {
        super(...arguments);
        this._cached = null;
        this.nonstrict = this.passthrough;
        this.augment = this.extend;
      }
      _getCached() {
        if (this._cached !== null)
          return this._cached;
        const shape = this._def.shape();
        const keys = util_1.util.objectKeys(shape);
        return this._cached = { shape, keys };
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.object) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.object,
            received: ctx2.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
          for (const key in ctx.data) {
            if (!shapeKeys.includes(key)) {
              extraKeys.push(key);
            }
          }
        }
        const pairs = [];
        for (const key of shapeKeys) {
          const keyValidator = shape[key];
          const value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (this._def.catchall instanceof ZodNever) {
          const unknownKeys = this._def.unknownKeys;
          if (unknownKeys === "passthrough") {
            for (const key of extraKeys) {
              pairs.push({
                key: { status: "valid", value: key },
                value: { status: "valid", value: ctx.data[key] }
              });
            }
          } else if (unknownKeys === "strict") {
            if (extraKeys.length > 0) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.unrecognized_keys,
                keys: extraKeys
              });
              status.dirty();
            }
          } else if (unknownKeys === "strip") {
          } else {
            throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
          }
        } else {
          const catchall = this._def.catchall;
          for (const key of extraKeys) {
            const value = ctx.data[key];
            pairs.push({
              key: { status: "valid", value: key },
              value: catchall._parse(
                new ParseInputLazyPath(ctx, value, ctx.path, key)
                //, ctx.child(key), value, getParsedType(value)
              ),
              alwaysSet: key in ctx.data
            });
          }
        }
        if (ctx.common.async) {
          return Promise.resolve().then(async () => {
            const syncPairs = [];
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              syncPairs.push({
                key,
                value,
                alwaysSet: pair.alwaysSet
              });
            }
            return syncPairs;
          }).then((syncPairs) => {
            return parseUtil_1.ParseStatus.mergeObjectSync(status, syncPairs);
          });
        } else {
          return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get shape() {
        return this._def.shape();
      }
      strict(message) {
        errorUtil_1.errorUtil.errToObj;
        return new ZodObject({
          ...this._def,
          unknownKeys: "strict",
          ...message !== void 0 ? {
            errorMap: (issue, ctx) => {
              var _a, _b, _c, _d;
              const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
              if (issue.code === "unrecognized_keys")
                return {
                  message: (_d = errorUtil_1.errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                };
              return {
                message: defaultError
              };
            }
          } : {}
        });
      }
      strip() {
        return new ZodObject({
          ...this._def,
          unknownKeys: "strip"
        });
      }
      passthrough() {
        return new ZodObject({
          ...this._def,
          unknownKeys: "passthrough"
        });
      }
      // const AugmentFactory =
      //   <Def extends ZodObjectDef>(def: Def) =>
      //   <Augmentation extends ZodRawShape>(
      //     augmentation: Augmentation
      //   ): ZodObject<
      //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
      //     Def["unknownKeys"],
      //     Def["catchall"]
      //   > => {
      //     return new ZodObject({
      //       ...def,
      //       shape: () => ({
      //         ...def.shape(),
      //         ...augmentation,
      //       }),
      //     }) as any;
      //   };
      extend(augmentation) {
        return new ZodObject({
          ...this._def,
          shape: () => ({
            ...this._def.shape(),
            ...augmentation
          })
        });
      }
      /**
       * Prior to zod@1.0.12 there was a bug in the
       * inferred type of merged objects. Please
       * upgrade if you are experiencing issues.
       */
      merge(merging) {
        const merged = new ZodObject({
          unknownKeys: merging._def.unknownKeys,
          catchall: merging._def.catchall,
          shape: () => ({
            ...this._def.shape(),
            ...merging._def.shape()
          }),
          typeName: ZodFirstPartyTypeKind.ZodObject
        });
        return merged;
      }
      // merge<
      //   Incoming extends AnyZodObject,
      //   Augmentation extends Incoming["shape"],
      //   NewOutput extends {
      //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
      //       ? Augmentation[k]["_output"]
      //       : k extends keyof Output
      //       ? Output[k]
      //       : never;
      //   },
      //   NewInput extends {
      //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
      //       ? Augmentation[k]["_input"]
      //       : k extends keyof Input
      //       ? Input[k]
      //       : never;
      //   }
      // >(
      //   merging: Incoming
      // ): ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"],
      //   NewOutput,
      //   NewInput
      // > {
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      setKey(key, schema) {
        return this.augment({ [key]: schema });
      }
      // merge<Incoming extends AnyZodObject>(
      //   merging: Incoming
      // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
      // ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"]
      // > {
      //   // const mergedShape = objectUtil.mergeShapes(
      //   //   this._def.shape(),
      //   //   merging._def.shape()
      //   // );
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      catchall(index) {
        return new ZodObject({
          ...this._def,
          catchall: index
        });
      }
      pick(mask) {
        const shape = {};
        util_1.util.objectKeys(mask).forEach((key) => {
          if (mask[key] && this.shape[key]) {
            shape[key] = this.shape[key];
          }
        });
        return new ZodObject({
          ...this._def,
          shape: () => shape
        });
      }
      omit(mask) {
        const shape = {};
        util_1.util.objectKeys(this.shape).forEach((key) => {
          if (!mask[key]) {
            shape[key] = this.shape[key];
          }
        });
        return new ZodObject({
          ...this._def,
          shape: () => shape
        });
      }
      /**
       * @deprecated
       */
      deepPartial() {
        return deepPartialify(this);
      }
      partial(mask) {
        const newShape = {};
        util_1.util.objectKeys(this.shape).forEach((key) => {
          const fieldSchema = this.shape[key];
          if (mask && !mask[key]) {
            newShape[key] = fieldSchema;
          } else {
            newShape[key] = fieldSchema.optional();
          }
        });
        return new ZodObject({
          ...this._def,
          shape: () => newShape
        });
      }
      required(mask) {
        const newShape = {};
        util_1.util.objectKeys(this.shape).forEach((key) => {
          if (mask && !mask[key]) {
            newShape[key] = this.shape[key];
          } else {
            const fieldSchema = this.shape[key];
            let newField = fieldSchema;
            while (newField instanceof ZodOptional) {
              newField = newField._def.innerType;
            }
            newShape[key] = newField;
          }
        });
        return new ZodObject({
          ...this._def,
          shape: () => newShape
        });
      }
      keyof() {
        return createZodEnum(util_1.util.objectKeys(this.shape));
      }
    };
    exports.ZodObject = ZodObject;
    ZodObject.create = (shape, params) => {
      return new ZodObject({
        shape: () => shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodObject.strictCreate = (shape, params) => {
      return new ZodObject({
        shape: () => shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodObject.lazycreate = (shape, params) => {
      return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    var ZodUnion = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
          for (const result of results) {
            if (result.result.status === "valid") {
              return result.result;
            }
          }
          for (const result of results) {
            if (result.result.status === "dirty") {
              ctx.common.issues.push(...result.ctx.common.issues);
              return result.result;
            }
          }
          const unionErrors = results.map((result) => new ZodError_1.ZodError(result.ctx.common.issues));
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_union,
            unionErrors
          });
          return parseUtil_1.INVALID;
        }
        if (ctx.common.async) {
          return Promise.all(options.map(async (option) => {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            return {
              result: await option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: childCtx
              }),
              ctx: childCtx
            };
          })).then(handleResults);
        } else {
          let dirty = void 0;
          const issues = [];
          for (const option of options) {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            const result = option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            });
            if (result.status === "valid") {
              return result;
            } else if (result.status === "dirty" && !dirty) {
              dirty = { result, ctx: childCtx };
            }
            if (childCtx.common.issues.length) {
              issues.push(childCtx.common.issues);
            }
          }
          if (dirty) {
            ctx.common.issues.push(...dirty.ctx.common.issues);
            return dirty.result;
          }
          const unionErrors = issues.map((issues2) => new ZodError_1.ZodError(issues2));
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_union,
            unionErrors
          });
          return parseUtil_1.INVALID;
        }
      }
      get options() {
        return this._def.options;
      }
    };
    exports.ZodUnion = ZodUnion;
    ZodUnion.create = (types, params) => {
      return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params)
      });
    };
    var getDiscriminator = (type) => {
      if (type instanceof ZodLazy) {
        return getDiscriminator(type.schema);
      } else if (type instanceof ZodEffects) {
        return getDiscriminator(type.innerType());
      } else if (type instanceof ZodLiteral) {
        return [type.value];
      } else if (type instanceof ZodEnum) {
        return type.options;
      } else if (type instanceof ZodNativeEnum) {
        return util_1.util.objectValues(type.enum);
      } else if (type instanceof ZodDefault) {
        return getDiscriminator(type._def.innerType);
      } else if (type instanceof ZodUndefined) {
        return [void 0];
      } else if (type instanceof ZodNull) {
        return [null];
      } else if (type instanceof ZodOptional) {
        return [void 0, ...getDiscriminator(type.unwrap())];
      } else if (type instanceof ZodNullable) {
        return [null, ...getDiscriminator(type.unwrap())];
      } else if (type instanceof ZodBranded) {
        return getDiscriminator(type.unwrap());
      } else if (type instanceof ZodReadonly) {
        return getDiscriminator(type.unwrap());
      } else if (type instanceof ZodCatch) {
        return getDiscriminator(type._def.innerType);
      } else {
        return [];
      }
    };
    var ZodDiscriminatedUnion = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.object) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.object,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_union_discriminator,
            options: Array.from(this.optionsMap.keys()),
            path: [discriminator]
          });
          return parseUtil_1.INVALID;
        }
        if (ctx.common.async) {
          return option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        } else {
          return option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        }
      }
      get discriminator() {
        return this._def.discriminator;
      }
      get options() {
        return this._def.options;
      }
      get optionsMap() {
        return this._def.optionsMap;
      }
      /**
       * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
       * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
       * have a different value for each object in the union.
       * @param discriminator the name of the discriminator property
       * @param types an array of object schemas
       * @param params
       */
      static create(discriminator, options, params) {
        const optionsMap = /* @__PURE__ */ new Map();
        for (const type of options) {
          const discriminatorValues = getDiscriminator(type.shape[discriminator]);
          if (!discriminatorValues.length) {
            throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
          }
          for (const value of discriminatorValues) {
            if (optionsMap.has(value)) {
              throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
            }
            optionsMap.set(value, type);
          }
        }
        return new ZodDiscriminatedUnion({
          typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
          discriminator,
          options,
          optionsMap,
          ...processCreateParams(params)
        });
      }
    };
    exports.ZodDiscriminatedUnion = ZodDiscriminatedUnion;
    function mergeValues(a, b) {
      const aType = (0, util_1.getParsedType)(a);
      const bType = (0, util_1.getParsedType)(b);
      if (a === b) {
        return { valid: true, data: a };
      } else if (aType === util_1.ZodParsedType.object && bType === util_1.ZodParsedType.object) {
        const bKeys = util_1.util.objectKeys(b);
        const sharedKeys = util_1.util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
        const newObj = { ...a, ...b };
        for (const key of sharedKeys) {
          const sharedValue = mergeValues(a[key], b[key]);
          if (!sharedValue.valid) {
            return { valid: false };
          }
          newObj[key] = sharedValue.data;
        }
        return { valid: true, data: newObj };
      } else if (aType === util_1.ZodParsedType.array && bType === util_1.ZodParsedType.array) {
        if (a.length !== b.length) {
          return { valid: false };
        }
        const newArray = [];
        for (let index = 0; index < a.length; index++) {
          const itemA = a[index];
          const itemB = b[index];
          const sharedValue = mergeValues(itemA, itemB);
          if (!sharedValue.valid) {
            return { valid: false };
          }
          newArray.push(sharedValue.data);
        }
        return { valid: true, data: newArray };
      } else if (aType === util_1.ZodParsedType.date && bType === util_1.ZodParsedType.date && +a === +b) {
        return { valid: true, data: a };
      } else {
        return { valid: false };
      }
    }
    var ZodIntersection = class extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight) => {
          if ((0, parseUtil_1.isAborted)(parsedLeft) || (0, parseUtil_1.isAborted)(parsedRight)) {
            return parseUtil_1.INVALID;
          }
          const merged = mergeValues(parsedLeft.value, parsedRight.value);
          if (!merged.valid) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_intersection_types
            });
            return parseUtil_1.INVALID;
          }
          if ((0, parseUtil_1.isDirty)(parsedLeft) || (0, parseUtil_1.isDirty)(parsedRight)) {
            status.dirty();
          }
          return { status: status.value, value: merged.data };
        };
        if (ctx.common.async) {
          return Promise.all([
            this._def.left._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }),
            this._def.right._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            })
          ]).then(([left, right]) => handleParsed(left, right));
        } else {
          return handleParsed(this._def.left._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }), this._def.right._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }));
        }
      }
    };
    exports.ZodIntersection = ZodIntersection;
    ZodIntersection.create = (left, right, params) => {
      return new ZodIntersection({
        left,
        right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params)
      });
    };
    var ZodTuple = class extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.array) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.array,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.too_small,
            minimum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          return parseUtil_1.INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.too_big,
            maximum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          status.dirty();
        }
        const items = [...ctx.data].map((item, itemIndex) => {
          const schema = this._def.items[itemIndex] || this._def.rest;
          if (!schema)
            return null;
          return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        }).filter((x) => !!x);
        if (ctx.common.async) {
          return Promise.all(items).then((results) => {
            return parseUtil_1.ParseStatus.mergeArray(status, results);
          });
        } else {
          return parseUtil_1.ParseStatus.mergeArray(status, items);
        }
      }
      get items() {
        return this._def.items;
      }
      rest(rest) {
        return new ZodTuple({
          ...this._def,
          rest
        });
      }
    };
    exports.ZodTuple = ZodTuple;
    ZodTuple.create = (schemas, params) => {
      if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
      }
      return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params)
      });
    };
    var ZodRecord = class extends ZodType {
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.object) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.object,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
          pairs.push({
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
            value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (ctx.common.async) {
          return parseUtil_1.ParseStatus.mergeObjectAsync(status, pairs);
        } else {
          return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get element() {
        return this._def.valueType;
      }
      static create(first, second, third) {
        if (second instanceof ZodType) {
          return new ZodRecord({
            keyType: first,
            valueType: second,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(third)
          });
        }
        return new ZodRecord({
          keyType: ZodString.create(),
          valueType: first,
          typeName: ZodFirstPartyTypeKind.ZodRecord,
          ...processCreateParams(second)
        });
      }
    };
    exports.ZodRecord = ZodRecord;
    var ZodMap = class extends ZodType {
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.map) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.map,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
          return {
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
            value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
          };
        });
        if (ctx.common.async) {
          const finalMap = /* @__PURE__ */ new Map();
          return Promise.resolve().then(async () => {
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              if (key.status === "aborted" || value.status === "aborted") {
                return parseUtil_1.INVALID;
              }
              if (key.status === "dirty" || value.status === "dirty") {
                status.dirty();
              }
              finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
          });
        } else {
          const finalMap = /* @__PURE__ */ new Map();
          for (const pair of pairs) {
            const key = pair.key;
            const value = pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return parseUtil_1.INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        }
      }
    };
    exports.ZodMap = ZodMap;
    ZodMap.create = (keyType, valueType, params) => {
      return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params)
      });
    };
    var ZodSet = class extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.set) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.set,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
          if (ctx.data.size < def.minSize.value) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_small,
              minimum: def.minSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.minSize.message
            });
            status.dirty();
          }
        }
        if (def.maxSize !== null) {
          if (ctx.data.size > def.maxSize.value) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_big,
              maximum: def.maxSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.maxSize.message
            });
            status.dirty();
          }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements2) {
          const parsedSet = /* @__PURE__ */ new Set();
          for (const element of elements2) {
            if (element.status === "aborted")
              return parseUtil_1.INVALID;
            if (element.status === "dirty")
              status.dirty();
            parsedSet.add(element.value);
          }
          return { status: status.value, value: parsedSet };
        }
        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
          return Promise.all(elements).then((elements2) => finalizeSet(elements2));
        } else {
          return finalizeSet(elements);
        }
      }
      min(minSize, message) {
        return new ZodSet({
          ...this._def,
          minSize: { value: minSize, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      max(maxSize, message) {
        return new ZodSet({
          ...this._def,
          maxSize: { value: maxSize, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      size(size, message) {
        return this.min(size, message).max(size, message);
      }
      nonempty(message) {
        return this.min(1, message);
      }
    };
    exports.ZodSet = ZodSet;
    ZodSet.create = (valueType, params) => {
      return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params)
      });
    };
    var ZodFunction = class extends ZodType {
      constructor() {
        super(...arguments);
        this.validate = this.implement;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.function) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.function,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        function makeArgsIssue(args, error) {
          return (0, parseUtil_1.makeIssue)({
            data: args,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              (0, errors_1.getErrorMap)(),
              errors_1.defaultErrorMap
            ].filter((x) => !!x),
            issueData: {
              code: ZodError_1.ZodIssueCode.invalid_arguments,
              argumentsError: error
            }
          });
        }
        function makeReturnsIssue(returns, error) {
          return (0, parseUtil_1.makeIssue)({
            data: returns,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              (0, errors_1.getErrorMap)(),
              errors_1.defaultErrorMap
            ].filter((x) => !!x),
            issueData: {
              code: ZodError_1.ZodIssueCode.invalid_return_type,
              returnTypeError: error
            }
          });
        }
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
          const me = this;
          return (0, parseUtil_1.OK)(async function(...args) {
            const error = new ZodError_1.ZodError([]);
            const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
              error.addIssue(makeArgsIssue(args, e));
              throw error;
            });
            const result = await Reflect.apply(fn, this, parsedArgs);
            const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
              error.addIssue(makeReturnsIssue(result, e));
              throw error;
            });
            return parsedReturns;
          });
        } else {
          const me = this;
          return (0, parseUtil_1.OK)(function(...args) {
            const parsedArgs = me._def.args.safeParse(args, params);
            if (!parsedArgs.success) {
              throw new ZodError_1.ZodError([makeArgsIssue(args, parsedArgs.error)]);
            }
            const result = Reflect.apply(fn, this, parsedArgs.data);
            const parsedReturns = me._def.returns.safeParse(result, params);
            if (!parsedReturns.success) {
              throw new ZodError_1.ZodError([makeReturnsIssue(result, parsedReturns.error)]);
            }
            return parsedReturns.data;
          });
        }
      }
      parameters() {
        return this._def.args;
      }
      returnType() {
        return this._def.returns;
      }
      args(...items) {
        return new ZodFunction({
          ...this._def,
          args: ZodTuple.create(items).rest(ZodUnknown.create())
        });
      }
      returns(returnType) {
        return new ZodFunction({
          ...this._def,
          returns: returnType
        });
      }
      implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      static create(args, returns, params) {
        return new ZodFunction({
          args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
          returns: returns || ZodUnknown.create(),
          typeName: ZodFirstPartyTypeKind.ZodFunction,
          ...processCreateParams(params)
        });
      }
    };
    exports.ZodFunction = ZodFunction;
    var ZodLazy = class extends ZodType {
      get schema() {
        return this._def.getter();
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
      }
    };
    exports.ZodLazy = ZodLazy;
    ZodLazy.create = (getter, params) => {
      return new ZodLazy({
        getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params)
      });
    };
    var ZodLiteral = class extends ZodType {
      _parse(input) {
        if (input.data !== this._def.value) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            received: ctx.data,
            code: ZodError_1.ZodIssueCode.invalid_literal,
            expected: this._def.value
          });
          return parseUtil_1.INVALID;
        }
        return { status: "valid", value: input.data };
      }
      get value() {
        return this._def.value;
      }
    };
    exports.ZodLiteral = ZodLiteral;
    ZodLiteral.create = (value, params) => {
      return new ZodLiteral({
        value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params)
      });
    };
    function createZodEnum(values, params) {
      return new ZodEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params)
      });
    }
    var ZodEnum = class extends ZodType {
      constructor() {
        super(...arguments);
        _ZodEnum_cache.set(this, void 0);
      }
      _parse(input) {
        if (typeof input.data !== "string") {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          (0, parseUtil_1.addIssueToContext)(ctx, {
            expected: util_1.util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodError_1.ZodIssueCode.invalid_type
          });
          return parseUtil_1.INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
          __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          (0, parseUtil_1.addIssueToContext)(ctx, {
            received: ctx.data,
            code: ZodError_1.ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
      get options() {
        return this._def.values;
      }
      get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      extract(values, newDef = this._def) {
        return ZodEnum.create(values, {
          ...this._def,
          ...newDef
        });
      }
      exclude(values, newDef = this._def) {
        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
          ...this._def,
          ...newDef
        });
      }
    };
    exports.ZodEnum = ZodEnum;
    _ZodEnum_cache = /* @__PURE__ */ new WeakMap();
    ZodEnum.create = createZodEnum;
    var ZodNativeEnum = class extends ZodType {
      constructor() {
        super(...arguments);
        _ZodNativeEnum_cache.set(this, void 0);
      }
      _parse(input) {
        const nativeEnumValues = util_1.util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== util_1.ZodParsedType.string && ctx.parsedType !== util_1.ZodParsedType.number) {
          const expectedValues = util_1.util.objectValues(nativeEnumValues);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            expected: util_1.util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodError_1.ZodIssueCode.invalid_type
          });
          return parseUtil_1.INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
          __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util_1.util.getValidEnumValues(this._def.values)), "f");
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
          const expectedValues = util_1.util.objectValues(nativeEnumValues);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            received: ctx.data,
            code: ZodError_1.ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
      get enum() {
        return this._def.values;
      }
    };
    exports.ZodNativeEnum = ZodNativeEnum;
    _ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();
    ZodNativeEnum.create = (values, params) => {
      return new ZodNativeEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params)
      });
    };
    var ZodPromise = class extends ZodType {
      unwrap() {
        return this._def.type;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.promise && ctx.common.async === false) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.promise,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const promisified = ctx.parsedType === util_1.ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
        return (0, parseUtil_1.OK)(promisified.then((data) => {
          return this._def.type.parseAsync(data, {
            path: ctx.path,
            errorMap: ctx.common.contextualErrorMap
          });
        }));
      }
    };
    exports.ZodPromise = ZodPromise;
    ZodPromise.create = (schema, params) => {
      return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params)
      });
    };
    var ZodEffects = class extends ZodType {
      innerType() {
        return this._def.schema;
      }
      sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
          addIssue: (arg) => {
            (0, parseUtil_1.addIssueToContext)(ctx, arg);
            if (arg.fatal) {
              status.abort();
            } else {
              status.dirty();
            }
          },
          get path() {
            return ctx.path;
          }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
          const processed = effect.transform(ctx.data, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(processed).then(async (processed2) => {
              if (status.value === "aborted")
                return parseUtil_1.INVALID;
              const result = await this._def.schema._parseAsync({
                data: processed2,
                path: ctx.path,
                parent: ctx
              });
              if (result.status === "aborted")
                return parseUtil_1.INVALID;
              if (result.status === "dirty")
                return (0, parseUtil_1.DIRTY)(result.value);
              if (status.value === "dirty")
                return (0, parseUtil_1.DIRTY)(result.value);
              return result;
            });
          } else {
            if (status.value === "aborted")
              return parseUtil_1.INVALID;
            const result = this._def.schema._parseSync({
              data: processed,
              path: ctx.path,
              parent: ctx
            });
            if (result.status === "aborted")
              return parseUtil_1.INVALID;
            if (result.status === "dirty")
              return (0, parseUtil_1.DIRTY)(result.value);
            if (status.value === "dirty")
              return (0, parseUtil_1.DIRTY)(result.value);
            return result;
          }
        }
        if (effect.type === "refinement") {
          const executeRefinement = (acc) => {
            const result = effect.refinement(acc, checkCtx);
            if (ctx.common.async) {
              return Promise.resolve(result);
            }
            if (result instanceof Promise) {
              throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
            }
            return acc;
          };
          if (ctx.common.async === false) {
            const inner = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inner.status === "aborted")
              return parseUtil_1.INVALID;
            if (inner.status === "dirty")
              status.dirty();
            executeRefinement(inner.value);
            return { status: status.value, value: inner.value };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
              if (inner.status === "aborted")
                return parseUtil_1.INVALID;
              if (inner.status === "dirty")
                status.dirty();
              return executeRefinement(inner.value).then(() => {
                return { status: status.value, value: inner.value };
              });
            });
          }
        }
        if (effect.type === "transform") {
          if (ctx.common.async === false) {
            const base = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (!(0, parseUtil_1.isValid)(base))
              return base;
            const result = effect.transform(base.value, checkCtx);
            if (result instanceof Promise) {
              throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
            }
            return { status: status.value, value: result };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
              if (!(0, parseUtil_1.isValid)(base))
                return base;
              return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
            });
          }
        }
        util_1.util.assertNever(effect);
      }
    };
    exports.ZodEffects = ZodEffects;
    exports.ZodTransformer = ZodEffects;
    ZodEffects.create = (schema, effect, params) => {
      return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params)
      });
    };
    ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
      return new ZodEffects({
        schema,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params)
      });
    };
    var ZodOptional = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === util_1.ZodParsedType.undefined) {
          return (0, parseUtil_1.OK)(void 0);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    exports.ZodOptional = ZodOptional;
    ZodOptional.create = (type, params) => {
      return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params)
      });
    };
    var ZodNullable = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === util_1.ZodParsedType.null) {
          return (0, parseUtil_1.OK)(null);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    exports.ZodNullable = ZodNullable;
    ZodNullable.create = (type, params) => {
      return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params)
      });
    };
    var ZodDefault = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === util_1.ZodParsedType.undefined) {
          data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      removeDefault() {
        return this._def.innerType;
      }
    };
    exports.ZodDefault = ZodDefault;
    ZodDefault.create = (type, params) => {
      return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function" ? params.default : () => params.default,
        ...processCreateParams(params)
      });
    };
    var ZodCatch = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const newCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          }
        };
        const result = this._def.innerType._parse({
          data: newCtx.data,
          path: newCtx.path,
          parent: {
            ...newCtx
          }
        });
        if ((0, parseUtil_1.isAsync)(result)) {
          return result.then((result2) => {
            return {
              status: "valid",
              value: result2.status === "valid" ? result2.value : this._def.catchValue({
                get error() {
                  return new ZodError_1.ZodError(newCtx.common.issues);
                },
                input: newCtx.data
              })
            };
          });
        } else {
          return {
            status: "valid",
            value: result.status === "valid" ? result.value : this._def.catchValue({
              get error() {
                return new ZodError_1.ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        }
      }
      removeCatch() {
        return this._def.innerType;
      }
    };
    exports.ZodCatch = ZodCatch;
    ZodCatch.create = (type, params) => {
      return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
        ...processCreateParams(params)
      });
    };
    var ZodNaN = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.nan) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.nan,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return { status: "valid", value: input.data };
      }
    };
    exports.ZodNaN = ZodNaN;
    ZodNaN.create = (params) => {
      return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params)
      });
    };
    exports.BRAND = Symbol("zod_brand");
    var ZodBranded = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      unwrap() {
        return this._def.type;
      }
    };
    exports.ZodBranded = ZodBranded;
    var ZodPipeline = class extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
          const handleAsync = async () => {
            const inResult = await this._def.in._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inResult.status === "aborted")
              return parseUtil_1.INVALID;
            if (inResult.status === "dirty") {
              status.dirty();
              return (0, parseUtil_1.DIRTY)(inResult.value);
            } else {
              return this._def.out._parseAsync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
              });
            }
          };
          return handleAsync();
        } else {
          const inResult = this._def.in._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return parseUtil_1.INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return {
              status: "dirty",
              value: inResult.value
            };
          } else {
            return this._def.out._parseSync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        }
      }
      static create(a, b) {
        return new ZodPipeline({
          in: a,
          out: b,
          typeName: ZodFirstPartyTypeKind.ZodPipeline
        });
      }
    };
    exports.ZodPipeline = ZodPipeline;
    var ZodReadonly = class extends ZodType {
      _parse(input) {
        const result = this._def.innerType._parse(input);
        const freeze = (data) => {
          if ((0, parseUtil_1.isValid)(data)) {
            data.value = Object.freeze(data.value);
          }
          return data;
        };
        return (0, parseUtil_1.isAsync)(result) ? result.then((data) => freeze(data)) : freeze(result);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    exports.ZodReadonly = ZodReadonly;
    ZodReadonly.create = (type, params) => {
      return new ZodReadonly({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodReadonly,
        ...processCreateParams(params)
      });
    };
    function cleanParams(params, data) {
      const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
      const p2 = typeof p === "string" ? { message: p } : p;
      return p2;
    }
    function custom(check, _params = {}, fatal) {
      if (check)
        return ZodAny.create().superRefine((data, ctx) => {
          var _a, _b;
          const r = check(data);
          if (r instanceof Promise) {
            return r.then((r2) => {
              var _a2, _b2;
              if (!r2) {
                const params = cleanParams(_params, data);
                const _fatal = (_b2 = (_a2 = params.fatal) !== null && _a2 !== void 0 ? _a2 : fatal) !== null && _b2 !== void 0 ? _b2 : true;
                ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
              }
            });
          }
          if (!r) {
            const params = cleanParams(_params, data);
            const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
            ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
          }
          return;
        });
      return ZodAny.create();
    }
    exports.custom = custom;
    exports.late = {
      object: ZodObject.lazycreate
    };
    var ZodFirstPartyTypeKind;
    (function(ZodFirstPartyTypeKind2) {
      ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
      ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
      ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
      ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
      ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
      ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
      ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
      ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
      ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
      ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
      ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
      ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
      ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
      ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
      ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
      ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
      ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
      ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
      ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
      ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
      ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
      ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
      ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
      ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
      ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
      ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
      ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
      ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
      ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
      ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
      ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
      ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
      ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
      ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
      ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
      ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
    })(ZodFirstPartyTypeKind || (exports.ZodFirstPartyTypeKind = ZodFirstPartyTypeKind = {}));
    var instanceOfType = (cls, params = {
      message: `Input not instance of ${cls.name}`
    }) => custom((data) => data instanceof cls, params);
    exports.instanceof = instanceOfType;
    var stringType = ZodString.create;
    exports.string = stringType;
    var numberType = ZodNumber.create;
    exports.number = numberType;
    var nanType = ZodNaN.create;
    exports.nan = nanType;
    var bigIntType = ZodBigInt.create;
    exports.bigint = bigIntType;
    var booleanType = ZodBoolean.create;
    exports.boolean = booleanType;
    var dateType = ZodDate.create;
    exports.date = dateType;
    var symbolType = ZodSymbol.create;
    exports.symbol = symbolType;
    var undefinedType = ZodUndefined.create;
    exports.undefined = undefinedType;
    var nullType = ZodNull.create;
    exports.null = nullType;
    var anyType = ZodAny.create;
    exports.any = anyType;
    var unknownType = ZodUnknown.create;
    exports.unknown = unknownType;
    var neverType = ZodNever.create;
    exports.never = neverType;
    var voidType = ZodVoid.create;
    exports.void = voidType;
    var arrayType = ZodArray.create;
    exports.array = arrayType;
    var objectType = ZodObject.create;
    exports.object = objectType;
    var strictObjectType = ZodObject.strictCreate;
    exports.strictObject = strictObjectType;
    var unionType = ZodUnion.create;
    exports.union = unionType;
    var discriminatedUnionType = ZodDiscriminatedUnion.create;
    exports.discriminatedUnion = discriminatedUnionType;
    var intersectionType = ZodIntersection.create;
    exports.intersection = intersectionType;
    var tupleType = ZodTuple.create;
    exports.tuple = tupleType;
    var recordType = ZodRecord.create;
    exports.record = recordType;
    var mapType = ZodMap.create;
    exports.map = mapType;
    var setType = ZodSet.create;
    exports.set = setType;
    var functionType = ZodFunction.create;
    exports.function = functionType;
    var lazyType = ZodLazy.create;
    exports.lazy = lazyType;
    var literalType = ZodLiteral.create;
    exports.literal = literalType;
    var enumType = ZodEnum.create;
    exports.enum = enumType;
    var nativeEnumType = ZodNativeEnum.create;
    exports.nativeEnum = nativeEnumType;
    var promiseType = ZodPromise.create;
    exports.promise = promiseType;
    var effectsType = ZodEffects.create;
    exports.effect = effectsType;
    exports.transformer = effectsType;
    var optionalType = ZodOptional.create;
    exports.optional = optionalType;
    var nullableType = ZodNullable.create;
    exports.nullable = nullableType;
    var preprocessType = ZodEffects.createWithPreprocess;
    exports.preprocess = preprocessType;
    var pipelineType = ZodPipeline.create;
    exports.pipeline = pipelineType;
    var ostring = () => stringType().optional();
    exports.ostring = ostring;
    var onumber = () => numberType().optional();
    exports.onumber = onumber;
    var oboolean = () => booleanType().optional();
    exports.oboolean = oboolean;
    exports.coerce = {
      string: (arg) => ZodString.create({ ...arg, coerce: true }),
      number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
      boolean: (arg) => ZodBoolean.create({
        ...arg,
        coerce: true
      }),
      bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
      date: (arg) => ZodDate.create({ ...arg, coerce: true })
    };
    exports.NEVER = parseUtil_1.INVALID;
  }
});

// node_modules/zod/lib/external.js
var require_external = __commonJS({
  "node_modules/zod/lib/external.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_errors(), exports);
    __exportStar(require_parseUtil(), exports);
    __exportStar(require_typeAliases(), exports);
    __exportStar(require_util(), exports);
    __exportStar(require_types(), exports);
    __exportStar(require_ZodError(), exports);
  }
});

// node_modules/zod/lib/index.js
var require_lib = __commonJS({
  "node_modules/zod/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.z = void 0;
    var z = __importStar(require_external());
    exports.z = z;
    __exportStar(require_external(), exports);
    exports.default = z;
  }
});

// node_modules/@mistralai/mistralai/lib/base64.js
var require_base64 = __commonJS({
  "node_modules/@mistralai/mistralai/lib/base64.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.zodInbound = exports.zodOutbound = void 0;
    exports.bytesToBase64 = bytesToBase64;
    exports.bytesFromBase64 = bytesFromBase64;
    exports.stringToBytes = stringToBytes;
    exports.stringFromBytes = stringFromBytes;
    exports.stringToBase64 = stringToBase64;
    exports.stringFromBase64 = stringFromBase64;
    var z = __importStar(require_lib());
    function bytesToBase64(u8arr) {
      return btoa(String.fromCodePoint(...u8arr));
    }
    function bytesFromBase64(encoded) {
      return Uint8Array.from(atob(encoded), (c) => c.charCodeAt(0));
    }
    function stringToBytes(str) {
      return new TextEncoder().encode(str);
    }
    function stringFromBytes(u8arr) {
      return new TextDecoder().decode(u8arr);
    }
    function stringToBase64(str) {
      return bytesToBase64(stringToBytes(str));
    }
    function stringFromBase64(b64str) {
      return stringFromBytes(bytesFromBase64(b64str));
    }
    exports.zodOutbound = z.instanceof(Uint8Array).or(z.string().transform(stringToBytes));
    exports.zodInbound = z.instanceof(Uint8Array).or(z.string().transform(bytesFromBase64));
  }
});

// node_modules/@mistralai/mistralai/lib/is-plain-object.js
var require_is_plain_object = __commonJS({
  "node_modules/@mistralai/mistralai/lib/is-plain-object.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isPlainObject = isPlainObject;
    function isPlainObject(value) {
      if (typeof value !== "object" || value === null) {
        return false;
      }
      const prototype = Object.getPrototypeOf(value);
      return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
    }
  }
});

// node_modules/@mistralai/mistralai/lib/encodings.js
var require_encodings = __commonJS({
  "node_modules/@mistralai/mistralai/lib/encodings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeDeepObjectQuery = exports.encodePipeDelimitedQuery = exports.encodeSpaceDelimitedQuery = exports.encodeFormQuery = exports.encodeJSONQuery = exports.encodeSimple = exports.encodePipeDelimited = exports.encodeSpaceDelimited = exports.encodeForm = exports.EncodingError = void 0;
    exports.encodeMatrix = encodeMatrix;
    exports.encodeLabel = encodeLabel;
    exports.encodeBodyForm = encodeBodyForm;
    exports.encodeDeepObject = encodeDeepObject;
    exports.encodeDeepObjectObject = encodeDeepObjectObject;
    exports.encodeJSON = encodeJSON;
    exports.queryJoin = queryJoin;
    exports.queryEncoder = queryEncoder;
    exports.appendForm = appendForm;
    var base64_js_1 = require_base64();
    var is_plain_object_js_1 = require_is_plain_object();
    var EncodingError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "EncodingError";
      }
    };
    exports.EncodingError = EncodingError;
    function encodeMatrix(key, value, options) {
      let out = "";
      const pairs = (options == null ? void 0 : options.explode) ? explode(key, value) : [[key, value]];
      if (pairs.every(([_, v]) => v == null)) {
        return;
      }
      const encodeString = (v) => {
        return (options == null ? void 0 : options.charEncoding) === "percent" ? encodeURIComponent(v) : v;
      };
      const encodeValue = (v) => encodeString(serializeValue(v));
      pairs.forEach(([pk, pv]) => {
        var _a;
        let tmp = "";
        let encValue = null;
        if (pv == null) {
          return;
        } else if (Array.isArray(pv)) {
          encValue = (_a = mapDefined(pv, (v) => `${encodeValue(v)}`)) == null ? void 0 : _a.join(",");
        } else if ((0, is_plain_object_js_1.isPlainObject)(pv)) {
          const mapped = mapDefinedEntries(Object.entries(pv), ([k, v]) => {
            return `,${encodeString(k)},${encodeValue(v)}`;
          });
          encValue = mapped == null ? void 0 : mapped.join("").slice(1);
        } else {
          encValue = `${encodeValue(pv)}`;
        }
        if (encValue == null) {
          return;
        }
        const keyPrefix = encodeString(pk);
        tmp = `${keyPrefix}=${encValue}`;
        if (tmp === `${keyPrefix}=`) {
          tmp = tmp.slice(0, -1);
        }
        if (!tmp) {
          return;
        }
        out += `;${tmp}`;
      });
      return out;
    }
    function encodeLabel(key, value, options) {
      let out = "";
      const pairs = (options == null ? void 0 : options.explode) ? explode(key, value) : [[key, value]];
      if (pairs.every(([_, v]) => v == null)) {
        return;
      }
      const encodeString = (v) => {
        return (options == null ? void 0 : options.charEncoding) === "percent" ? encodeURIComponent(v) : v;
      };
      const encodeValue = (v) => encodeString(serializeValue(v));
      pairs.forEach(([pk, pv]) => {
        var _a;
        let encValue = "";
        if (pv == null) {
          return;
        } else if (Array.isArray(pv)) {
          encValue = (_a = mapDefined(pv, (v) => `${encodeValue(v)}`)) == null ? void 0 : _a.join(".");
        } else if ((0, is_plain_object_js_1.isPlainObject)(pv)) {
          const mapped = mapDefinedEntries(Object.entries(pv), ([k, v]) => {
            return `.${encodeString(k)}.${encodeValue(v)}`;
          });
          encValue = mapped == null ? void 0 : mapped.join("").slice(1);
        } else {
          const k = (options == null ? void 0 : options.explode) && (0, is_plain_object_js_1.isPlainObject)(value) ? `${encodeString(pk)}=` : "";
          encValue = `${k}${encodeValue(pv)}`;
        }
        out += encValue == null ? "" : `.${encValue}`;
      });
      return out;
    }
    function formEncoder(sep) {
      return (key, value, options) => {
        let out = "";
        const pairs = (options == null ? void 0 : options.explode) ? explode(key, value) : [[key, value]];
        if (pairs.every(([_, v]) => v == null)) {
          return;
        }
        const encodeString = (v) => {
          return (options == null ? void 0 : options.charEncoding) === "percent" ? encodeURIComponent(v) : v;
        };
        const encodeValue = (v) => encodeString(serializeValue(v));
        const encodedSep = encodeString(sep);
        pairs.forEach(([pk, pv]) => {
          var _a, _b;
          let tmp = "";
          let encValue = null;
          if (pv == null) {
            return;
          } else if (Array.isArray(pv)) {
            encValue = (_a = mapDefined(pv, (v) => `${encodeValue(v)}`)) == null ? void 0 : _a.join(encodedSep);
          } else if ((0, is_plain_object_js_1.isPlainObject)(pv)) {
            encValue = (_b = mapDefinedEntries(Object.entries(pv), ([k, v]) => {
              return `${encodeString(k)}${encodedSep}${encodeValue(v)}`;
            })) == null ? void 0 : _b.join(encodedSep);
          } else {
            encValue = `${encodeValue(pv)}`;
          }
          if (encValue == null) {
            return;
          }
          tmp = `${encodeString(pk)}=${encValue}`;
          if (!tmp || tmp === "=") {
            return;
          }
          out += `&${tmp}`;
        });
        return out.slice(1);
      };
    }
    exports.encodeForm = formEncoder(",");
    exports.encodeSpaceDelimited = formEncoder(" ");
    exports.encodePipeDelimited = formEncoder("|");
    function encodeBodyForm(key, value, options) {
      let out = "";
      const pairs = (options == null ? void 0 : options.explode) ? explode(key, value) : [[key, value]];
      const encodeString = (v) => {
        return (options == null ? void 0 : options.charEncoding) === "percent" ? encodeURIComponent(v) : v;
      };
      const encodeValue = (v) => encodeString(serializeValue(v));
      pairs.forEach(([pk, pv]) => {
        let tmp = "";
        let encValue = "";
        if (pv == null) {
          return;
        } else if (Array.isArray(pv)) {
          encValue = JSON.stringify(pv, jsonReplacer);
        } else if ((0, is_plain_object_js_1.isPlainObject)(pv)) {
          encValue = JSON.stringify(pv, jsonReplacer);
        } else {
          encValue = `${encodeValue(pv)}`;
        }
        tmp = `${encodeString(pk)}=${encValue}`;
        if (!tmp || tmp === "=") {
          return;
        }
        out += `&${tmp}`;
      });
      return out.slice(1);
    }
    function encodeDeepObject(key, value, options) {
      if (value == null) {
        return;
      }
      if (!(0, is_plain_object_js_1.isPlainObject)(value)) {
        throw new EncodingError(`Value of parameter '${key}' which uses deepObject encoding must be an object or null`);
      }
      return encodeDeepObjectObject(key, value, options);
    }
    function encodeDeepObjectObject(key, value, options) {
      if (value == null) {
        return;
      }
      let out = "";
      const encodeString = (v) => {
        return (options == null ? void 0 : options.charEncoding) === "percent" ? encodeURIComponent(v) : v;
      };
      if (!(0, is_plain_object_js_1.isPlainObject)(value)) {
        throw new EncodingError(`Expected parameter '${key}' to be an object.`);
      }
      Object.entries(value).forEach(([ck, cv]) => {
        var _a;
        if (cv == null) {
          return;
        }
        const pk = `${key}[${ck}]`;
        if ((0, is_plain_object_js_1.isPlainObject)(cv)) {
          const objOut = encodeDeepObjectObject(pk, cv, options);
          out += objOut == null ? "" : `&${objOut}`;
          return;
        }
        const pairs = Array.isArray(cv) ? cv : [cv];
        const encoded = (_a = mapDefined(pairs, (v) => {
          return `${encodeString(pk)}=${encodeString(serializeValue(v))}`;
        })) == null ? void 0 : _a.join("&");
        out += encoded == null ? "" : `&${encoded}`;
      });
      return out.slice(1);
    }
    function encodeJSON(key, value, options) {
      if (typeof value === "undefined") {
        return;
      }
      const encodeString = (v) => {
        return (options == null ? void 0 : options.charEncoding) === "percent" ? encodeURIComponent(v) : v;
      };
      const encVal = encodeString(JSON.stringify(value, jsonReplacer));
      return (options == null ? void 0 : options.explode) ? encVal : `${encodeString(key)}=${encVal}`;
    }
    var encodeSimple = (key, value, options) => {
      let out = "";
      const pairs = (options == null ? void 0 : options.explode) ? explode(key, value) : [[key, value]];
      if (pairs.every(([_, v]) => v == null)) {
        return;
      }
      const encodeString = (v) => {
        return (options == null ? void 0 : options.charEncoding) === "percent" ? encodeURIComponent(v) : v;
      };
      const encodeValue = (v) => encodeString(serializeValue(v));
      pairs.forEach(([pk, pv]) => {
        var _a;
        let tmp = "";
        if (pv == null) {
          return;
        } else if (Array.isArray(pv)) {
          tmp = (_a = mapDefined(pv, (v) => `${encodeValue(v)}`)) == null ? void 0 : _a.join(",");
        } else if ((0, is_plain_object_js_1.isPlainObject)(pv)) {
          const mapped = mapDefinedEntries(Object.entries(pv), ([k, v]) => {
            return `,${encodeString(k)},${encodeValue(v)}`;
          });
          tmp = mapped == null ? void 0 : mapped.join("").slice(1);
        } else {
          const k = (options == null ? void 0 : options.explode) && (0, is_plain_object_js_1.isPlainObject)(value) ? `${pk}=` : "";
          tmp = `${k}${encodeValue(pv)}`;
        }
        out += tmp ? `,${tmp}` : "";
      });
      return out.slice(1);
    };
    exports.encodeSimple = encodeSimple;
    function explode(key, value) {
      if (Array.isArray(value)) {
        return value.map((v) => [key, v]);
      } else if ((0, is_plain_object_js_1.isPlainObject)(value)) {
        const o = value != null ? value : {};
        return Object.entries(o).map(([k, v]) => [k, v]);
      } else {
        return [[key, value]];
      }
    }
    function serializeValue(value) {
      if (value == null) {
        return "";
      } else if (value instanceof Date) {
        return value.toISOString();
      } else if (value instanceof Uint8Array) {
        return (0, base64_js_1.bytesToBase64)(value);
      } else if (typeof value === "object") {
        return JSON.stringify(value, jsonReplacer);
      }
      return `${value}`;
    }
    function jsonReplacer(_, value) {
      if (value instanceof Uint8Array) {
        return (0, base64_js_1.bytesToBase64)(value);
      } else {
        return value;
      }
    }
    function mapDefined(inp, mapper) {
      const res = inp.reduce((acc, v) => {
        if (v == null) {
          return acc;
        }
        const m = mapper(v);
        if (m == null) {
          return acc;
        }
        acc.push(m);
        return acc;
      }, []);
      return res.length ? res : null;
    }
    function mapDefinedEntries(inp, mapper) {
      const acc = [];
      for (const [k, v] of inp) {
        if (v == null) {
          continue;
        }
        const m = mapper([k, v]);
        if (m == null) {
          continue;
        }
        acc.push(m);
      }
      return acc.length ? acc : null;
    }
    function queryJoin(...args) {
      return args.filter(Boolean).join("&");
    }
    function queryEncoder(f) {
      const bulkEncode = function(values, options) {
        var _a, _b;
        const opts = {
          ...options,
          explode: (_a = options == null ? void 0 : options.explode) != null ? _a : true,
          charEncoding: (_b = options == null ? void 0 : options.charEncoding) != null ? _b : "percent"
        };
        const encoded = Object.entries(values).map(([key, value]) => {
          return f(key, value, opts);
        });
        return queryJoin(...encoded);
      };
      return bulkEncode;
    }
    exports.encodeJSONQuery = queryEncoder(encodeJSON);
    exports.encodeFormQuery = queryEncoder(exports.encodeForm);
    exports.encodeSpaceDelimitedQuery = queryEncoder(exports.encodeSpaceDelimited);
    exports.encodePipeDelimitedQuery = queryEncoder(exports.encodePipeDelimited);
    exports.encodeDeepObjectQuery = queryEncoder(encodeDeepObject);
    function appendForm(fd, key, value, fileName) {
      if (value == null) {
        return;
      } else if (value instanceof Blob && fileName) {
        fd.append(key, value, fileName);
      } else if (value instanceof Blob) {
        fd.append(key, value);
      } else {
        fd.append(key, String(value));
      }
    }
  }
});

// node_modules/@mistralai/mistralai/lib/dlv.js
var require_dlv = __commonJS({
  "node_modules/@mistralai/mistralai/lib/dlv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dlv = dlv;
    function dlv(obj, key, def, p, undef) {
      key = Array.isArray(key) ? key : key.split(".");
      for (p = 0; p < key.length; p++) {
        const k = key[p];
        obj = k != null && obj ? obj[k] : undef;
      }
      return obj === undef ? def : obj;
    }
  }
});

// node_modules/@mistralai/mistralai/lib/env.js
var require_env = __commonJS({
  "node_modules/@mistralai/mistralai/lib/env.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.envSchema = void 0;
    exports.env = env;
    exports.resetEnv = resetEnv;
    var dlv_js_1 = require_dlv();
    var z = __importStar(require_lib());
    exports.envSchema = z.object({
      MISTRAL_API_KEY: z.string().optional(),
      MISTRAL_DEBUG: z.coerce.boolean().optional()
    });
    var envMemo = void 0;
    function env() {
      var _a, _b;
      if (envMemo) {
        return envMemo;
      }
      envMemo = exports.envSchema.parse((_b = (_a = (0, dlv_js_1.dlv)(globalThis, "process.env")) != null ? _a : (0, dlv_js_1.dlv)(globalThis, "Deno.env")) != null ? _b : {});
      return envMemo;
    }
    function resetEnv() {
      envMemo = void 0;
    }
  }
});

// node_modules/@mistralai/mistralai/lib/http.js
var require_http = __commonJS({
  "node_modules/@mistralai/mistralai/lib/http.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HTTPClient = void 0;
    exports.matchContentType = matchContentType;
    exports.matchStatusCode = matchStatusCode;
    exports.matchResponse = matchResponse;
    exports.isConnectionError = isConnectionError;
    exports.isTimeoutError = isTimeoutError;
    exports.isAbortError = isAbortError;
    var DEFAULT_FETCHER = (input, init) => {
      if (init == null) {
        return fetch(input);
      } else {
        return fetch(input, init);
      }
    };
    var HTTPClient = class {
      constructor(options = {}) {
        this.options = options;
        this.requestHooks = [];
        this.requestErrorHooks = [];
        this.responseHooks = [];
        this.fetcher = options.fetcher || DEFAULT_FETCHER;
      }
      async request(request) {
        let req = request;
        for (const hook of this.requestHooks) {
          const nextRequest = await hook(req);
          if (nextRequest) {
            req = nextRequest;
          }
        }
        try {
          const res = await this.fetcher(req);
          for (const hook of this.responseHooks) {
            await hook(res, req);
          }
          return res;
        } catch (err) {
          for (const hook of this.requestErrorHooks) {
            await hook(err, req);
          }
          throw err;
        }
      }
      addHook(...args) {
        if (args[0] === "beforeRequest") {
          this.requestHooks.push(args[1]);
        } else if (args[0] === "requestError") {
          this.requestErrorHooks.push(args[1]);
        } else if (args[0] === "response") {
          this.responseHooks.push(args[1]);
        } else {
          throw new Error(`Invalid hook type: ${args[0]}`);
        }
        return this;
      }
      removeHook(...args) {
        let target;
        if (args[0] === "beforeRequest") {
          target = this.requestHooks;
        } else if (args[0] === "requestError") {
          target = this.requestErrorHooks;
        } else if (args[0] === "response") {
          target = this.responseHooks;
        } else {
          throw new Error(`Invalid hook type: ${args[0]}`);
        }
        const index = target.findIndex((v) => v === args[1]);
        if (index >= 0) {
          target.splice(index, 1);
        }
        return this;
      }
      clone() {
        const child = new HTTPClient(this.options);
        child.requestHooks = this.requestHooks.slice();
        child.requestErrorHooks = this.requestErrorHooks.slice();
        child.responseHooks = this.responseHooks.slice();
        return child;
      }
    };
    exports.HTTPClient = HTTPClient;
    var mediaParamSeparator = /\s*;\s*/g;
    function matchContentType(response, pattern) {
      var _a;
      if (pattern === "*") {
        return true;
      }
      let contentType = ((_a = response.headers.get("content-type")) == null ? void 0 : _a.trim()) || "application/octet-stream";
      contentType = contentType.toLowerCase();
      const wantParts = pattern.toLowerCase().trim().split(mediaParamSeparator);
      const [wantType = "", ...wantParams] = wantParts;
      if (wantType.split("/").length !== 2) {
        return false;
      }
      const gotParts = contentType.split(mediaParamSeparator);
      const [gotType = "", ...gotParams] = gotParts;
      const [type = "", subtype = ""] = gotType.split("/");
      if (!type || !subtype) {
        return false;
      }
      if (wantType !== "*/*" && gotType !== wantType && `${type}/*` !== wantType && `*/${subtype}` !== wantType) {
        return false;
      }
      if (gotParams.length < wantParams.length) {
        return false;
      }
      const params = new Set(gotParams);
      for (const wantParam of wantParams) {
        if (!params.has(wantParam)) {
          return false;
        }
      }
      return true;
    }
    var codeRangeRE = new RegExp("^[0-9]xx$", "i");
    function matchStatusCode(response, codes) {
      const actual = `${response.status}`;
      const expectedCodes = Array.isArray(codes) ? codes : [codes];
      if (!expectedCodes.length) {
        return false;
      }
      return expectedCodes.some((ec) => {
        const code = `${ec}`;
        if (code === "default") {
          return true;
        }
        if (!codeRangeRE.test(`${code}`)) {
          return code === actual;
        }
        const expectFamily = code.charAt(0);
        if (!expectFamily) {
          throw new Error("Invalid status code range");
        }
        const actualFamily = actual.charAt(0);
        if (!actualFamily) {
          throw new Error(`Invalid response status code: ${actual}`);
        }
        return actualFamily === expectFamily;
      });
    }
    function matchResponse(response, code, contentTypePattern) {
      return matchStatusCode(response, code) && matchContentType(response, contentTypePattern);
    }
    function isConnectionError(err) {
      if (typeof err !== "object" || err == null) {
        return false;
      }
      const isBrowserErr = err instanceof TypeError && err.message.toLowerCase().startsWith("failed to fetch");
      const isNodeErr = err instanceof TypeError && err.message.toLowerCase().startsWith("fetch failed");
      const isBunErr = "name" in err && err.name === "ConnectionError";
      const isGenericErr = "code" in err && typeof err.code === "string" && err.code.toLowerCase() === "econnreset";
      return isBrowserErr || isNodeErr || isGenericErr || isBunErr;
    }
    function isTimeoutError(err) {
      if (typeof err !== "object" || err == null) {
        return false;
      }
      const isNative = "name" in err && err.name === "TimeoutError";
      const isLegacyNative = "code" in err && err.code === 23;
      const isGenericErr = "code" in err && typeof err.code === "string" && err.code.toLowerCase() === "econnaborted";
      return isNative || isLegacyNative || isGenericErr;
    }
    function isAbortError(err) {
      if (typeof err !== "object" || err == null) {
        return false;
      }
      const isNative = "name" in err && err.name === "AbortError";
      const isLegacyNative = "code" in err && err.code === 20;
      const isGenericErr = "code" in err && typeof err.code === "string" && err.code.toLowerCase() === "econnaborted";
      return isNative || isLegacyNative || isGenericErr;
    }
  }
});

// node_modules/@mistralai/mistralai/lib/retries.js
var require_retries = __commonJS({
  "node_modules/@mistralai/mistralai/lib/retries.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TemporaryError = exports.PermanentError = void 0;
    exports.retry = retry;
    var http_js_1 = require_http();
    var defaultBackoff = {
      initialInterval: 500,
      maxInterval: 6e4,
      exponent: 1.5,
      maxElapsedTime: 36e5
    };
    var PermanentError = class extends Error {
      constructor(message, options) {
        let msg = message;
        if (options == null ? void 0 : options.cause) {
          msg += `: ${options.cause}`;
        }
        super(msg, options);
        this.name = "PermanentError";
        if (typeof this.cause === "undefined") {
          this.cause = options == null ? void 0 : options.cause;
        }
        Object.setPrototypeOf(this, PermanentError.prototype);
      }
    };
    exports.PermanentError = PermanentError;
    var TemporaryError = class extends Error {
      constructor(message, response) {
        super(message);
        this.response = response;
        this.name = "TemporaryError";
        Object.setPrototypeOf(this, TemporaryError.prototype);
      }
    };
    exports.TemporaryError = TemporaryError;
    async function retry(fetchFn, options) {
      var _a;
      switch (options.config.strategy) {
        case "backoff":
          return retryBackoff(wrapFetcher(fetchFn, {
            statusCodes: options.statusCodes,
            retryConnectionErrors: !!options.config.retryConnectionErrors
          }), (_a = options.config.backoff) != null ? _a : defaultBackoff);
        default:
          return await fetchFn();
      }
    }
    function wrapFetcher(fn, options) {
      return async () => {
        try {
          const res = await fn();
          if (isRetryableResponse(res, options.statusCodes)) {
            throw new TemporaryError("Response failed with retryable status code", res);
          }
          return res;
        } catch (err) {
          if (err instanceof TemporaryError) {
            throw err;
          }
          if (options.retryConnectionErrors && ((0, http_js_1.isTimeoutError)(err) || (0, http_js_1.isConnectionError)(err))) {
            throw err;
          }
          throw new PermanentError("Permanent error", { cause: err });
        }
      };
    }
    var codeRangeRE = new RegExp("^[0-9]xx$", "i");
    function isRetryableResponse(res, statusCodes) {
      const actual = `${res.status}`;
      return statusCodes.some((code) => {
        if (!codeRangeRE.test(code)) {
          return code === actual;
        }
        const expectFamily = code.charAt(0);
        if (!expectFamily) {
          throw new Error("Invalid status code range");
        }
        const actualFamily = actual.charAt(0);
        if (!actualFamily) {
          throw new Error(`Invalid response status code: ${actual}`);
        }
        return actualFamily === expectFamily;
      });
    }
    async function retryBackoff(fn, strategy) {
      const { maxElapsedTime, initialInterval, exponent, maxInterval } = strategy;
      const start = Date.now();
      let x = 0;
      while (true) {
        try {
          const res = await fn();
          return res;
        } catch (err) {
          if (err instanceof PermanentError) {
            throw err.cause;
          }
          const elapsed = Date.now() - start;
          if (elapsed > maxElapsedTime) {
            if (err instanceof TemporaryError) {
              return err.response;
            }
            throw err;
          }
          let retryInterval = 0;
          if (err instanceof TemporaryError) {
            retryInterval = retryIntervalFromResponse(err.response);
          }
          if (retryInterval <= 0) {
            retryInterval = initialInterval * Math.pow(x, exponent) + Math.random() * 1e3;
          }
          const d = Math.min(retryInterval, maxInterval);
          await delay(d);
          x++;
        }
      }
    }
    function retryIntervalFromResponse(res) {
      const retryVal = res.headers.get("retry-after") || "";
      if (!retryVal) {
        return 0;
      }
      const parsedNumber = Number(retryVal);
      if (Number.isInteger(parsedNumber)) {
        return parsedNumber * 1e3;
      }
      const parsedDate = Date.parse(retryVal);
      if (Number.isInteger(parsedDate)) {
        const deltaMS = parsedDate - Date.now();
        return deltaMS > 0 ? Math.ceil(deltaMS) : 0;
      }
      return 0;
    }
    async function delay(delay2) {
      return new Promise((resolve) => setTimeout(resolve, delay2));
    }
  }
});

// node_modules/@mistralai/mistralai/lib/sdks.js
var require_sdks = __commonJS({
  "node_modules/@mistralai/mistralai/lib/sdks.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _ClientSDK_httpClient;
    var _ClientSDK_hooks;
    var _ClientSDK_logger;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClientSDK = void 0;
    var hooks_js_1 = require_hooks();
    var httpclienterrors_js_1 = require_httpclienterrors();
    var fp_js_1 = require_fp();
    var base64_js_1 = require_base64();
    var config_js_1 = require_config();
    var encodings_js_1 = require_encodings();
    var env_js_1 = require_env();
    var http_js_1 = require_http();
    var retries_js_1 = require_retries();
    var gt = typeof globalThis === "undefined" ? null : globalThis;
    var webWorkerLike = typeof gt === "object" && gt != null && "importScripts" in gt && typeof gt["importScripts"] === "function";
    var isBrowserLike = webWorkerLike || typeof navigator !== "undefined" && "serviceWorker" in navigator || typeof window === "object" && typeof window.document !== "undefined";
    var ClientSDK = class {
      constructor(options = {}) {
        _ClientSDK_httpClient.set(this, void 0);
        _ClientSDK_hooks.set(this, void 0);
        _ClientSDK_logger.set(this, void 0);
        const opt = options;
        if (typeof opt === "object" && opt != null && "hooks" in opt && opt.hooks instanceof hooks_js_1.SDKHooks) {
          __classPrivateFieldSet(this, _ClientSDK_hooks, opt.hooks, "f");
        } else {
          __classPrivateFieldSet(this, _ClientSDK_hooks, new hooks_js_1.SDKHooks(), "f");
        }
        this._options = { ...options, hooks: __classPrivateFieldGet(this, _ClientSDK_hooks, "f") };
        const url = (0, config_js_1.serverURLFromOptions)(options);
        if (url) {
          url.pathname = url.pathname.replace(/\/+$/, "") + "/";
        }
        const { baseURL, client } = __classPrivateFieldGet(this, _ClientSDK_hooks, "f").sdkInit({
          baseURL: url,
          client: options.httpClient || new http_js_1.HTTPClient()
        });
        this._baseURL = baseURL;
        __classPrivateFieldSet(this, _ClientSDK_httpClient, client, "f");
        __classPrivateFieldSet(this, _ClientSDK_logger, options.debugLogger, "f");
        if (!__classPrivateFieldGet(this, _ClientSDK_logger, "f") && (0, env_js_1.env)().MISTRAL_DEBUG) {
          __classPrivateFieldSet(this, _ClientSDK_logger, console, "f");
        }
      }
      _createRequest(context, conf, options) {
        var _a, _b, _c, _d;
        const { method, path, query, headers: opHeaders, security } = conf;
        const base = (_a = conf.baseURL) != null ? _a : this._baseURL;
        if (!base) {
          return (0, fp_js_1.ERR)(new httpclienterrors_js_1.InvalidRequestError("No base URL provided for operation"));
        }
        const reqURL = new URL(base);
        const inputURL = new URL(path, reqURL);
        if (path) {
          reqURL.pathname += reqURL.pathname.endsWith("/") ? "" : "/";
          reqURL.pathname += inputURL.pathname.replace(/^\/+/, "");
        }
        let finalQuery = query || "";
        const secQuery = [];
        for (const [k, v] of Object.entries((security == null ? void 0 : security.queryParams) || {})) {
          const q = (0, encodings_js_1.encodeForm)(k, v, { charEncoding: "percent" });
          if (typeof q !== "undefined") {
            secQuery.push(q);
          }
        }
        if (secQuery.length) {
          finalQuery += `&${secQuery.join("&")}`;
        }
        if (finalQuery) {
          const q = finalQuery.startsWith("&") ? finalQuery.slice(1) : finalQuery;
          reqURL.search = `?${q}`;
        }
        const headers = new Headers(opHeaders);
        const username = security == null ? void 0 : security.basic.username;
        const password = security == null ? void 0 : security.basic.password;
        if (username != null || password != null) {
          const encoded = (0, base64_js_1.stringToBase64)([username || "", password || ""].join(":"));
          headers.set("Authorization", `Basic ${encoded}`);
        }
        const securityHeaders = new Headers((security == null ? void 0 : security.headers) || {});
        for (const [k, v] of securityHeaders) {
          headers.set(k, v);
        }
        let cookie = headers.get("cookie") || "";
        for (const [k, v] of Object.entries((security == null ? void 0 : security.cookies) || {})) {
          cookie += `; ${k}=${v}`;
        }
        cookie = cookie.startsWith("; ") ? cookie.slice(2) : cookie;
        headers.set("cookie", cookie);
        const userHeaders = new Headers((_b = options == null ? void 0 : options.fetchOptions) == null ? void 0 : _b.headers);
        for (const [k, v] of userHeaders) {
          headers.set(k, v);
        }
        if (!isBrowserLike) {
          headers.set((_c = conf.uaHeader) != null ? _c : "user-agent", config_js_1.SDK_METADATA.userAgent);
        }
        let fetchOptions = options == null ? void 0 : options.fetchOptions;
        if (!(fetchOptions == null ? void 0 : fetchOptions.signal) && conf.timeoutMs && conf.timeoutMs > 0) {
          const timeoutSignal = AbortSignal.timeout(conf.timeoutMs);
          if (!fetchOptions) {
            fetchOptions = { signal: timeoutSignal };
          } else {
            fetchOptions.signal = timeoutSignal;
          }
        }
        if (conf.body instanceof ReadableStream) {
          if (!fetchOptions) {
            fetchOptions = {};
          }
          Object.assign(fetchOptions, { duplex: "half" });
        }
        let input;
        try {
          input = __classPrivateFieldGet(this, _ClientSDK_hooks, "f").beforeCreateRequest(context, {
            url: reqURL,
            options: {
              ...fetchOptions,
              body: (_d = conf.body) != null ? _d : null,
              headers,
              method
            }
          });
        } catch (err) {
          return (0, fp_js_1.ERR)(new httpclienterrors_js_1.UnexpectedClientError("Create request hook failed to execute", {
            cause: err
          }));
        }
        return (0, fp_js_1.OK)(new Request(input.url, input.options));
      }
      async _do(request, options) {
        const { context, errorCodes } = options;
        return (0, retries_js_1.retry)(async () => {
          const req = await __classPrivateFieldGet(this, _ClientSDK_hooks, "f").beforeRequest(context, request.clone());
          await logRequest(__classPrivateFieldGet(this, _ClientSDK_logger, "f"), req).catch((e) => {
            var _a;
            return (_a = __classPrivateFieldGet(this, _ClientSDK_logger, "f")) == null ? void 0 : _a.log("Failed to log request:", e);
          });
          let response = await __classPrivateFieldGet(this, _ClientSDK_httpClient, "f").request(req);
          try {
            if ((0, http_js_1.matchStatusCode)(response, errorCodes)) {
              const result = await __classPrivateFieldGet(this, _ClientSDK_hooks, "f").afterError(context, response, null);
              if (result.error) {
                throw result.error;
              }
              response = result.response || response;
            } else {
              response = await __classPrivateFieldGet(this, _ClientSDK_hooks, "f").afterSuccess(context, response);
            }
          } finally {
            await logResponse(__classPrivateFieldGet(this, _ClientSDK_logger, "f"), response, req).catch((e) => {
              var _a;
              return (_a = __classPrivateFieldGet(this, _ClientSDK_logger, "f")) == null ? void 0 : _a.log("Failed to log response:", e);
            });
          }
          return response;
        }, { config: options.retryConfig, statusCodes: options.retryCodes }).then((r) => (0, fp_js_1.OK)(r), (err) => {
          switch (true) {
            case (0, http_js_1.isAbortError)(err):
              return (0, fp_js_1.ERR)(new httpclienterrors_js_1.RequestAbortedError("Request aborted by client", {
                cause: err
              }));
            case (0, http_js_1.isTimeoutError)(err):
              return (0, fp_js_1.ERR)(new httpclienterrors_js_1.RequestTimeoutError("Request timed out", { cause: err }));
            case (0, http_js_1.isConnectionError)(err):
              return (0, fp_js_1.ERR)(new httpclienterrors_js_1.ConnectionError("Unable to make request", { cause: err }));
            default:
              return (0, fp_js_1.ERR)(new httpclienterrors_js_1.UnexpectedClientError("Unexpected HTTP client error", {
                cause: err
              }));
          }
        });
      }
    };
    exports.ClientSDK = ClientSDK;
    _ClientSDK_httpClient = /* @__PURE__ */ new WeakMap(), _ClientSDK_hooks = /* @__PURE__ */ new WeakMap(), _ClientSDK_logger = /* @__PURE__ */ new WeakMap();
    var jsonLikeContentTypeRE = /^application\/(?:.{0,100}\+)?json/;
    async function logRequest(logger, req) {
      if (!logger) {
        return;
      }
      const contentType = req.headers.get("content-type");
      const ct = (contentType == null ? void 0 : contentType.split(";")[0]) || "";
      logger.group(`> Request: ${req.method} ${req.url}`);
      logger.group("Headers:");
      for (const [k, v] of req.headers.entries()) {
        logger.log(`${k}: ${v}`);
      }
      logger.groupEnd();
      logger.group("Body:");
      switch (true) {
        case jsonLikeContentTypeRE.test(ct):
          logger.log(await req.clone().json());
          break;
        case ct.startsWith("text/"):
          logger.log(await req.clone().text());
          break;
        case ct === "multipart/form-data": {
          const body = await req.clone().formData();
          for (const [k, v] of body) {
            const vlabel = v instanceof Blob ? "<Blob>" : v;
            logger.log(`${k}: ${vlabel}`);
          }
          break;
        }
        default:
          logger.log(`<${contentType}>`);
          break;
      }
      logger.groupEnd();
      logger.groupEnd();
    }
    async function logResponse(logger, res, req) {
      if (!logger) {
        return;
      }
      const contentType = res.headers.get("content-type");
      const ct = (contentType == null ? void 0 : contentType.split(";")[0]) || "";
      logger.group(`< Response: ${req.method} ${req.url}`);
      logger.log("Status Code:", res.status, res.statusText);
      logger.group("Headers:");
      for (const [k, v] of res.headers.entries()) {
        logger.log(`${k}: ${v}`);
      }
      logger.groupEnd();
      logger.group("Body:");
      switch (true) {
        case ((0, http_js_1.matchContentType)(res, "application/json") || jsonLikeContentTypeRE.test(ct)):
          logger.log(await res.clone().json());
          break;
        case (0, http_js_1.matchContentType)(res, "text/event-stream"):
          logger.log(`<${contentType}>`);
          break;
        case (0, http_js_1.matchContentType)(res, "text/*"):
          logger.log(await res.clone().text());
          break;
        case (0, http_js_1.matchContentType)(res, "multipart/form-data"): {
          const body = await res.clone().formData();
          for (const [k, v] of body) {
            const vlabel = v instanceof Blob ? "<Blob>" : v;
            logger.log(`${k}: ${vlabel}`);
          }
          break;
        }
        default:
          logger.log(`<${contentType}>`);
          break;
      }
      logger.groupEnd();
      logger.groupEnd();
    }
  }
});

// node_modules/@mistralai/mistralai/models/errors/sdkerror.js
var require_sdkerror = __commonJS({
  "node_modules/@mistralai/mistralai/models/errors/sdkerror.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SDKError = void 0;
    var SDKError = class extends Error {
      constructor(message, rawResponse, body = "") {
        const statusCode = rawResponse.status;
        const contentType = rawResponse.headers.get("content-type") || "";
        const bodyString = body.length > 0 ? `
${body}` : "";
        super(`${message}: Status ${statusCode} Content-Type ${contentType} Body ${bodyString}`);
        this.rawResponse = rawResponse;
        this.body = body;
        this.statusCode = statusCode;
        this.contentType = contentType;
        this.name = "SDKError";
      }
    };
    exports.SDKError = SDKError;
  }
});

// node_modules/@mistralai/mistralai/lib/event-streams.js
var require_event_streams = __commonJS({
  "node_modules/@mistralai/mistralai/lib/event-streams.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventStream = void 0;
    exports.discardSentinel = discardSentinel;
    var LF = 10;
    var CR = 13;
    var NEWLINE_CHARS = /* @__PURE__ */ new Set([LF, CR]);
    var MESSAGE_BOUNDARIES = [
      new Uint8Array([CR, LF, CR, LF]),
      new Uint8Array([CR, CR]),
      new Uint8Array([LF, LF])
    ];
    var EventStream = class {
      constructor(init) {
        this.stream = init.stream;
        this.decoder = init.decoder;
      }
      async *[Symbol.asyncIterator]() {
        const reader = this.stream.getReader();
        let buffer = new Uint8Array([]);
        let position = 0;
        try {
          while (true) {
            const { done, value } = await reader.read();
            if (done) {
              break;
            }
            const newBuffer = new Uint8Array(buffer.length + value.length);
            newBuffer.set(buffer);
            newBuffer.set(value, buffer.length);
            buffer = newBuffer;
            for (let i = position; i < buffer.length; i++) {
              const boundary = findBoundary(buffer, i);
              if (boundary == null) {
                continue;
              }
              const chunk = buffer.slice(position, i);
              position = i + boundary.length;
              const event = parseEvent(chunk, this.decoder);
              if (event != null) {
                yield event;
              }
            }
            if (position > 0) {
              buffer = buffer.slice(position);
              position = 0;
            }
          }
          if (buffer.length > 0) {
            const event = parseEvent(buffer, this.decoder);
            if (event != null) {
              yield event;
            }
          }
        } catch (e) {
          if (e instanceof Error && e.name === "AbortError") {
            return;
          }
          throw e;
        } finally {
          reader.releaseLock();
        }
      }
    };
    exports.EventStream = EventStream;
    function findBoundary(buffer, start) {
      const char1 = buffer[start];
      const char2 = buffer[start + 1];
      if (char1 == null || char2 == null || !NEWLINE_CHARS.has(char1) || !NEWLINE_CHARS.has(char2)) {
        return null;
      }
      for (const s of MESSAGE_BOUNDARIES) {
        const seq = peekSequence(start, buffer, s);
        if (seq != null) {
          return seq;
        }
      }
      return null;
    }
    function peekSequence(position, buffer, sequence) {
      if (sequence.length > buffer.length - position) {
        return null;
      }
      for (let i = 0; i < sequence.length; i++) {
        if (buffer[position + i] !== sequence[i]) {
          return null;
        }
      }
      return sequence;
    }
    function parseEvent(chunk, decoder) {
      var _a;
      if (!chunk.length) {
        return null;
      }
      const td = new TextDecoder();
      const raw = td.decode(chunk);
      const lines = raw.split(/\r?\n|\r/g);
      let publish = false;
      const rawEvent = {};
      for (const line of lines) {
        if (!line) {
          continue;
        }
        const delim = line.indexOf(":");
        if (delim === 0) {
          continue;
        }
        const field = delim > 0 ? line.substring(0, delim) : "";
        let value = delim > 0 ? line.substring(delim + 1) : "";
        if (value.charAt(0) === " ") {
          value = value.substring(1);
        }
        switch (field) {
          case "event": {
            publish = true;
            rawEvent.event = value;
            break;
          }
          case "data": {
            publish = true;
            (_a = rawEvent.data) != null ? _a : rawEvent.data = "";
            rawEvent.data += value + "\n";
            break;
          }
          case "id": {
            publish = true;
            rawEvent.id = value;
            break;
          }
          case "retry": {
            const r = parseInt(value, 10);
            if (!Number.isNaN(r)) {
              publish = true;
              rawEvent.retry = r;
            }
            break;
          }
        }
      }
      if (!publish) {
        return null;
      }
      if (rawEvent.data != null) {
        rawEvent.data = rawEvent.data.slice(0, -1);
      }
      return decoder(rawEvent);
    }
    function discardSentinel(stream, sentinel) {
      return new ReadableStream({
        async start(controller) {
          let buffer = new Uint8Array([]);
          let position = 0;
          let done = false;
          let discard = false;
          const rdr = stream.getReader();
          try {
            while (!done) {
              const result = await rdr.read();
              const value = result.value;
              done = done || result.done;
              if (discard) {
                continue;
              }
              if (typeof value === "undefined") {
                continue;
              }
              const newBuffer = new Uint8Array(buffer.length + value.length);
              newBuffer.set(buffer);
              newBuffer.set(value, buffer.length);
              buffer = newBuffer;
              for (let i = position; i < buffer.length; i++) {
                const boundary = findBoundary(buffer, i);
                if (boundary == null) {
                  continue;
                }
                const start = position;
                const chunk = buffer.slice(start, i);
                position = i + boundary.length;
                const event = parseEvent(chunk, id);
                if ((event == null ? void 0 : event.data) === sentinel) {
                  controller.enqueue(buffer.slice(0, start));
                  discard = true;
                } else {
                  controller.enqueue(buffer.slice(0, position));
                  buffer = buffer.slice(position);
                  position = 0;
                }
              }
            }
          } catch (e) {
            controller.error(e);
          } finally {
            controller.close();
            rdr.releaseLock();
          }
        }
      });
    }
    function id(v) {
      return v;
    }
  }
});

// node_modules/@mistralai/mistralai/models/errors/sdkvalidationerror.js
var require_sdkvalidationerror = __commonJS({
  "node_modules/@mistralai/mistralai/models/errors/sdkvalidationerror.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SDKValidationError = void 0;
    exports.formatZodError = formatZodError;
    var z = __importStar(require_lib());
    var SDKValidationError = class extends Error {
      constructor(message, cause, rawValue) {
        super(`${message}: ${cause}`);
        this.name = "SDKValidationError";
        this.cause = cause;
        this.rawValue = rawValue;
        this.rawMessage = message;
      }
      /**
       * Return a pretty-formatted error message if the underlying validation error
       * is a ZodError or some other recognized error type, otherwise return the
       * default error message.
       */
      pretty() {
        if (this.cause instanceof z.ZodError) {
          return `${this.rawMessage}
${formatZodError(this.cause)}`;
        } else {
          return this.toString();
        }
      }
    };
    exports.SDKValidationError = SDKValidationError;
    function formatZodError(err, level = 0) {
      let pre = "  ".repeat(level);
      pre = level > 0 ? `\u2502${pre}` : pre;
      pre += " ".repeat(level);
      let message = "";
      const append = (str) => message += `
${pre}${str}`;
      const len = err.issues.length;
      const headline = len === 1 ? `${len} issue found` : `${len} issues found`;
      if (len) {
        append(`\u250C ${headline}:`);
      }
      for (const issue of err.issues) {
        let path = issue.path.join(".");
        path = path ? `<root>.${path}` : "<root>";
        append(`\u2502 \u2022 [${path}]: ${issue.message} (${issue.code})`);
        switch (issue.code) {
          case "invalid_literal":
          case "invalid_type": {
            append(`\u2502     Want: ${issue.expected}`);
            append(`\u2502      Got: ${issue.received}`);
            break;
          }
          case "unrecognized_keys": {
            append(`\u2502     Keys: ${issue.keys.join(", ")}`);
            break;
          }
          case "invalid_enum_value": {
            append(`\u2502     Allowed: ${issue.options.join(", ")}`);
            append(`\u2502         Got: ${issue.received}`);
            break;
          }
          case "invalid_union_discriminator": {
            append(`\u2502     Allowed: ${issue.options.join(", ")}`);
            break;
          }
          case "invalid_union": {
            const len2 = issue.unionErrors.length;
            append(`\u2502   \u2716\uFE0E Attemped to deserialize into one of ${len2} union members:`);
            issue.unionErrors.forEach((err2, i) => {
              append(`\u2502   \u2716\uFE0E Member ${i + 1} of ${len2}`);
              append(`${formatZodError(err2, level + 1)}`);
            });
          }
        }
      }
      if (err.issues.length) {
        append(`\u2514\u2500*`);
      }
      return message.slice(1);
    }
  }
});

// node_modules/@mistralai/mistralai/lib/schemas.js
var require_schemas = __commonJS({
  "node_modules/@mistralai/mistralai/lib/schemas.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parse = parse;
    exports.safeParse = safeParse;
    exports.collectExtraKeys = collectExtraKeys;
    var zod_1 = require_lib();
    var sdkvalidationerror_js_1 = require_sdkvalidationerror();
    var fp_js_1 = require_fp();
    function parse(rawValue, fn, errorMessage) {
      try {
        return fn(rawValue);
      } catch (err) {
        if (err instanceof zod_1.ZodError) {
          throw new sdkvalidationerror_js_1.SDKValidationError(errorMessage, err, rawValue);
        }
        throw err;
      }
    }
    function safeParse(rawValue, fn, errorMessage) {
      try {
        return (0, fp_js_1.OK)(fn(rawValue));
      } catch (err) {
        return (0, fp_js_1.ERR)(new sdkvalidationerror_js_1.SDKValidationError(errorMessage, err, rawValue));
      }
    }
    function collectExtraKeys(obj, extrasKey, optional) {
      return obj.transform((val) => {
        const extras = {};
        const { shape } = obj;
        for (const [key] of Object.entries(val)) {
          if (key in shape) {
            continue;
          }
          const v = val[key];
          if (typeof v === "undefined") {
            continue;
          }
          extras[key] = v;
          delete val[key];
        }
        if (optional && Object.keys(extras).length === 0) {
          return val;
        }
        return { ...val, [extrasKey]: extras };
      });
    }
  }
});

// node_modules/@mistralai/mistralai/lib/matchers.js
var require_matchers = __commonJS({
  "node_modules/@mistralai/mistralai/lib/matchers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.jsonErr = jsonErr;
    exports.json = json;
    exports.textErr = textErr;
    exports.text = text;
    exports.bytesErr = bytesErr;
    exports.bytes = bytes;
    exports.streamErr = streamErr;
    exports.stream = stream;
    exports.sseErr = sseErr;
    exports.sse = sse;
    exports.nilErr = nilErr;
    exports.nil = nil;
    exports.fail = fail;
    exports.match = match;
    exports.unpackHeaders = unpackHeaders;
    exports.discardResponseBody = discardResponseBody;
    var sdkerror_js_1 = require_sdkerror();
    var event_streams_js_1 = require_event_streams();
    var http_js_1 = require_http();
    var is_plain_object_js_1 = require_is_plain_object();
    var schemas_js_1 = require_schemas();
    var DEFAULT_CONTENT_TYPES = {
      json: "application/json",
      text: "text/plain",
      bytes: "application/octet-stream",
      stream: "application/octet-stream",
      sse: "text/event-stream",
      nil: "*",
      fail: "*"
    };
    function jsonErr(codes, schema, options) {
      return { ...options, err: true, enc: "json", codes, schema };
    }
    function json(codes, schema, options) {
      return { ...options, enc: "json", codes, schema };
    }
    function textErr(codes, schema, options) {
      return { ...options, err: true, enc: "text", codes, schema };
    }
    function text(codes, schema, options) {
      return { ...options, enc: "text", codes, schema };
    }
    function bytesErr(codes, schema, options) {
      return { ...options, err: true, enc: "bytes", codes, schema };
    }
    function bytes(codes, schema, options) {
      return { ...options, enc: "bytes", codes, schema };
    }
    function streamErr(codes, schema, options) {
      return { ...options, err: true, enc: "stream", codes, schema };
    }
    function stream(codes, schema, options) {
      return { ...options, enc: "stream", codes, schema };
    }
    function sseErr(codes, schema, options) {
      return { ...options, err: true, enc: "sse", codes, schema };
    }
    function sse(codes, schema, options) {
      return { ...options, enc: "sse", codes, schema };
    }
    function nilErr(codes, schema, options) {
      return { ...options, err: true, enc: "nil", codes, schema };
    }
    function nil(codes, schema, options) {
      return { ...options, enc: "nil", codes, schema };
    }
    function fail(codes) {
      return { enc: "fail", codes };
    }
    function match(...matchers) {
      return async function matchFunc(response, options) {
        let raw;
        let matcher;
        for (const match2 of matchers) {
          const { codes } = match2;
          const ctpattern = "ctype" in match2 ? match2.ctype : DEFAULT_CONTENT_TYPES[match2.enc];
          if (ctpattern && (0, http_js_1.matchResponse)(response, codes, ctpattern)) {
            matcher = match2;
            break;
          } else if (!ctpattern && (0, http_js_1.matchStatusCode)(response, codes)) {
            matcher = match2;
            break;
          }
        }
        if (!matcher) {
          const responseBody = await response.text();
          return [{
            ok: false,
            error: new sdkerror_js_1.SDKError("Unexpected API response status or content-type", response, responseBody)
          }, responseBody];
        }
        const encoding = matcher.enc;
        switch (encoding) {
          case "json":
            raw = await response.json();
            break;
          case "bytes":
            raw = new Uint8Array(await response.arrayBuffer());
            break;
          case "stream":
            raw = response.body;
            break;
          case "text":
            raw = await response.text();
            break;
          case "sse":
            raw = response.body && matcher.sseSentinel ? (0, event_streams_js_1.discardSentinel)(response.body, matcher.sseSentinel) : response.body;
            break;
          case "nil":
            raw = await discardResponseBody(response);
            break;
          case "fail":
            raw = await response.text();
            break;
          default:
            encoding;
            throw new Error(`Unsupported response type: ${encoding}`);
        }
        if (matcher.enc === "fail") {
          return [{
            ok: false,
            error: new sdkerror_js_1.SDKError("API error occurred", response, typeof raw === "string" ? raw : "")
          }, raw];
        }
        const resultKey = matcher.key || (options == null ? void 0 : options.resultKey);
        let data;
        if ("err" in matcher) {
          data = {
            ...options == null ? void 0 : options.extraFields,
            ...matcher.hdrs ? { Headers: unpackHeaders(response.headers) } : null,
            ...(0, is_plain_object_js_1.isPlainObject)(raw) ? raw : null
          };
        } else if (resultKey) {
          data = {
            ...options == null ? void 0 : options.extraFields,
            ...matcher.hdrs ? { Headers: unpackHeaders(response.headers) } : null,
            [resultKey]: raw
          };
        } else if (matcher.hdrs) {
          data = {
            ...options == null ? void 0 : options.extraFields,
            ...matcher.hdrs ? { Headers: unpackHeaders(response.headers) } : null,
            ...(0, is_plain_object_js_1.isPlainObject)(raw) ? raw : null
          };
        } else {
          data = raw;
        }
        if ("err" in matcher) {
          const result = (0, schemas_js_1.safeParse)(data, (v) => matcher.schema.parse(v), "Response validation failed");
          return [result.ok ? { ok: false, error: result.value } : result, raw];
        } else {
          return [
            (0, schemas_js_1.safeParse)(data, (v) => matcher.schema.parse(v), "Response validation failed"),
            raw
          ];
        }
      };
    }
    var headerValRE = /, */;
    function unpackHeaders(headers) {
      const out = {};
      for (const [k, v] of headers.entries()) {
        out[k] = v.split(headerValRE);
      }
      return out;
    }
    async function discardResponseBody(res) {
      var _a;
      const reader = (_a = res.body) == null ? void 0 : _a.getReader();
      if (reader == null) {
        return;
      }
      try {
        let done = false;
        while (!done) {
          const res2 = await reader.read();
          done = res2.done;
        }
      } finally {
        reader.releaseLock();
      }
    }
  }
});

// node_modules/@mistralai/mistralai/lib/primitives.js
var require_primitives = __commonJS({
  "node_modules/@mistralai/mistralai/lib/primitives.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.invariant = invariant;
    exports.remap = remap;
    exports.combineSignals = combineSignals;
    exports.abortSignalAny = abortSignalAny;
    exports.compactMap = compactMap;
    exports.allRequired = allRequired;
    var InvariantError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "InvariantError";
      }
    };
    function invariant(condition, message) {
      if (!condition) {
        throw new InvariantError(message);
      }
    }
    function remap(inp, mappings) {
      let out = {};
      if (!Object.keys(mappings).length) {
        out = inp;
        return out;
      }
      for (const [k, v] of Object.entries(inp)) {
        const j = mappings[k];
        if (j === null) {
          continue;
        }
        out[j != null ? j : k] = v;
      }
      return out;
    }
    function combineSignals(...signals) {
      const filtered = [];
      for (const signal of signals) {
        if (signal) {
          filtered.push(signal);
        }
      }
      switch (filtered.length) {
        case 0:
        case 1:
          return filtered[0] || null;
        default:
          if ("any" in AbortSignal && typeof AbortSignal.any === "function") {
            return AbortSignal.any(filtered);
          }
          return abortSignalAny(filtered);
      }
    }
    function abortSignalAny(signals) {
      const controller = new AbortController();
      const result = controller.signal;
      if (!signals.length) {
        return controller.signal;
      }
      if (signals.length === 1) {
        return signals[0] || controller.signal;
      }
      for (const signal of signals) {
        if (signal.aborted) {
          return signal;
        }
      }
      function abort() {
        controller.abort(this.reason);
        clean();
      }
      const signalRefs = [];
      function clean() {
        for (const signalRef of signalRefs) {
          const signal = signalRef.deref();
          if (signal) {
            signal.removeEventListener("abort", abort);
          }
        }
      }
      for (const signal of signals) {
        signalRefs.push(new WeakRef(signal));
        signal.addEventListener("abort", abort);
      }
      return result;
    }
    function compactMap(values) {
      const out = {};
      for (const [k, v] of Object.entries(values)) {
        if (typeof v !== "undefined") {
          out[k] = v;
        }
      }
      return out;
    }
    function allRequired(v) {
      if (Object.values(v).every((x) => x == null)) {
        return void 0;
      }
      return v;
    }
  }
});

// node_modules/@mistralai/mistralai/lib/security.js
var require_security = __commonJS({
  "node_modules/@mistralai/mistralai/lib/security.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SecurityError = exports.SecurityErrorCode = void 0;
    exports.resolveSecurity = resolveSecurity;
    exports.resolveGlobalSecurity = resolveGlobalSecurity;
    exports.extractSecurity = extractSecurity;
    var env_js_1 = require_env();
    var SecurityErrorCode;
    (function(SecurityErrorCode2) {
      SecurityErrorCode2["Incomplete"] = "incomplete";
      SecurityErrorCode2["UnrecognisedSecurityType"] = "unrecognized_security_type";
    })(SecurityErrorCode || (exports.SecurityErrorCode = SecurityErrorCode = {}));
    var SecurityError = class extends Error {
      constructor(code, message) {
        super(message);
        this.code = code;
        this.name = "SecurityError";
      }
      static incomplete() {
        return new SecurityError(SecurityErrorCode.Incomplete, "Security requirements not met in order to perform the operation");
      }
      static unrecognizedType(type) {
        return new SecurityError(SecurityErrorCode.UnrecognisedSecurityType, `Unrecognised security type: ${type}`);
      }
    };
    exports.SecurityError = SecurityError;
    function resolveSecurity(...options) {
      const state = {
        basic: {},
        headers: {},
        queryParams: {},
        cookies: {},
        oauth2: { type: "none" }
      };
      const option = options.find((opts) => {
        return opts.every((o) => {
          if (o.value == null) {
            return false;
          } else if (o.type === "http:basic") {
            return o.value.username != null || o.value.password != null;
          } else if (o.type === "http:custom") {
            return null;
          } else if (o.type === "oauth2:password") {
            return typeof o.value === "string" && !!o.value;
          } else if (o.type === "oauth2:client_credentials") {
            return o.value.clientID != null || o.value.clientSecret != null;
          } else if (typeof o.value === "string") {
            return !!o.value;
          } else {
            throw new Error(`Unrecognized security type: ${o.type} (value type: ${typeof o.value})`);
          }
        });
      });
      if (option == null) {
        return null;
      }
      option.forEach((spec) => {
        if (spec.value == null) {
          return;
        }
        const { type } = spec;
        switch (type) {
          case "apiKey:header":
            state.headers[spec.fieldName] = spec.value;
            break;
          case "apiKey:query":
            state.queryParams[spec.fieldName] = spec.value;
            break;
          case "apiKey:cookie":
            state.cookies[spec.fieldName] = spec.value;
            break;
          case "http:basic":
            applyBasic(state, spec);
            break;
          case "http:custom":
            break;
          case "http:bearer":
            applyBearer(state, spec);
            break;
          case "oauth2":
            applyBearer(state, spec);
            break;
          case "oauth2:password":
            applyBearer(state, spec);
            break;
          case "oauth2:client_credentials":
            break;
          case "openIdConnect":
            applyBearer(state, spec);
            break;
          default:
            spec;
            throw SecurityError.unrecognizedType(type);
        }
      });
      return state;
    }
    function applyBasic(state, spec) {
      if (spec.value == null) {
        return;
      }
      state.basic = spec.value;
    }
    function applyBearer(state, spec) {
      if (typeof spec.value !== "string" || !spec.value) {
        return;
      }
      let value = spec.value;
      if (value.slice(0, 7).toLowerCase() !== "bearer ") {
        value = `Bearer ${value}`;
      }
      state.headers[spec.fieldName] = value;
    }
    function resolveGlobalSecurity(security) {
      var _a;
      return resolveSecurity([
        {
          fieldName: "Authorization",
          type: "http:bearer",
          value: (_a = security == null ? void 0 : security.apiKey) != null ? _a : (0, env_js_1.env)().MISTRAL_API_KEY
        }
      ]);
    }
    async function extractSecurity(sec) {
      if (sec == null) {
        return;
      }
      return typeof sec === "function" ? sec() : sec;
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/documenturlchunk.js
var require_documenturlchunk = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/documenturlchunk.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DocumentURLChunk$ = exports.DocumentURLChunk$outboundSchema = exports.DocumentURLChunk$inboundSchema = exports.DocumentURLChunkType$ = exports.DocumentURLChunkType$outboundSchema = exports.DocumentURLChunkType$inboundSchema = exports.DocumentURLChunkType = void 0;
    exports.documentURLChunkToJSON = documentURLChunkToJSON;
    exports.documentURLChunkFromJSON = documentURLChunkFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.DocumentURLChunkType = {
      DocumentUrl: "document_url"
    };
    exports.DocumentURLChunkType$inboundSchema = z.nativeEnum(exports.DocumentURLChunkType);
    exports.DocumentURLChunkType$outboundSchema = exports.DocumentURLChunkType$inboundSchema;
    var DocumentURLChunkType$;
    (function(DocumentURLChunkType$2) {
      DocumentURLChunkType$2.inboundSchema = exports.DocumentURLChunkType$inboundSchema;
      DocumentURLChunkType$2.outboundSchema = exports.DocumentURLChunkType$outboundSchema;
    })(DocumentURLChunkType$ || (exports.DocumentURLChunkType$ = DocumentURLChunkType$ = {}));
    exports.DocumentURLChunk$inboundSchema = z.object({
      document_url: z.string(),
      document_name: z.nullable(z.string()).optional(),
      type: exports.DocumentURLChunkType$inboundSchema.default("document_url")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "document_url": "documentUrl",
        "document_name": "documentName"
      });
    });
    exports.DocumentURLChunk$outboundSchema = z.object({
      documentUrl: z.string(),
      documentName: z.nullable(z.string()).optional(),
      type: exports.DocumentURLChunkType$outboundSchema.default("document_url")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        documentUrl: "document_url",
        documentName: "document_name"
      });
    });
    var DocumentURLChunk$;
    (function(DocumentURLChunk$2) {
      DocumentURLChunk$2.inboundSchema = exports.DocumentURLChunk$inboundSchema;
      DocumentURLChunk$2.outboundSchema = exports.DocumentURLChunk$outboundSchema;
    })(DocumentURLChunk$ || (exports.DocumentURLChunk$ = DocumentURLChunk$ = {}));
    function documentURLChunkToJSON(documentURLChunk) {
      return JSON.stringify(exports.DocumentURLChunk$outboundSchema.parse(documentURLChunk));
    }
    function documentURLChunkFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DocumentURLChunk$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DocumentURLChunk' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/imageurl.js
var require_imageurl = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/imageurl.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ImageURL$ = exports.ImageURL$outboundSchema = exports.ImageURL$inboundSchema = void 0;
    exports.imageURLToJSON = imageURLToJSON;
    exports.imageURLFromJSON = imageURLFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.ImageURL$inboundSchema = z.object({
      url: z.string(),
      detail: z.nullable(z.string()).optional()
    });
    exports.ImageURL$outboundSchema = z.object({
      url: z.string(),
      detail: z.nullable(z.string()).optional()
    });
    var ImageURL$;
    (function(ImageURL$2) {
      ImageURL$2.inboundSchema = exports.ImageURL$inboundSchema;
      ImageURL$2.outboundSchema = exports.ImageURL$outboundSchema;
    })(ImageURL$ || (exports.ImageURL$ = ImageURL$ = {}));
    function imageURLToJSON(imageURL) {
      return JSON.stringify(exports.ImageURL$outboundSchema.parse(imageURL));
    }
    function imageURLFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ImageURL$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ImageURL' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/imageurlchunk.js
var require_imageurlchunk = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/imageurlchunk.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ImageURLChunk$ = exports.ImageURLChunk$outboundSchema = exports.ImageURLChunk$inboundSchema = exports.ImageURLChunkType$ = exports.ImageURLChunkType$outboundSchema = exports.ImageURLChunkType$inboundSchema = exports.ImageURLChunkImageURL$ = exports.ImageURLChunkImageURL$outboundSchema = exports.ImageURLChunkImageURL$inboundSchema = exports.ImageURLChunkType = void 0;
    exports.imageURLChunkImageURLToJSON = imageURLChunkImageURLToJSON;
    exports.imageURLChunkImageURLFromJSON = imageURLChunkImageURLFromJSON;
    exports.imageURLChunkToJSON = imageURLChunkToJSON;
    exports.imageURLChunkFromJSON = imageURLChunkFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var imageurl_js_1 = require_imageurl();
    exports.ImageURLChunkType = {
      ImageUrl: "image_url"
    };
    exports.ImageURLChunkImageURL$inboundSchema = z.union([imageurl_js_1.ImageURL$inboundSchema, z.string()]);
    exports.ImageURLChunkImageURL$outboundSchema = z.union([imageurl_js_1.ImageURL$outboundSchema, z.string()]);
    var ImageURLChunkImageURL$;
    (function(ImageURLChunkImageURL$2) {
      ImageURLChunkImageURL$2.inboundSchema = exports.ImageURLChunkImageURL$inboundSchema;
      ImageURLChunkImageURL$2.outboundSchema = exports.ImageURLChunkImageURL$outboundSchema;
    })(ImageURLChunkImageURL$ || (exports.ImageURLChunkImageURL$ = ImageURLChunkImageURL$ = {}));
    function imageURLChunkImageURLToJSON(imageURLChunkImageURL) {
      return JSON.stringify(exports.ImageURLChunkImageURL$outboundSchema.parse(imageURLChunkImageURL));
    }
    function imageURLChunkImageURLFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ImageURLChunkImageURL$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ImageURLChunkImageURL' from JSON`);
    }
    exports.ImageURLChunkType$inboundSchema = z.nativeEnum(exports.ImageURLChunkType);
    exports.ImageURLChunkType$outboundSchema = exports.ImageURLChunkType$inboundSchema;
    var ImageURLChunkType$;
    (function(ImageURLChunkType$2) {
      ImageURLChunkType$2.inboundSchema = exports.ImageURLChunkType$inboundSchema;
      ImageURLChunkType$2.outboundSchema = exports.ImageURLChunkType$outboundSchema;
    })(ImageURLChunkType$ || (exports.ImageURLChunkType$ = ImageURLChunkType$ = {}));
    exports.ImageURLChunk$inboundSchema = z.object({
      image_url: z.union([imageurl_js_1.ImageURL$inboundSchema, z.string()]),
      type: exports.ImageURLChunkType$inboundSchema.default("image_url")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "image_url": "imageUrl"
      });
    });
    exports.ImageURLChunk$outboundSchema = z.object({
      imageUrl: z.union([imageurl_js_1.ImageURL$outboundSchema, z.string()]),
      type: exports.ImageURLChunkType$outboundSchema.default("image_url")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        imageUrl: "image_url"
      });
    });
    var ImageURLChunk$;
    (function(ImageURLChunk$2) {
      ImageURLChunk$2.inboundSchema = exports.ImageURLChunk$inboundSchema;
      ImageURLChunk$2.outboundSchema = exports.ImageURLChunk$outboundSchema;
    })(ImageURLChunk$ || (exports.ImageURLChunk$ = ImageURLChunk$ = {}));
    function imageURLChunkToJSON(imageURLChunk) {
      return JSON.stringify(exports.ImageURLChunk$outboundSchema.parse(imageURLChunk));
    }
    function imageURLChunkFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ImageURLChunk$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ImageURLChunk' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/referencechunk.js
var require_referencechunk = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/referencechunk.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReferenceChunk$ = exports.ReferenceChunk$outboundSchema = exports.ReferenceChunk$inboundSchema = exports.ReferenceChunkType$ = exports.ReferenceChunkType$outboundSchema = exports.ReferenceChunkType$inboundSchema = exports.ReferenceChunkType = void 0;
    exports.referenceChunkToJSON = referenceChunkToJSON;
    exports.referenceChunkFromJSON = referenceChunkFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.ReferenceChunkType = {
      Reference: "reference"
    };
    exports.ReferenceChunkType$inboundSchema = z.nativeEnum(exports.ReferenceChunkType);
    exports.ReferenceChunkType$outboundSchema = exports.ReferenceChunkType$inboundSchema;
    var ReferenceChunkType$;
    (function(ReferenceChunkType$2) {
      ReferenceChunkType$2.inboundSchema = exports.ReferenceChunkType$inboundSchema;
      ReferenceChunkType$2.outboundSchema = exports.ReferenceChunkType$outboundSchema;
    })(ReferenceChunkType$ || (exports.ReferenceChunkType$ = ReferenceChunkType$ = {}));
    exports.ReferenceChunk$inboundSchema = z.object({
      reference_ids: z.array(z.number().int()),
      type: exports.ReferenceChunkType$inboundSchema.default("reference")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "reference_ids": "referenceIds"
      });
    });
    exports.ReferenceChunk$outboundSchema = z.object({
      referenceIds: z.array(z.number().int()),
      type: exports.ReferenceChunkType$outboundSchema.default("reference")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        referenceIds: "reference_ids"
      });
    });
    var ReferenceChunk$;
    (function(ReferenceChunk$2) {
      ReferenceChunk$2.inboundSchema = exports.ReferenceChunk$inboundSchema;
      ReferenceChunk$2.outboundSchema = exports.ReferenceChunk$outboundSchema;
    })(ReferenceChunk$ || (exports.ReferenceChunk$ = ReferenceChunk$ = {}));
    function referenceChunkToJSON(referenceChunk) {
      return JSON.stringify(exports.ReferenceChunk$outboundSchema.parse(referenceChunk));
    }
    function referenceChunkFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ReferenceChunk$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ReferenceChunk' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/textchunk.js
var require_textchunk = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/textchunk.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TextChunk$ = exports.TextChunk$outboundSchema = exports.TextChunk$inboundSchema = exports.TextChunkType$ = exports.TextChunkType$outboundSchema = exports.TextChunkType$inboundSchema = exports.TextChunkType = void 0;
    exports.textChunkToJSON = textChunkToJSON;
    exports.textChunkFromJSON = textChunkFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.TextChunkType = {
      Text: "text"
    };
    exports.TextChunkType$inboundSchema = z.nativeEnum(exports.TextChunkType);
    exports.TextChunkType$outboundSchema = exports.TextChunkType$inboundSchema;
    var TextChunkType$;
    (function(TextChunkType$2) {
      TextChunkType$2.inboundSchema = exports.TextChunkType$inboundSchema;
      TextChunkType$2.outboundSchema = exports.TextChunkType$outboundSchema;
    })(TextChunkType$ || (exports.TextChunkType$ = TextChunkType$ = {}));
    exports.TextChunk$inboundSchema = z.object({
      text: z.string(),
      type: exports.TextChunkType$inboundSchema.default("text")
    });
    exports.TextChunk$outboundSchema = z.object({
      text: z.string(),
      type: exports.TextChunkType$outboundSchema.default("text")
    });
    var TextChunk$;
    (function(TextChunk$2) {
      TextChunk$2.inboundSchema = exports.TextChunk$inboundSchema;
      TextChunk$2.outboundSchema = exports.TextChunk$outboundSchema;
    })(TextChunk$ || (exports.TextChunk$ = TextChunk$ = {}));
    function textChunkToJSON(textChunk) {
      return JSON.stringify(exports.TextChunk$outboundSchema.parse(textChunk));
    }
    function textChunkFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TextChunk$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TextChunk' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/contentchunk.js
var require_contentchunk = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/contentchunk.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContentChunk$ = exports.ContentChunk$outboundSchema = exports.ContentChunk$inboundSchema = void 0;
    exports.contentChunkToJSON = contentChunkToJSON;
    exports.contentChunkFromJSON = contentChunkFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var documenturlchunk_js_1 = require_documenturlchunk();
    var imageurlchunk_js_1 = require_imageurlchunk();
    var referencechunk_js_1 = require_referencechunk();
    var textchunk_js_1 = require_textchunk();
    exports.ContentChunk$inboundSchema = z.union([
      imageurlchunk_js_1.ImageURLChunk$inboundSchema.and(z.object({ type: z.literal("image_url") }).transform((v) => ({
        type: v.type
      }))),
      textchunk_js_1.TextChunk$inboundSchema.and(z.object({ type: z.literal("text") }).transform((v) => ({ type: v.type }))),
      referencechunk_js_1.ReferenceChunk$inboundSchema.and(z.object({ type: z.literal("reference") }).transform((v) => ({
        type: v.type
      }))),
      documenturlchunk_js_1.DocumentURLChunk$inboundSchema.and(z.object({ type: z.literal("document_url") }).transform((v) => ({
        type: v.type
      })))
    ]);
    exports.ContentChunk$outboundSchema = z.union([
      imageurlchunk_js_1.ImageURLChunk$outboundSchema.and(z.object({ type: z.literal("image_url") }).transform((v) => ({
        type: v.type
      }))),
      textchunk_js_1.TextChunk$outboundSchema.and(z.object({ type: z.literal("text") }).transform((v) => ({ type: v.type }))),
      referencechunk_js_1.ReferenceChunk$outboundSchema.and(z.object({ type: z.literal("reference") }).transform((v) => ({
        type: v.type
      }))),
      documenturlchunk_js_1.DocumentURLChunk$outboundSchema.and(z.object({ type: z.literal("document_url") }).transform((v) => ({
        type: v.type
      })))
    ]);
    var ContentChunk$;
    (function(ContentChunk$2) {
      ContentChunk$2.inboundSchema = exports.ContentChunk$inboundSchema;
      ContentChunk$2.outboundSchema = exports.ContentChunk$outboundSchema;
    })(ContentChunk$ || (exports.ContentChunk$ = ContentChunk$ = {}));
    function contentChunkToJSON(contentChunk) {
      return JSON.stringify(exports.ContentChunk$outboundSchema.parse(contentChunk));
    }
    function contentChunkFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ContentChunk$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ContentChunk' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/functioncall.js
var require_functioncall = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/functioncall.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FunctionCall$ = exports.FunctionCall$outboundSchema = exports.FunctionCall$inboundSchema = exports.Arguments$ = exports.Arguments$outboundSchema = exports.Arguments$inboundSchema = void 0;
    exports.argumentsToJSON = argumentsToJSON;
    exports.argumentsFromJSON = argumentsFromJSON;
    exports.functionCallToJSON = functionCallToJSON;
    exports.functionCallFromJSON = functionCallFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.Arguments$inboundSchema = z.union([z.record(z.any()), z.string()]);
    exports.Arguments$outboundSchema = z.union([z.record(z.any()), z.string()]);
    var Arguments$;
    (function(Arguments$2) {
      Arguments$2.inboundSchema = exports.Arguments$inboundSchema;
      Arguments$2.outboundSchema = exports.Arguments$outboundSchema;
    })(Arguments$ || (exports.Arguments$ = Arguments$ = {}));
    function argumentsToJSON(value) {
      return JSON.stringify(exports.Arguments$outboundSchema.parse(value));
    }
    function argumentsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Arguments$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Arguments' from JSON`);
    }
    exports.FunctionCall$inboundSchema = z.object({
      name: z.string(),
      arguments: z.union([z.record(z.any()), z.string()])
    });
    exports.FunctionCall$outboundSchema = z.object({
      name: z.string(),
      arguments: z.union([z.record(z.any()), z.string()])
    });
    var FunctionCall$;
    (function(FunctionCall$2) {
      FunctionCall$2.inboundSchema = exports.FunctionCall$inboundSchema;
      FunctionCall$2.outboundSchema = exports.FunctionCall$outboundSchema;
    })(FunctionCall$ || (exports.FunctionCall$ = FunctionCall$ = {}));
    function functionCallToJSON(functionCall) {
      return JSON.stringify(exports.FunctionCall$outboundSchema.parse(functionCall));
    }
    function functionCallFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FunctionCall$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FunctionCall' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/types/enums.js
var require_enums = __commonJS({
  "node_modules/@mistralai/mistralai/types/enums.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.catchUnrecognizedEnum = catchUnrecognizedEnum;
    function catchUnrecognizedEnum(value) {
      return value;
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/tooltypes.js
var require_tooltypes = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/tooltypes.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ToolTypes$ = exports.ToolTypes$outboundSchema = exports.ToolTypes$inboundSchema = exports.ToolTypes = void 0;
    var z = __importStar(require_lib());
    var enums_js_1 = require_enums();
    exports.ToolTypes = {
      Function: "function"
    };
    exports.ToolTypes$inboundSchema = z.union([
      z.nativeEnum(exports.ToolTypes),
      z.string().transform(enums_js_1.catchUnrecognizedEnum)
    ]);
    exports.ToolTypes$outboundSchema = z.union([
      z.nativeEnum(exports.ToolTypes),
      z.string().and(z.custom())
    ]);
    var ToolTypes$;
    (function(ToolTypes$2) {
      ToolTypes$2.inboundSchema = exports.ToolTypes$inboundSchema;
      ToolTypes$2.outboundSchema = exports.ToolTypes$outboundSchema;
    })(ToolTypes$ || (exports.ToolTypes$ = ToolTypes$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/components/toolcall.js
var require_toolcall = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/toolcall.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ToolCall$ = exports.ToolCall$outboundSchema = exports.ToolCall$inboundSchema = void 0;
    exports.toolCallToJSON = toolCallToJSON;
    exports.toolCallFromJSON = toolCallFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var functioncall_js_1 = require_functioncall();
    var tooltypes_js_1 = require_tooltypes();
    exports.ToolCall$inboundSchema = z.object({
      id: z.string().default("null"),
      type: tooltypes_js_1.ToolTypes$inboundSchema.optional(),
      function: functioncall_js_1.FunctionCall$inboundSchema,
      index: z.number().int().default(0)
    });
    exports.ToolCall$outboundSchema = z.object({
      id: z.string().default("null"),
      type: tooltypes_js_1.ToolTypes$outboundSchema.optional(),
      function: functioncall_js_1.FunctionCall$outboundSchema,
      index: z.number().int().default(0)
    });
    var ToolCall$;
    (function(ToolCall$2) {
      ToolCall$2.inboundSchema = exports.ToolCall$inboundSchema;
      ToolCall$2.outboundSchema = exports.ToolCall$outboundSchema;
    })(ToolCall$ || (exports.ToolCall$ = ToolCall$ = {}));
    function toolCallToJSON(toolCall) {
      return JSON.stringify(exports.ToolCall$outboundSchema.parse(toolCall));
    }
    function toolCallFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ToolCall$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ToolCall' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/assistantmessage.js
var require_assistantmessage = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/assistantmessage.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssistantMessage$ = exports.AssistantMessage$outboundSchema = exports.AssistantMessage$inboundSchema = exports.AssistantMessageRole$ = exports.AssistantMessageRole$outboundSchema = exports.AssistantMessageRole$inboundSchema = exports.AssistantMessageContent$ = exports.AssistantMessageContent$outboundSchema = exports.AssistantMessageContent$inboundSchema = exports.AssistantMessageRole = void 0;
    exports.assistantMessageContentToJSON = assistantMessageContentToJSON;
    exports.assistantMessageContentFromJSON = assistantMessageContentFromJSON;
    exports.assistantMessageToJSON = assistantMessageToJSON;
    exports.assistantMessageFromJSON = assistantMessageFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var contentchunk_js_1 = require_contentchunk();
    var toolcall_js_1 = require_toolcall();
    exports.AssistantMessageRole = {
      Assistant: "assistant"
    };
    exports.AssistantMessageContent$inboundSchema = z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$inboundSchema)]);
    exports.AssistantMessageContent$outboundSchema = z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$outboundSchema)]);
    var AssistantMessageContent$;
    (function(AssistantMessageContent$2) {
      AssistantMessageContent$2.inboundSchema = exports.AssistantMessageContent$inboundSchema;
      AssistantMessageContent$2.outboundSchema = exports.AssistantMessageContent$outboundSchema;
    })(AssistantMessageContent$ || (exports.AssistantMessageContent$ = AssistantMessageContent$ = {}));
    function assistantMessageContentToJSON(assistantMessageContent) {
      return JSON.stringify(exports.AssistantMessageContent$outboundSchema.parse(assistantMessageContent));
    }
    function assistantMessageContentFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AssistantMessageContent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssistantMessageContent' from JSON`);
    }
    exports.AssistantMessageRole$inboundSchema = z.nativeEnum(exports.AssistantMessageRole);
    exports.AssistantMessageRole$outboundSchema = exports.AssistantMessageRole$inboundSchema;
    var AssistantMessageRole$;
    (function(AssistantMessageRole$2) {
      AssistantMessageRole$2.inboundSchema = exports.AssistantMessageRole$inboundSchema;
      AssistantMessageRole$2.outboundSchema = exports.AssistantMessageRole$outboundSchema;
    })(AssistantMessageRole$ || (exports.AssistantMessageRole$ = AssistantMessageRole$ = {}));
    exports.AssistantMessage$inboundSchema = z.object({
      content: z.nullable(z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$inboundSchema)])).optional(),
      tool_calls: z.nullable(z.array(toolcall_js_1.ToolCall$inboundSchema)).optional(),
      prefix: z.boolean().default(false),
      role: exports.AssistantMessageRole$inboundSchema.default("assistant")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "tool_calls": "toolCalls"
      });
    });
    exports.AssistantMessage$outboundSchema = z.object({
      content: z.nullable(z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$outboundSchema)])).optional(),
      toolCalls: z.nullable(z.array(toolcall_js_1.ToolCall$outboundSchema)).optional(),
      prefix: z.boolean().default(false),
      role: exports.AssistantMessageRole$outboundSchema.default("assistant")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        toolCalls: "tool_calls"
      });
    });
    var AssistantMessage$;
    (function(AssistantMessage$2) {
      AssistantMessage$2.inboundSchema = exports.AssistantMessage$inboundSchema;
      AssistantMessage$2.outboundSchema = exports.AssistantMessage$outboundSchema;
    })(AssistantMessage$ || (exports.AssistantMessage$ = AssistantMessage$ = {}));
    function assistantMessageToJSON(assistantMessage) {
      return JSON.stringify(exports.AssistantMessage$outboundSchema.parse(assistantMessage));
    }
    function assistantMessageFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AssistantMessage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AssistantMessage' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/prediction.js
var require_prediction = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/prediction.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Prediction$ = exports.Prediction$outboundSchema = exports.Prediction$inboundSchema = void 0;
    exports.predictionToJSON = predictionToJSON;
    exports.predictionFromJSON = predictionFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.Prediction$inboundSchema = z.object({
      type: z.literal("content").default("content"),
      content: z.string().default("")
    });
    exports.Prediction$outboundSchema = z.object({
      type: z.literal("content").default("content"),
      content: z.string().default("")
    });
    var Prediction$;
    (function(Prediction$2) {
      Prediction$2.inboundSchema = exports.Prediction$inboundSchema;
      Prediction$2.outboundSchema = exports.Prediction$outboundSchema;
    })(Prediction$ || (exports.Prediction$ = Prediction$ = {}));
    function predictionToJSON(prediction) {
      return JSON.stringify(exports.Prediction$outboundSchema.parse(prediction));
    }
    function predictionFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Prediction$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Prediction' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/jsonschema.js
var require_jsonschema = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/jsonschema.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonSchema$ = exports.JsonSchema$outboundSchema = exports.JsonSchema$inboundSchema = void 0;
    exports.jsonSchemaToJSON = jsonSchemaToJSON;
    exports.jsonSchemaFromJSON = jsonSchemaFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JsonSchema$inboundSchema = z.object({
      name: z.string(),
      description: z.nullable(z.string()).optional(),
      schema: z.record(z.any()),
      strict: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "schema": "schemaDefinition"
      });
    });
    exports.JsonSchema$outboundSchema = z.object({
      name: z.string(),
      description: z.nullable(z.string()).optional(),
      schemaDefinition: z.record(z.any()),
      strict: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        schemaDefinition: "schema"
      });
    });
    var JsonSchema$;
    (function(JsonSchema$2) {
      JsonSchema$2.inboundSchema = exports.JsonSchema$inboundSchema;
      JsonSchema$2.outboundSchema = exports.JsonSchema$outboundSchema;
    })(JsonSchema$ || (exports.JsonSchema$ = JsonSchema$ = {}));
    function jsonSchemaToJSON(jsonSchema) {
      return JSON.stringify(exports.JsonSchema$outboundSchema.parse(jsonSchema));
    }
    function jsonSchemaFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JsonSchema$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JsonSchema' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/responseformats.js
var require_responseformats = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/responseformats.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResponseFormats$ = exports.ResponseFormats$outboundSchema = exports.ResponseFormats$inboundSchema = exports.ResponseFormats = void 0;
    var z = __importStar(require_lib());
    exports.ResponseFormats = {
      Text: "text",
      JsonObject: "json_object",
      JsonSchema: "json_schema"
    };
    exports.ResponseFormats$inboundSchema = z.nativeEnum(exports.ResponseFormats);
    exports.ResponseFormats$outboundSchema = exports.ResponseFormats$inboundSchema;
    var ResponseFormats$;
    (function(ResponseFormats$2) {
      ResponseFormats$2.inboundSchema = exports.ResponseFormats$inboundSchema;
      ResponseFormats$2.outboundSchema = exports.ResponseFormats$outboundSchema;
    })(ResponseFormats$ || (exports.ResponseFormats$ = ResponseFormats$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/components/responseformat.js
var require_responseformat = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/responseformat.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResponseFormat$ = exports.ResponseFormat$outboundSchema = exports.ResponseFormat$inboundSchema = void 0;
    exports.responseFormatToJSON = responseFormatToJSON;
    exports.responseFormatFromJSON = responseFormatFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var jsonschema_js_1 = require_jsonschema();
    var responseformats_js_1 = require_responseformats();
    exports.ResponseFormat$inboundSchema = z.object({
      type: responseformats_js_1.ResponseFormats$inboundSchema.optional(),
      json_schema: z.nullable(jsonschema_js_1.JsonSchema$inboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "json_schema": "jsonSchema"
      });
    });
    exports.ResponseFormat$outboundSchema = z.object({
      type: responseformats_js_1.ResponseFormats$outboundSchema.optional(),
      jsonSchema: z.nullable(jsonschema_js_1.JsonSchema$outboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        jsonSchema: "json_schema"
      });
    });
    var ResponseFormat$;
    (function(ResponseFormat$2) {
      ResponseFormat$2.inboundSchema = exports.ResponseFormat$inboundSchema;
      ResponseFormat$2.outboundSchema = exports.ResponseFormat$outboundSchema;
    })(ResponseFormat$ || (exports.ResponseFormat$ = ResponseFormat$ = {}));
    function responseFormatToJSON(responseFormat) {
      return JSON.stringify(exports.ResponseFormat$outboundSchema.parse(responseFormat));
    }
    function responseFormatFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ResponseFormat$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ResponseFormat' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/systemmessage.js
var require_systemmessage = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/systemmessage.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SystemMessage$ = exports.SystemMessage$outboundSchema = exports.SystemMessage$inboundSchema = exports.Role$ = exports.Role$outboundSchema = exports.Role$inboundSchema = exports.SystemMessageContent$ = exports.SystemMessageContent$outboundSchema = exports.SystemMessageContent$inboundSchema = exports.Role = void 0;
    exports.systemMessageContentToJSON = systemMessageContentToJSON;
    exports.systemMessageContentFromJSON = systemMessageContentFromJSON;
    exports.systemMessageToJSON = systemMessageToJSON;
    exports.systemMessageFromJSON = systemMessageFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var textchunk_js_1 = require_textchunk();
    exports.Role = {
      System: "system"
    };
    exports.SystemMessageContent$inboundSchema = z.union([z.string(), z.array(textchunk_js_1.TextChunk$inboundSchema)]);
    exports.SystemMessageContent$outboundSchema = z.union([z.string(), z.array(textchunk_js_1.TextChunk$outboundSchema)]);
    var SystemMessageContent$;
    (function(SystemMessageContent$2) {
      SystemMessageContent$2.inboundSchema = exports.SystemMessageContent$inboundSchema;
      SystemMessageContent$2.outboundSchema = exports.SystemMessageContent$outboundSchema;
    })(SystemMessageContent$ || (exports.SystemMessageContent$ = SystemMessageContent$ = {}));
    function systemMessageContentToJSON(systemMessageContent) {
      return JSON.stringify(exports.SystemMessageContent$outboundSchema.parse(systemMessageContent));
    }
    function systemMessageContentFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SystemMessageContent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SystemMessageContent' from JSON`);
    }
    exports.Role$inboundSchema = z.nativeEnum(exports.Role);
    exports.Role$outboundSchema = exports.Role$inboundSchema;
    var Role$;
    (function(Role$2) {
      Role$2.inboundSchema = exports.Role$inboundSchema;
      Role$2.outboundSchema = exports.Role$outboundSchema;
    })(Role$ || (exports.Role$ = Role$ = {}));
    exports.SystemMessage$inboundSchema = z.object({
      content: z.union([z.string(), z.array(textchunk_js_1.TextChunk$inboundSchema)]),
      role: exports.Role$inboundSchema.default("system")
    });
    exports.SystemMessage$outboundSchema = z.object({
      content: z.union([z.string(), z.array(textchunk_js_1.TextChunk$outboundSchema)]),
      role: exports.Role$outboundSchema.default("system")
    });
    var SystemMessage$;
    (function(SystemMessage$2) {
      SystemMessage$2.inboundSchema = exports.SystemMessage$inboundSchema;
      SystemMessage$2.outboundSchema = exports.SystemMessage$outboundSchema;
    })(SystemMessage$ || (exports.SystemMessage$ = SystemMessage$ = {}));
    function systemMessageToJSON(systemMessage) {
      return JSON.stringify(exports.SystemMessage$outboundSchema.parse(systemMessage));
    }
    function systemMessageFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SystemMessage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SystemMessage' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/function.js
var require_function = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/function.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FunctionT$ = exports.FunctionT$outboundSchema = exports.FunctionT$inboundSchema = void 0;
    exports.functionToJSON = functionToJSON;
    exports.functionFromJSON = functionFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.FunctionT$inboundSchema = z.object({
      name: z.string(),
      description: z.string().default(""),
      strict: z.boolean().default(false),
      parameters: z.record(z.any())
    });
    exports.FunctionT$outboundSchema = z.object({
      name: z.string(),
      description: z.string().default(""),
      strict: z.boolean().default(false),
      parameters: z.record(z.any())
    });
    var FunctionT$;
    (function(FunctionT$2) {
      FunctionT$2.inboundSchema = exports.FunctionT$inboundSchema;
      FunctionT$2.outboundSchema = exports.FunctionT$outboundSchema;
    })(FunctionT$ || (exports.FunctionT$ = FunctionT$ = {}));
    function functionToJSON(functionT) {
      return JSON.stringify(exports.FunctionT$outboundSchema.parse(functionT));
    }
    function functionFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FunctionT$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FunctionT' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/tool.js
var require_tool = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/tool.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Tool$ = exports.Tool$outboundSchema = exports.Tool$inboundSchema = void 0;
    exports.toolToJSON = toolToJSON;
    exports.toolFromJSON = toolFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var function_js_1 = require_function();
    var tooltypes_js_1 = require_tooltypes();
    exports.Tool$inboundSchema = z.object({
      type: tooltypes_js_1.ToolTypes$inboundSchema.optional(),
      function: function_js_1.FunctionT$inboundSchema
    });
    exports.Tool$outboundSchema = z.object({
      type: tooltypes_js_1.ToolTypes$outboundSchema.optional(),
      function: function_js_1.FunctionT$outboundSchema
    });
    var Tool$;
    (function(Tool$2) {
      Tool$2.inboundSchema = exports.Tool$inboundSchema;
      Tool$2.outboundSchema = exports.Tool$outboundSchema;
    })(Tool$ || (exports.Tool$ = Tool$ = {}));
    function toolToJSON(tool) {
      return JSON.stringify(exports.Tool$outboundSchema.parse(tool));
    }
    function toolFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Tool$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Tool' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/functionname.js
var require_functionname = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/functionname.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FunctionName$ = exports.FunctionName$outboundSchema = exports.FunctionName$inboundSchema = void 0;
    exports.functionNameToJSON = functionNameToJSON;
    exports.functionNameFromJSON = functionNameFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.FunctionName$inboundSchema = z.object({
      name: z.string()
    });
    exports.FunctionName$outboundSchema = z.object({
      name: z.string()
    });
    var FunctionName$;
    (function(FunctionName$2) {
      FunctionName$2.inboundSchema = exports.FunctionName$inboundSchema;
      FunctionName$2.outboundSchema = exports.FunctionName$outboundSchema;
    })(FunctionName$ || (exports.FunctionName$ = FunctionName$ = {}));
    function functionNameToJSON(functionName) {
      return JSON.stringify(exports.FunctionName$outboundSchema.parse(functionName));
    }
    function functionNameFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FunctionName$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FunctionName' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/toolchoice.js
var require_toolchoice = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/toolchoice.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ToolChoice$ = exports.ToolChoice$outboundSchema = exports.ToolChoice$inboundSchema = void 0;
    exports.toolChoiceToJSON = toolChoiceToJSON;
    exports.toolChoiceFromJSON = toolChoiceFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var functionname_js_1 = require_functionname();
    var tooltypes_js_1 = require_tooltypes();
    exports.ToolChoice$inboundSchema = z.object({
      type: tooltypes_js_1.ToolTypes$inboundSchema.optional(),
      function: functionname_js_1.FunctionName$inboundSchema
    });
    exports.ToolChoice$outboundSchema = z.object({
      type: tooltypes_js_1.ToolTypes$outboundSchema.optional(),
      function: functionname_js_1.FunctionName$outboundSchema
    });
    var ToolChoice$;
    (function(ToolChoice$2) {
      ToolChoice$2.inboundSchema = exports.ToolChoice$inboundSchema;
      ToolChoice$2.outboundSchema = exports.ToolChoice$outboundSchema;
    })(ToolChoice$ || (exports.ToolChoice$ = ToolChoice$ = {}));
    function toolChoiceToJSON(toolChoice) {
      return JSON.stringify(exports.ToolChoice$outboundSchema.parse(toolChoice));
    }
    function toolChoiceFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ToolChoice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ToolChoice' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/toolchoiceenum.js
var require_toolchoiceenum = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/toolchoiceenum.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ToolChoiceEnum$ = exports.ToolChoiceEnum$outboundSchema = exports.ToolChoiceEnum$inboundSchema = exports.ToolChoiceEnum = void 0;
    var z = __importStar(require_lib());
    exports.ToolChoiceEnum = {
      Auto: "auto",
      None: "none",
      Any: "any",
      Required: "required"
    };
    exports.ToolChoiceEnum$inboundSchema = z.nativeEnum(exports.ToolChoiceEnum);
    exports.ToolChoiceEnum$outboundSchema = exports.ToolChoiceEnum$inboundSchema;
    var ToolChoiceEnum$;
    (function(ToolChoiceEnum$2) {
      ToolChoiceEnum$2.inboundSchema = exports.ToolChoiceEnum$inboundSchema;
      ToolChoiceEnum$2.outboundSchema = exports.ToolChoiceEnum$outboundSchema;
    })(ToolChoiceEnum$ || (exports.ToolChoiceEnum$ = ToolChoiceEnum$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/components/toolmessage.js
var require_toolmessage = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/toolmessage.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ToolMessage$ = exports.ToolMessage$outboundSchema = exports.ToolMessage$inboundSchema = exports.ToolMessageRole$ = exports.ToolMessageRole$outboundSchema = exports.ToolMessageRole$inboundSchema = exports.ToolMessageContent$ = exports.ToolMessageContent$outboundSchema = exports.ToolMessageContent$inboundSchema = exports.ToolMessageRole = void 0;
    exports.toolMessageContentToJSON = toolMessageContentToJSON;
    exports.toolMessageContentFromJSON = toolMessageContentFromJSON;
    exports.toolMessageToJSON = toolMessageToJSON;
    exports.toolMessageFromJSON = toolMessageFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var contentchunk_js_1 = require_contentchunk();
    exports.ToolMessageRole = {
      Tool: "tool"
    };
    exports.ToolMessageContent$inboundSchema = z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$inboundSchema)]);
    exports.ToolMessageContent$outboundSchema = z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$outboundSchema)]);
    var ToolMessageContent$;
    (function(ToolMessageContent$2) {
      ToolMessageContent$2.inboundSchema = exports.ToolMessageContent$inboundSchema;
      ToolMessageContent$2.outboundSchema = exports.ToolMessageContent$outboundSchema;
    })(ToolMessageContent$ || (exports.ToolMessageContent$ = ToolMessageContent$ = {}));
    function toolMessageContentToJSON(toolMessageContent) {
      return JSON.stringify(exports.ToolMessageContent$outboundSchema.parse(toolMessageContent));
    }
    function toolMessageContentFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ToolMessageContent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ToolMessageContent' from JSON`);
    }
    exports.ToolMessageRole$inboundSchema = z.nativeEnum(exports.ToolMessageRole);
    exports.ToolMessageRole$outboundSchema = exports.ToolMessageRole$inboundSchema;
    var ToolMessageRole$;
    (function(ToolMessageRole$2) {
      ToolMessageRole$2.inboundSchema = exports.ToolMessageRole$inboundSchema;
      ToolMessageRole$2.outboundSchema = exports.ToolMessageRole$outboundSchema;
    })(ToolMessageRole$ || (exports.ToolMessageRole$ = ToolMessageRole$ = {}));
    exports.ToolMessage$inboundSchema = z.object({
      content: z.nullable(z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$inboundSchema)])),
      tool_call_id: z.nullable(z.string()).optional(),
      name: z.nullable(z.string()).optional(),
      role: exports.ToolMessageRole$inboundSchema.default("tool")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "tool_call_id": "toolCallId"
      });
    });
    exports.ToolMessage$outboundSchema = z.object({
      content: z.nullable(z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$outboundSchema)])),
      toolCallId: z.nullable(z.string()).optional(),
      name: z.nullable(z.string()).optional(),
      role: exports.ToolMessageRole$outboundSchema.default("tool")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        toolCallId: "tool_call_id"
      });
    });
    var ToolMessage$;
    (function(ToolMessage$2) {
      ToolMessage$2.inboundSchema = exports.ToolMessage$inboundSchema;
      ToolMessage$2.outboundSchema = exports.ToolMessage$outboundSchema;
    })(ToolMessage$ || (exports.ToolMessage$ = ToolMessage$ = {}));
    function toolMessageToJSON(toolMessage) {
      return JSON.stringify(exports.ToolMessage$outboundSchema.parse(toolMessage));
    }
    function toolMessageFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ToolMessage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ToolMessage' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/usermessage.js
var require_usermessage = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/usermessage.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UserMessage$ = exports.UserMessage$outboundSchema = exports.UserMessage$inboundSchema = exports.UserMessageRole$ = exports.UserMessageRole$outboundSchema = exports.UserMessageRole$inboundSchema = exports.UserMessageContent$ = exports.UserMessageContent$outboundSchema = exports.UserMessageContent$inboundSchema = exports.UserMessageRole = void 0;
    exports.userMessageContentToJSON = userMessageContentToJSON;
    exports.userMessageContentFromJSON = userMessageContentFromJSON;
    exports.userMessageToJSON = userMessageToJSON;
    exports.userMessageFromJSON = userMessageFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var contentchunk_js_1 = require_contentchunk();
    exports.UserMessageRole = {
      User: "user"
    };
    exports.UserMessageContent$inboundSchema = z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$inboundSchema)]);
    exports.UserMessageContent$outboundSchema = z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$outboundSchema)]);
    var UserMessageContent$;
    (function(UserMessageContent$2) {
      UserMessageContent$2.inboundSchema = exports.UserMessageContent$inboundSchema;
      UserMessageContent$2.outboundSchema = exports.UserMessageContent$outboundSchema;
    })(UserMessageContent$ || (exports.UserMessageContent$ = UserMessageContent$ = {}));
    function userMessageContentToJSON(userMessageContent) {
      return JSON.stringify(exports.UserMessageContent$outboundSchema.parse(userMessageContent));
    }
    function userMessageContentFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UserMessageContent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserMessageContent' from JSON`);
    }
    exports.UserMessageRole$inboundSchema = z.nativeEnum(exports.UserMessageRole);
    exports.UserMessageRole$outboundSchema = exports.UserMessageRole$inboundSchema;
    var UserMessageRole$;
    (function(UserMessageRole$2) {
      UserMessageRole$2.inboundSchema = exports.UserMessageRole$inboundSchema;
      UserMessageRole$2.outboundSchema = exports.UserMessageRole$outboundSchema;
    })(UserMessageRole$ || (exports.UserMessageRole$ = UserMessageRole$ = {}));
    exports.UserMessage$inboundSchema = z.object({
      content: z.nullable(z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$inboundSchema)])),
      role: exports.UserMessageRole$inboundSchema.default("user")
    });
    exports.UserMessage$outboundSchema = z.object({
      content: z.nullable(z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$outboundSchema)])),
      role: exports.UserMessageRole$outboundSchema.default("user")
    });
    var UserMessage$;
    (function(UserMessage$2) {
      UserMessage$2.inboundSchema = exports.UserMessage$inboundSchema;
      UserMessage$2.outboundSchema = exports.UserMessage$outboundSchema;
    })(UserMessage$ || (exports.UserMessage$ = UserMessage$ = {}));
    function userMessageToJSON(userMessage) {
      return JSON.stringify(exports.UserMessage$outboundSchema.parse(userMessage));
    }
    function userMessageFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UserMessage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UserMessage' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/agentscompletionrequest.js
var require_agentscompletionrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/agentscompletionrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AgentsCompletionRequest$ = exports.AgentsCompletionRequest$outboundSchema = exports.AgentsCompletionRequest$inboundSchema = exports.AgentsCompletionRequestToolChoice$ = exports.AgentsCompletionRequestToolChoice$outboundSchema = exports.AgentsCompletionRequestToolChoice$inboundSchema = exports.AgentsCompletionRequestMessages$ = exports.AgentsCompletionRequestMessages$outboundSchema = exports.AgentsCompletionRequestMessages$inboundSchema = exports.AgentsCompletionRequestStop$ = exports.AgentsCompletionRequestStop$outboundSchema = exports.AgentsCompletionRequestStop$inboundSchema = void 0;
    exports.agentsCompletionRequestStopToJSON = agentsCompletionRequestStopToJSON;
    exports.agentsCompletionRequestStopFromJSON = agentsCompletionRequestStopFromJSON;
    exports.agentsCompletionRequestMessagesToJSON = agentsCompletionRequestMessagesToJSON;
    exports.agentsCompletionRequestMessagesFromJSON = agentsCompletionRequestMessagesFromJSON;
    exports.agentsCompletionRequestToolChoiceToJSON = agentsCompletionRequestToolChoiceToJSON;
    exports.agentsCompletionRequestToolChoiceFromJSON = agentsCompletionRequestToolChoiceFromJSON;
    exports.agentsCompletionRequestToJSON = agentsCompletionRequestToJSON;
    exports.agentsCompletionRequestFromJSON = agentsCompletionRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var assistantmessage_js_1 = require_assistantmessage();
    var prediction_js_1 = require_prediction();
    var responseformat_js_1 = require_responseformat();
    var systemmessage_js_1 = require_systemmessage();
    var tool_js_1 = require_tool();
    var toolchoice_js_1 = require_toolchoice();
    var toolchoiceenum_js_1 = require_toolchoiceenum();
    var toolmessage_js_1 = require_toolmessage();
    var usermessage_js_1 = require_usermessage();
    exports.AgentsCompletionRequestStop$inboundSchema = z.union([z.string(), z.array(z.string())]);
    exports.AgentsCompletionRequestStop$outboundSchema = z.union([z.string(), z.array(z.string())]);
    var AgentsCompletionRequestStop$;
    (function(AgentsCompletionRequestStop$2) {
      AgentsCompletionRequestStop$2.inboundSchema = exports.AgentsCompletionRequestStop$inboundSchema;
      AgentsCompletionRequestStop$2.outboundSchema = exports.AgentsCompletionRequestStop$outboundSchema;
    })(AgentsCompletionRequestStop$ || (exports.AgentsCompletionRequestStop$ = AgentsCompletionRequestStop$ = {}));
    function agentsCompletionRequestStopToJSON(agentsCompletionRequestStop) {
      return JSON.stringify(exports.AgentsCompletionRequestStop$outboundSchema.parse(agentsCompletionRequestStop));
    }
    function agentsCompletionRequestStopFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AgentsCompletionRequestStop$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentsCompletionRequestStop' from JSON`);
    }
    exports.AgentsCompletionRequestMessages$inboundSchema = z.union([
      systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
      assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })))
    ]);
    exports.AgentsCompletionRequestMessages$outboundSchema = z.union([
      systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
      assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })))
    ]);
    var AgentsCompletionRequestMessages$;
    (function(AgentsCompletionRequestMessages$2) {
      AgentsCompletionRequestMessages$2.inboundSchema = exports.AgentsCompletionRequestMessages$inboundSchema;
      AgentsCompletionRequestMessages$2.outboundSchema = exports.AgentsCompletionRequestMessages$outboundSchema;
    })(AgentsCompletionRequestMessages$ || (exports.AgentsCompletionRequestMessages$ = AgentsCompletionRequestMessages$ = {}));
    function agentsCompletionRequestMessagesToJSON(agentsCompletionRequestMessages) {
      return JSON.stringify(exports.AgentsCompletionRequestMessages$outboundSchema.parse(agentsCompletionRequestMessages));
    }
    function agentsCompletionRequestMessagesFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AgentsCompletionRequestMessages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentsCompletionRequestMessages' from JSON`);
    }
    exports.AgentsCompletionRequestToolChoice$inboundSchema = z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]);
    exports.AgentsCompletionRequestToolChoice$outboundSchema = z.union([toolchoice_js_1.ToolChoice$outboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema]);
    var AgentsCompletionRequestToolChoice$;
    (function(AgentsCompletionRequestToolChoice$2) {
      AgentsCompletionRequestToolChoice$2.inboundSchema = exports.AgentsCompletionRequestToolChoice$inboundSchema;
      AgentsCompletionRequestToolChoice$2.outboundSchema = exports.AgentsCompletionRequestToolChoice$outboundSchema;
    })(AgentsCompletionRequestToolChoice$ || (exports.AgentsCompletionRequestToolChoice$ = AgentsCompletionRequestToolChoice$ = {}));
    function agentsCompletionRequestToolChoiceToJSON(agentsCompletionRequestToolChoice) {
      return JSON.stringify(exports.AgentsCompletionRequestToolChoice$outboundSchema.parse(agentsCompletionRequestToolChoice));
    }
    function agentsCompletionRequestToolChoiceFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AgentsCompletionRequestToolChoice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentsCompletionRequestToolChoice' from JSON`);
    }
    exports.AgentsCompletionRequest$inboundSchema = z.object({
      max_tokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(false),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      random_seed: z.nullable(z.number().int()).optional(),
      messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      response_format: responseformat_js_1.ResponseFormat$inboundSchema.optional(),
      tools: z.nullable(z.array(tool_js_1.Tool$inboundSchema)).optional(),
      tool_choice: z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]).optional(),
      presence_penalty: z.number().optional(),
      frequency_penalty: z.number().optional(),
      n: z.nullable(z.number().int()).optional(),
      prediction: prediction_js_1.Prediction$inboundSchema.optional(),
      agent_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "max_tokens": "maxTokens",
        "random_seed": "randomSeed",
        "response_format": "responseFormat",
        "tool_choice": "toolChoice",
        "presence_penalty": "presencePenalty",
        "frequency_penalty": "frequencyPenalty",
        "agent_id": "agentId"
      });
    });
    exports.AgentsCompletionRequest$outboundSchema = z.object({
      maxTokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(false),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      randomSeed: z.nullable(z.number().int()).optional(),
      messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      responseFormat: responseformat_js_1.ResponseFormat$outboundSchema.optional(),
      tools: z.nullable(z.array(tool_js_1.Tool$outboundSchema)).optional(),
      toolChoice: z.union([
        toolchoice_js_1.ToolChoice$outboundSchema,
        toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema
      ]).optional(),
      presencePenalty: z.number().optional(),
      frequencyPenalty: z.number().optional(),
      n: z.nullable(z.number().int()).optional(),
      prediction: prediction_js_1.Prediction$outboundSchema.optional(),
      agentId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        maxTokens: "max_tokens",
        randomSeed: "random_seed",
        responseFormat: "response_format",
        toolChoice: "tool_choice",
        presencePenalty: "presence_penalty",
        frequencyPenalty: "frequency_penalty",
        agentId: "agent_id"
      });
    });
    var AgentsCompletionRequest$;
    (function(AgentsCompletionRequest$2) {
      AgentsCompletionRequest$2.inboundSchema = exports.AgentsCompletionRequest$inboundSchema;
      AgentsCompletionRequest$2.outboundSchema = exports.AgentsCompletionRequest$outboundSchema;
    })(AgentsCompletionRequest$ || (exports.AgentsCompletionRequest$ = AgentsCompletionRequest$ = {}));
    function agentsCompletionRequestToJSON(agentsCompletionRequest) {
      return JSON.stringify(exports.AgentsCompletionRequest$outboundSchema.parse(agentsCompletionRequest));
    }
    function agentsCompletionRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AgentsCompletionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentsCompletionRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/agentscompletionstreamrequest.js
var require_agentscompletionstreamrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/agentscompletionstreamrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AgentsCompletionStreamRequest$ = exports.AgentsCompletionStreamRequest$outboundSchema = exports.AgentsCompletionStreamRequest$inboundSchema = exports.AgentsCompletionStreamRequestToolChoice$ = exports.AgentsCompletionStreamRequestToolChoice$outboundSchema = exports.AgentsCompletionStreamRequestToolChoice$inboundSchema = exports.AgentsCompletionStreamRequestMessages$ = exports.AgentsCompletionStreamRequestMessages$outboundSchema = exports.AgentsCompletionStreamRequestMessages$inboundSchema = exports.AgentsCompletionStreamRequestStop$ = exports.AgentsCompletionStreamRequestStop$outboundSchema = exports.AgentsCompletionStreamRequestStop$inboundSchema = void 0;
    exports.agentsCompletionStreamRequestStopToJSON = agentsCompletionStreamRequestStopToJSON;
    exports.agentsCompletionStreamRequestStopFromJSON = agentsCompletionStreamRequestStopFromJSON;
    exports.agentsCompletionStreamRequestMessagesToJSON = agentsCompletionStreamRequestMessagesToJSON;
    exports.agentsCompletionStreamRequestMessagesFromJSON = agentsCompletionStreamRequestMessagesFromJSON;
    exports.agentsCompletionStreamRequestToolChoiceToJSON = agentsCompletionStreamRequestToolChoiceToJSON;
    exports.agentsCompletionStreamRequestToolChoiceFromJSON = agentsCompletionStreamRequestToolChoiceFromJSON;
    exports.agentsCompletionStreamRequestToJSON = agentsCompletionStreamRequestToJSON;
    exports.agentsCompletionStreamRequestFromJSON = agentsCompletionStreamRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var assistantmessage_js_1 = require_assistantmessage();
    var prediction_js_1 = require_prediction();
    var responseformat_js_1 = require_responseformat();
    var systemmessage_js_1 = require_systemmessage();
    var tool_js_1 = require_tool();
    var toolchoice_js_1 = require_toolchoice();
    var toolchoiceenum_js_1 = require_toolchoiceenum();
    var toolmessage_js_1 = require_toolmessage();
    var usermessage_js_1 = require_usermessage();
    exports.AgentsCompletionStreamRequestStop$inboundSchema = z.union([z.string(), z.array(z.string())]);
    exports.AgentsCompletionStreamRequestStop$outboundSchema = z.union([z.string(), z.array(z.string())]);
    var AgentsCompletionStreamRequestStop$;
    (function(AgentsCompletionStreamRequestStop$2) {
      AgentsCompletionStreamRequestStop$2.inboundSchema = exports.AgentsCompletionStreamRequestStop$inboundSchema;
      AgentsCompletionStreamRequestStop$2.outboundSchema = exports.AgentsCompletionStreamRequestStop$outboundSchema;
    })(AgentsCompletionStreamRequestStop$ || (exports.AgentsCompletionStreamRequestStop$ = AgentsCompletionStreamRequestStop$ = {}));
    function agentsCompletionStreamRequestStopToJSON(agentsCompletionStreamRequestStop) {
      return JSON.stringify(exports.AgentsCompletionStreamRequestStop$outboundSchema.parse(agentsCompletionStreamRequestStop));
    }
    function agentsCompletionStreamRequestStopFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AgentsCompletionStreamRequestStop$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentsCompletionStreamRequestStop' from JSON`);
    }
    exports.AgentsCompletionStreamRequestMessages$inboundSchema = z.union([
      systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
      assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })))
    ]);
    exports.AgentsCompletionStreamRequestMessages$outboundSchema = z.union([
      systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
      assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })))
    ]);
    var AgentsCompletionStreamRequestMessages$;
    (function(AgentsCompletionStreamRequestMessages$2) {
      AgentsCompletionStreamRequestMessages$2.inboundSchema = exports.AgentsCompletionStreamRequestMessages$inboundSchema;
      AgentsCompletionStreamRequestMessages$2.outboundSchema = exports.AgentsCompletionStreamRequestMessages$outboundSchema;
    })(AgentsCompletionStreamRequestMessages$ || (exports.AgentsCompletionStreamRequestMessages$ = AgentsCompletionStreamRequestMessages$ = {}));
    function agentsCompletionStreamRequestMessagesToJSON(agentsCompletionStreamRequestMessages) {
      return JSON.stringify(exports.AgentsCompletionStreamRequestMessages$outboundSchema.parse(agentsCompletionStreamRequestMessages));
    }
    function agentsCompletionStreamRequestMessagesFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AgentsCompletionStreamRequestMessages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentsCompletionStreamRequestMessages' from JSON`);
    }
    exports.AgentsCompletionStreamRequestToolChoice$inboundSchema = z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]);
    exports.AgentsCompletionStreamRequestToolChoice$outboundSchema = z.union([toolchoice_js_1.ToolChoice$outboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema]);
    var AgentsCompletionStreamRequestToolChoice$;
    (function(AgentsCompletionStreamRequestToolChoice$2) {
      AgentsCompletionStreamRequestToolChoice$2.inboundSchema = exports.AgentsCompletionStreamRequestToolChoice$inboundSchema;
      AgentsCompletionStreamRequestToolChoice$2.outboundSchema = exports.AgentsCompletionStreamRequestToolChoice$outboundSchema;
    })(AgentsCompletionStreamRequestToolChoice$ || (exports.AgentsCompletionStreamRequestToolChoice$ = AgentsCompletionStreamRequestToolChoice$ = {}));
    function agentsCompletionStreamRequestToolChoiceToJSON(agentsCompletionStreamRequestToolChoice) {
      return JSON.stringify(exports.AgentsCompletionStreamRequestToolChoice$outboundSchema.parse(agentsCompletionStreamRequestToolChoice));
    }
    function agentsCompletionStreamRequestToolChoiceFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AgentsCompletionStreamRequestToolChoice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentsCompletionStreamRequestToolChoice' from JSON`);
    }
    exports.AgentsCompletionStreamRequest$inboundSchema = z.object({
      max_tokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(true),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      random_seed: z.nullable(z.number().int()).optional(),
      messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      response_format: responseformat_js_1.ResponseFormat$inboundSchema.optional(),
      tools: z.nullable(z.array(tool_js_1.Tool$inboundSchema)).optional(),
      tool_choice: z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]).optional(),
      presence_penalty: z.number().optional(),
      frequency_penalty: z.number().optional(),
      n: z.nullable(z.number().int()).optional(),
      prediction: prediction_js_1.Prediction$inboundSchema.optional(),
      agent_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "max_tokens": "maxTokens",
        "random_seed": "randomSeed",
        "response_format": "responseFormat",
        "tool_choice": "toolChoice",
        "presence_penalty": "presencePenalty",
        "frequency_penalty": "frequencyPenalty",
        "agent_id": "agentId"
      });
    });
    exports.AgentsCompletionStreamRequest$outboundSchema = z.object({
      maxTokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(true),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      randomSeed: z.nullable(z.number().int()).optional(),
      messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      responseFormat: responseformat_js_1.ResponseFormat$outboundSchema.optional(),
      tools: z.nullable(z.array(tool_js_1.Tool$outboundSchema)).optional(),
      toolChoice: z.union([
        toolchoice_js_1.ToolChoice$outboundSchema,
        toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema
      ]).optional(),
      presencePenalty: z.number().optional(),
      frequencyPenalty: z.number().optional(),
      n: z.nullable(z.number().int()).optional(),
      prediction: prediction_js_1.Prediction$outboundSchema.optional(),
      agentId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        maxTokens: "max_tokens",
        randomSeed: "random_seed",
        responseFormat: "response_format",
        toolChoice: "tool_choice",
        presencePenalty: "presence_penalty",
        frequencyPenalty: "frequency_penalty",
        agentId: "agent_id"
      });
    });
    var AgentsCompletionStreamRequest$;
    (function(AgentsCompletionStreamRequest$2) {
      AgentsCompletionStreamRequest$2.inboundSchema = exports.AgentsCompletionStreamRequest$inboundSchema;
      AgentsCompletionStreamRequest$2.outboundSchema = exports.AgentsCompletionStreamRequest$outboundSchema;
    })(AgentsCompletionStreamRequest$ || (exports.AgentsCompletionStreamRequest$ = AgentsCompletionStreamRequest$ = {}));
    function agentsCompletionStreamRequestToJSON(agentsCompletionStreamRequest) {
      return JSON.stringify(exports.AgentsCompletionStreamRequest$outboundSchema.parse(agentsCompletionStreamRequest));
    }
    function agentsCompletionStreamRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.AgentsCompletionStreamRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'AgentsCompletionStreamRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/apiendpoint.js
var require_apiendpoint = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/apiendpoint.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApiEndpoint$ = exports.ApiEndpoint$outboundSchema = exports.ApiEndpoint$inboundSchema = exports.ApiEndpoint = void 0;
    var z = __importStar(require_lib());
    var enums_js_1 = require_enums();
    exports.ApiEndpoint = {
      RootV1ChatCompletions: "/v1/chat/completions",
      RootV1Embeddings: "/v1/embeddings",
      RootV1FimCompletions: "/v1/fim/completions",
      RootV1Moderations: "/v1/moderations",
      RootV1ChatModerations: "/v1/chat/moderations"
    };
    exports.ApiEndpoint$inboundSchema = z.union([
      z.nativeEnum(exports.ApiEndpoint),
      z.string().transform(enums_js_1.catchUnrecognizedEnum)
    ]);
    exports.ApiEndpoint$outboundSchema = z.union([
      z.nativeEnum(exports.ApiEndpoint),
      z.string().and(z.custom())
    ]);
    var ApiEndpoint$;
    (function(ApiEndpoint$2) {
      ApiEndpoint$2.inboundSchema = exports.ApiEndpoint$inboundSchema;
      ApiEndpoint$2.outboundSchema = exports.ApiEndpoint$outboundSchema;
    })(ApiEndpoint$ || (exports.ApiEndpoint$ = ApiEndpoint$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/components/archiveftmodelout.js
var require_archiveftmodelout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/archiveftmodelout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArchiveFTModelOut$ = exports.ArchiveFTModelOut$outboundSchema = exports.ArchiveFTModelOut$inboundSchema = exports.ArchiveFTModelOutObject$ = exports.ArchiveFTModelOutObject$outboundSchema = exports.ArchiveFTModelOutObject$inboundSchema = exports.ArchiveFTModelOutObject = void 0;
    exports.archiveFTModelOutToJSON = archiveFTModelOutToJSON;
    exports.archiveFTModelOutFromJSON = archiveFTModelOutFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.ArchiveFTModelOutObject = {
      Model: "model"
    };
    exports.ArchiveFTModelOutObject$inboundSchema = z.nativeEnum(exports.ArchiveFTModelOutObject);
    exports.ArchiveFTModelOutObject$outboundSchema = exports.ArchiveFTModelOutObject$inboundSchema;
    var ArchiveFTModelOutObject$;
    (function(ArchiveFTModelOutObject$2) {
      ArchiveFTModelOutObject$2.inboundSchema = exports.ArchiveFTModelOutObject$inboundSchema;
      ArchiveFTModelOutObject$2.outboundSchema = exports.ArchiveFTModelOutObject$outboundSchema;
    })(ArchiveFTModelOutObject$ || (exports.ArchiveFTModelOutObject$ = ArchiveFTModelOutObject$ = {}));
    exports.ArchiveFTModelOut$inboundSchema = z.object({
      id: z.string(),
      object: z.literal("model").default("model"),
      archived: z.boolean().default(true)
    });
    exports.ArchiveFTModelOut$outboundSchema = z.object({
      id: z.string(),
      object: z.literal("model").default("model"),
      archived: z.boolean().default(true)
    });
    var ArchiveFTModelOut$;
    (function(ArchiveFTModelOut$2) {
      ArchiveFTModelOut$2.inboundSchema = exports.ArchiveFTModelOut$inboundSchema;
      ArchiveFTModelOut$2.outboundSchema = exports.ArchiveFTModelOut$outboundSchema;
    })(ArchiveFTModelOut$ || (exports.ArchiveFTModelOut$ = ArchiveFTModelOut$ = {}));
    function archiveFTModelOutToJSON(archiveFTModelOut) {
      return JSON.stringify(exports.ArchiveFTModelOut$outboundSchema.parse(archiveFTModelOut));
    }
    function archiveFTModelOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ArchiveFTModelOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ArchiveFTModelOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/modelcapabilities.js
var require_modelcapabilities = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/modelcapabilities.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModelCapabilities$ = exports.ModelCapabilities$outboundSchema = exports.ModelCapabilities$inboundSchema = void 0;
    exports.modelCapabilitiesToJSON = modelCapabilitiesToJSON;
    exports.modelCapabilitiesFromJSON = modelCapabilitiesFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.ModelCapabilities$inboundSchema = z.object({
      completion_chat: z.boolean().default(true),
      completion_fim: z.boolean().default(false),
      function_calling: z.boolean().default(true),
      fine_tuning: z.boolean().default(false),
      vision: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "completion_chat": "completionChat",
        "completion_fim": "completionFim",
        "function_calling": "functionCalling",
        "fine_tuning": "fineTuning"
      });
    });
    exports.ModelCapabilities$outboundSchema = z.object({
      completionChat: z.boolean().default(true),
      completionFim: z.boolean().default(false),
      functionCalling: z.boolean().default(true),
      fineTuning: z.boolean().default(false),
      vision: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        completionChat: "completion_chat",
        completionFim: "completion_fim",
        functionCalling: "function_calling",
        fineTuning: "fine_tuning"
      });
    });
    var ModelCapabilities$;
    (function(ModelCapabilities$2) {
      ModelCapabilities$2.inboundSchema = exports.ModelCapabilities$inboundSchema;
      ModelCapabilities$2.outboundSchema = exports.ModelCapabilities$outboundSchema;
    })(ModelCapabilities$ || (exports.ModelCapabilities$ = ModelCapabilities$ = {}));
    function modelCapabilitiesToJSON(modelCapabilities) {
      return JSON.stringify(exports.ModelCapabilities$outboundSchema.parse(modelCapabilities));
    }
    function modelCapabilitiesFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ModelCapabilities$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ModelCapabilities' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/basemodelcard.js
var require_basemodelcard = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/basemodelcard.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseModelCard$ = exports.BaseModelCard$outboundSchema = exports.BaseModelCard$inboundSchema = exports.Type$ = exports.Type$outboundSchema = exports.Type$inboundSchema = exports.Type = void 0;
    exports.baseModelCardToJSON = baseModelCardToJSON;
    exports.baseModelCardFromJSON = baseModelCardFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var modelcapabilities_js_1 = require_modelcapabilities();
    exports.Type = {
      Base: "base"
    };
    exports.Type$inboundSchema = z.nativeEnum(exports.Type);
    exports.Type$outboundSchema = exports.Type$inboundSchema;
    var Type$;
    (function(Type$2) {
      Type$2.inboundSchema = exports.Type$inboundSchema;
      Type$2.outboundSchema = exports.Type$outboundSchema;
    })(Type$ || (exports.Type$ = Type$ = {}));
    exports.BaseModelCard$inboundSchema = z.object({
      id: z.string(),
      object: z.string().default("model"),
      created: z.number().int().optional(),
      owned_by: z.string().default("mistralai"),
      capabilities: modelcapabilities_js_1.ModelCapabilities$inboundSchema,
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional(),
      max_context_length: z.number().int().default(32768),
      aliases: z.array(z.string()).optional(),
      deprecation: z.nullable(z.string().datetime({ offset: true }).transform((v) => new Date(v))).optional(),
      default_model_temperature: z.nullable(z.number()).optional(),
      type: z.literal("base").default("base")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "owned_by": "ownedBy",
        "max_context_length": "maxContextLength",
        "default_model_temperature": "defaultModelTemperature"
      });
    });
    exports.BaseModelCard$outboundSchema = z.object({
      id: z.string(),
      object: z.string().default("model"),
      created: z.number().int().optional(),
      ownedBy: z.string().default("mistralai"),
      capabilities: modelcapabilities_js_1.ModelCapabilities$outboundSchema,
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional(),
      maxContextLength: z.number().int().default(32768),
      aliases: z.array(z.string()).optional(),
      deprecation: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
      defaultModelTemperature: z.nullable(z.number()).optional(),
      type: z.literal("base").default("base")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        ownedBy: "owned_by",
        maxContextLength: "max_context_length",
        defaultModelTemperature: "default_model_temperature"
      });
    });
    var BaseModelCard$;
    (function(BaseModelCard$2) {
      BaseModelCard$2.inboundSchema = exports.BaseModelCard$inboundSchema;
      BaseModelCard$2.outboundSchema = exports.BaseModelCard$outboundSchema;
    })(BaseModelCard$ || (exports.BaseModelCard$ = BaseModelCard$ = {}));
    function baseModelCardToJSON(baseModelCard) {
      return JSON.stringify(exports.BaseModelCard$outboundSchema.parse(baseModelCard));
    }
    function baseModelCardFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BaseModelCard$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BaseModelCard' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/batcherror.js
var require_batcherror = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/batcherror.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchError$ = exports.BatchError$outboundSchema = exports.BatchError$inboundSchema = void 0;
    exports.batchErrorToJSON = batchErrorToJSON;
    exports.batchErrorFromJSON = batchErrorFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.BatchError$inboundSchema = z.object({
      message: z.string(),
      count: z.number().int().default(1)
    });
    exports.BatchError$outboundSchema = z.object({
      message: z.string(),
      count: z.number().int().default(1)
    });
    var BatchError$;
    (function(BatchError$2) {
      BatchError$2.inboundSchema = exports.BatchError$inboundSchema;
      BatchError$2.outboundSchema = exports.BatchError$outboundSchema;
    })(BatchError$ || (exports.BatchError$ = BatchError$ = {}));
    function batchErrorToJSON(batchError) {
      return JSON.stringify(exports.BatchError$outboundSchema.parse(batchError));
    }
    function batchErrorFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BatchError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BatchError' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/batchjobin.js
var require_batchjobin = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/batchjobin.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchJobIn$ = exports.BatchJobIn$outboundSchema = exports.BatchJobIn$inboundSchema = void 0;
    exports.batchJobInToJSON = batchJobInToJSON;
    exports.batchJobInFromJSON = batchJobInFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var apiendpoint_js_1 = require_apiendpoint();
    exports.BatchJobIn$inboundSchema = z.object({
      input_files: z.array(z.string()),
      endpoint: apiendpoint_js_1.ApiEndpoint$inboundSchema,
      model: z.string(),
      metadata: z.nullable(z.record(z.string())).optional(),
      timeout_hours: z.number().int().default(24)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "input_files": "inputFiles",
        "timeout_hours": "timeoutHours"
      });
    });
    exports.BatchJobIn$outboundSchema = z.object({
      inputFiles: z.array(z.string()),
      endpoint: apiendpoint_js_1.ApiEndpoint$outboundSchema,
      model: z.string(),
      metadata: z.nullable(z.record(z.string())).optional(),
      timeoutHours: z.number().int().default(24)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        inputFiles: "input_files",
        timeoutHours: "timeout_hours"
      });
    });
    var BatchJobIn$;
    (function(BatchJobIn$2) {
      BatchJobIn$2.inboundSchema = exports.BatchJobIn$inboundSchema;
      BatchJobIn$2.outboundSchema = exports.BatchJobIn$outboundSchema;
    })(BatchJobIn$ || (exports.BatchJobIn$ = BatchJobIn$ = {}));
    function batchJobInToJSON(batchJobIn) {
      return JSON.stringify(exports.BatchJobIn$outboundSchema.parse(batchJobIn));
    }
    function batchJobInFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BatchJobIn$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BatchJobIn' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/batchjobstatus.js
var require_batchjobstatus = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/batchjobstatus.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchJobStatus$ = exports.BatchJobStatus$outboundSchema = exports.BatchJobStatus$inboundSchema = exports.BatchJobStatus = void 0;
    var z = __importStar(require_lib());
    exports.BatchJobStatus = {
      Queued: "QUEUED",
      Running: "RUNNING",
      Success: "SUCCESS",
      Failed: "FAILED",
      TimeoutExceeded: "TIMEOUT_EXCEEDED",
      CancellationRequested: "CANCELLATION_REQUESTED",
      Cancelled: "CANCELLED"
    };
    exports.BatchJobStatus$inboundSchema = z.nativeEnum(exports.BatchJobStatus);
    exports.BatchJobStatus$outboundSchema = exports.BatchJobStatus$inboundSchema;
    var BatchJobStatus$;
    (function(BatchJobStatus$2) {
      BatchJobStatus$2.inboundSchema = exports.BatchJobStatus$inboundSchema;
      BatchJobStatus$2.outboundSchema = exports.BatchJobStatus$outboundSchema;
    })(BatchJobStatus$ || (exports.BatchJobStatus$ = BatchJobStatus$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/components/batchjobout.js
var require_batchjobout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/batchjobout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchJobOut$ = exports.BatchJobOut$outboundSchema = exports.BatchJobOut$inboundSchema = exports.BatchJobOutObject$ = exports.BatchJobOutObject$outboundSchema = exports.BatchJobOutObject$inboundSchema = exports.BatchJobOutObject = void 0;
    exports.batchJobOutToJSON = batchJobOutToJSON;
    exports.batchJobOutFromJSON = batchJobOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var batcherror_js_1 = require_batcherror();
    var batchjobstatus_js_1 = require_batchjobstatus();
    exports.BatchJobOutObject = {
      Batch: "batch"
    };
    exports.BatchJobOutObject$inboundSchema = z.nativeEnum(exports.BatchJobOutObject);
    exports.BatchJobOutObject$outboundSchema = exports.BatchJobOutObject$inboundSchema;
    var BatchJobOutObject$;
    (function(BatchJobOutObject$2) {
      BatchJobOutObject$2.inboundSchema = exports.BatchJobOutObject$inboundSchema;
      BatchJobOutObject$2.outboundSchema = exports.BatchJobOutObject$outboundSchema;
    })(BatchJobOutObject$ || (exports.BatchJobOutObject$ = BatchJobOutObject$ = {}));
    exports.BatchJobOut$inboundSchema = z.object({
      id: z.string(),
      object: z.literal("batch").default("batch"),
      input_files: z.array(z.string()),
      metadata: z.nullable(z.record(z.any())).optional(),
      endpoint: z.string(),
      model: z.string(),
      output_file: z.nullable(z.string()).optional(),
      error_file: z.nullable(z.string()).optional(),
      errors: z.array(batcherror_js_1.BatchError$inboundSchema),
      status: batchjobstatus_js_1.BatchJobStatus$inboundSchema,
      created_at: z.number().int(),
      total_requests: z.number().int(),
      completed_requests: z.number().int(),
      succeeded_requests: z.number().int(),
      failed_requests: z.number().int(),
      started_at: z.nullable(z.number().int()).optional(),
      completed_at: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "input_files": "inputFiles",
        "output_file": "outputFile",
        "error_file": "errorFile",
        "created_at": "createdAt",
        "total_requests": "totalRequests",
        "completed_requests": "completedRequests",
        "succeeded_requests": "succeededRequests",
        "failed_requests": "failedRequests",
        "started_at": "startedAt",
        "completed_at": "completedAt"
      });
    });
    exports.BatchJobOut$outboundSchema = z.object({
      id: z.string(),
      object: z.literal("batch").default("batch"),
      inputFiles: z.array(z.string()),
      metadata: z.nullable(z.record(z.any())).optional(),
      endpoint: z.string(),
      model: z.string(),
      outputFile: z.nullable(z.string()).optional(),
      errorFile: z.nullable(z.string()).optional(),
      errors: z.array(batcherror_js_1.BatchError$outboundSchema),
      status: batchjobstatus_js_1.BatchJobStatus$outboundSchema,
      createdAt: z.number().int(),
      totalRequests: z.number().int(),
      completedRequests: z.number().int(),
      succeededRequests: z.number().int(),
      failedRequests: z.number().int(),
      startedAt: z.nullable(z.number().int()).optional(),
      completedAt: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        inputFiles: "input_files",
        outputFile: "output_file",
        errorFile: "error_file",
        createdAt: "created_at",
        totalRequests: "total_requests",
        completedRequests: "completed_requests",
        succeededRequests: "succeeded_requests",
        failedRequests: "failed_requests",
        startedAt: "started_at",
        completedAt: "completed_at"
      });
    });
    var BatchJobOut$;
    (function(BatchJobOut$2) {
      BatchJobOut$2.inboundSchema = exports.BatchJobOut$inboundSchema;
      BatchJobOut$2.outboundSchema = exports.BatchJobOut$outboundSchema;
    })(BatchJobOut$ || (exports.BatchJobOut$ = BatchJobOut$ = {}));
    function batchJobOutToJSON(batchJobOut) {
      return JSON.stringify(exports.BatchJobOut$outboundSchema.parse(batchJobOut));
    }
    function batchJobOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BatchJobOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BatchJobOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/batchjobsout.js
var require_batchjobsout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/batchjobsout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchJobsOut$ = exports.BatchJobsOut$outboundSchema = exports.BatchJobsOut$inboundSchema = exports.BatchJobsOutObject$ = exports.BatchJobsOutObject$outboundSchema = exports.BatchJobsOutObject$inboundSchema = exports.BatchJobsOutObject = void 0;
    exports.batchJobsOutToJSON = batchJobsOutToJSON;
    exports.batchJobsOutFromJSON = batchJobsOutFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var batchjobout_js_1 = require_batchjobout();
    exports.BatchJobsOutObject = {
      List: "list"
    };
    exports.BatchJobsOutObject$inboundSchema = z.nativeEnum(exports.BatchJobsOutObject);
    exports.BatchJobsOutObject$outboundSchema = exports.BatchJobsOutObject$inboundSchema;
    var BatchJobsOutObject$;
    (function(BatchJobsOutObject$2) {
      BatchJobsOutObject$2.inboundSchema = exports.BatchJobsOutObject$inboundSchema;
      BatchJobsOutObject$2.outboundSchema = exports.BatchJobsOutObject$outboundSchema;
    })(BatchJobsOutObject$ || (exports.BatchJobsOutObject$ = BatchJobsOutObject$ = {}));
    exports.BatchJobsOut$inboundSchema = z.object({
      data: z.array(batchjobout_js_1.BatchJobOut$inboundSchema).optional(),
      object: z.literal("list").default("list"),
      total: z.number().int()
    });
    exports.BatchJobsOut$outboundSchema = z.object({
      data: z.array(batchjobout_js_1.BatchJobOut$outboundSchema).optional(),
      object: z.literal("list").default("list"),
      total: z.number().int()
    });
    var BatchJobsOut$;
    (function(BatchJobsOut$2) {
      BatchJobsOut$2.inboundSchema = exports.BatchJobsOut$inboundSchema;
      BatchJobsOut$2.outboundSchema = exports.BatchJobsOut$outboundSchema;
    })(BatchJobsOut$ || (exports.BatchJobsOut$ = BatchJobsOut$ = {}));
    function batchJobsOutToJSON(batchJobsOut) {
      return JSON.stringify(exports.BatchJobsOut$outboundSchema.parse(batchJobsOut));
    }
    function batchJobsOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BatchJobsOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BatchJobsOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/chatcompletionchoice.js
var require_chatcompletionchoice = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/chatcompletionchoice.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChatCompletionChoice$ = exports.ChatCompletionChoice$outboundSchema = exports.ChatCompletionChoice$inboundSchema = exports.FinishReason$ = exports.FinishReason$outboundSchema = exports.FinishReason$inboundSchema = exports.FinishReason = void 0;
    exports.chatCompletionChoiceToJSON = chatCompletionChoiceToJSON;
    exports.chatCompletionChoiceFromJSON = chatCompletionChoiceFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var enums_js_1 = require_enums();
    var assistantmessage_js_1 = require_assistantmessage();
    exports.FinishReason = {
      Stop: "stop",
      Length: "length",
      ModelLength: "model_length",
      Error: "error",
      ToolCalls: "tool_calls"
    };
    exports.FinishReason$inboundSchema = z.union([
      z.nativeEnum(exports.FinishReason),
      z.string().transform(enums_js_1.catchUnrecognizedEnum)
    ]);
    exports.FinishReason$outboundSchema = z.union([
      z.nativeEnum(exports.FinishReason),
      z.string().and(z.custom())
    ]);
    var FinishReason$;
    (function(FinishReason$2) {
      FinishReason$2.inboundSchema = exports.FinishReason$inboundSchema;
      FinishReason$2.outboundSchema = exports.FinishReason$outboundSchema;
    })(FinishReason$ || (exports.FinishReason$ = FinishReason$ = {}));
    exports.ChatCompletionChoice$inboundSchema = z.object({
      index: z.number().int(),
      message: assistantmessage_js_1.AssistantMessage$inboundSchema,
      finish_reason: exports.FinishReason$inboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "finish_reason": "finishReason"
      });
    });
    exports.ChatCompletionChoice$outboundSchema = z.object({
      index: z.number().int(),
      message: assistantmessage_js_1.AssistantMessage$outboundSchema,
      finishReason: exports.FinishReason$outboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        finishReason: "finish_reason"
      });
    });
    var ChatCompletionChoice$;
    (function(ChatCompletionChoice$2) {
      ChatCompletionChoice$2.inboundSchema = exports.ChatCompletionChoice$inboundSchema;
      ChatCompletionChoice$2.outboundSchema = exports.ChatCompletionChoice$outboundSchema;
    })(ChatCompletionChoice$ || (exports.ChatCompletionChoice$ = ChatCompletionChoice$ = {}));
    function chatCompletionChoiceToJSON(chatCompletionChoice) {
      return JSON.stringify(exports.ChatCompletionChoice$outboundSchema.parse(chatCompletionChoice));
    }
    function chatCompletionChoiceFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatCompletionChoice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatCompletionChoice' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/chatcompletionrequest.js
var require_chatcompletionrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/chatcompletionrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChatCompletionRequest$ = exports.ChatCompletionRequest$outboundSchema = exports.ChatCompletionRequest$inboundSchema = exports.ChatCompletionRequestToolChoice$ = exports.ChatCompletionRequestToolChoice$outboundSchema = exports.ChatCompletionRequestToolChoice$inboundSchema = exports.Messages$ = exports.Messages$outboundSchema = exports.Messages$inboundSchema = exports.Stop$ = exports.Stop$outboundSchema = exports.Stop$inboundSchema = void 0;
    exports.stopToJSON = stopToJSON;
    exports.stopFromJSON = stopFromJSON;
    exports.messagesToJSON = messagesToJSON;
    exports.messagesFromJSON = messagesFromJSON;
    exports.chatCompletionRequestToolChoiceToJSON = chatCompletionRequestToolChoiceToJSON;
    exports.chatCompletionRequestToolChoiceFromJSON = chatCompletionRequestToolChoiceFromJSON;
    exports.chatCompletionRequestToJSON = chatCompletionRequestToJSON;
    exports.chatCompletionRequestFromJSON = chatCompletionRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var assistantmessage_js_1 = require_assistantmessage();
    var prediction_js_1 = require_prediction();
    var responseformat_js_1 = require_responseformat();
    var systemmessage_js_1 = require_systemmessage();
    var tool_js_1 = require_tool();
    var toolchoice_js_1 = require_toolchoice();
    var toolchoiceenum_js_1 = require_toolchoiceenum();
    var toolmessage_js_1 = require_toolmessage();
    var usermessage_js_1 = require_usermessage();
    exports.Stop$inboundSchema = z.union([z.string(), z.array(z.string())]);
    exports.Stop$outboundSchema = z.union([z.string(), z.array(z.string())]);
    var Stop$;
    (function(Stop$2) {
      Stop$2.inboundSchema = exports.Stop$inboundSchema;
      Stop$2.outboundSchema = exports.Stop$outboundSchema;
    })(Stop$ || (exports.Stop$ = Stop$ = {}));
    function stopToJSON(stop) {
      return JSON.stringify(exports.Stop$outboundSchema.parse(stop));
    }
    function stopFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Stop$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Stop' from JSON`);
    }
    exports.Messages$inboundSchema = z.union([
      systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
      assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })))
    ]);
    exports.Messages$outboundSchema = z.union([
      systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
      assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })))
    ]);
    var Messages$;
    (function(Messages$2) {
      Messages$2.inboundSchema = exports.Messages$inboundSchema;
      Messages$2.outboundSchema = exports.Messages$outboundSchema;
    })(Messages$ || (exports.Messages$ = Messages$ = {}));
    function messagesToJSON(messages) {
      return JSON.stringify(exports.Messages$outboundSchema.parse(messages));
    }
    function messagesFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Messages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Messages' from JSON`);
    }
    exports.ChatCompletionRequestToolChoice$inboundSchema = z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]);
    exports.ChatCompletionRequestToolChoice$outboundSchema = z.union([toolchoice_js_1.ToolChoice$outboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema]);
    var ChatCompletionRequestToolChoice$;
    (function(ChatCompletionRequestToolChoice$2) {
      ChatCompletionRequestToolChoice$2.inboundSchema = exports.ChatCompletionRequestToolChoice$inboundSchema;
      ChatCompletionRequestToolChoice$2.outboundSchema = exports.ChatCompletionRequestToolChoice$outboundSchema;
    })(ChatCompletionRequestToolChoice$ || (exports.ChatCompletionRequestToolChoice$ = ChatCompletionRequestToolChoice$ = {}));
    function chatCompletionRequestToolChoiceToJSON(chatCompletionRequestToolChoice) {
      return JSON.stringify(exports.ChatCompletionRequestToolChoice$outboundSchema.parse(chatCompletionRequestToolChoice));
    }
    function chatCompletionRequestToolChoiceFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatCompletionRequestToolChoice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatCompletionRequestToolChoice' from JSON`);
    }
    exports.ChatCompletionRequest$inboundSchema = z.object({
      model: z.string(),
      temperature: z.nullable(z.number()).optional(),
      top_p: z.number().optional(),
      max_tokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(false),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      random_seed: z.nullable(z.number().int()).optional(),
      messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      response_format: responseformat_js_1.ResponseFormat$inboundSchema.optional(),
      tools: z.nullable(z.array(tool_js_1.Tool$inboundSchema)).optional(),
      tool_choice: z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]).optional(),
      presence_penalty: z.number().optional(),
      frequency_penalty: z.number().optional(),
      n: z.nullable(z.number().int()).optional(),
      prediction: prediction_js_1.Prediction$inboundSchema.optional(),
      safe_prompt: z.boolean().optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "top_p": "topP",
        "max_tokens": "maxTokens",
        "random_seed": "randomSeed",
        "response_format": "responseFormat",
        "tool_choice": "toolChoice",
        "presence_penalty": "presencePenalty",
        "frequency_penalty": "frequencyPenalty",
        "safe_prompt": "safePrompt"
      });
    });
    exports.ChatCompletionRequest$outboundSchema = z.object({
      model: z.string(),
      temperature: z.nullable(z.number()).optional(),
      topP: z.number().optional(),
      maxTokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(false),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      randomSeed: z.nullable(z.number().int()).optional(),
      messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      responseFormat: responseformat_js_1.ResponseFormat$outboundSchema.optional(),
      tools: z.nullable(z.array(tool_js_1.Tool$outboundSchema)).optional(),
      toolChoice: z.union([
        toolchoice_js_1.ToolChoice$outboundSchema,
        toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema
      ]).optional(),
      presencePenalty: z.number().optional(),
      frequencyPenalty: z.number().optional(),
      n: z.nullable(z.number().int()).optional(),
      prediction: prediction_js_1.Prediction$outboundSchema.optional(),
      safePrompt: z.boolean().optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        topP: "top_p",
        maxTokens: "max_tokens",
        randomSeed: "random_seed",
        responseFormat: "response_format",
        toolChoice: "tool_choice",
        presencePenalty: "presence_penalty",
        frequencyPenalty: "frequency_penalty",
        safePrompt: "safe_prompt"
      });
    });
    var ChatCompletionRequest$;
    (function(ChatCompletionRequest$2) {
      ChatCompletionRequest$2.inboundSchema = exports.ChatCompletionRequest$inboundSchema;
      ChatCompletionRequest$2.outboundSchema = exports.ChatCompletionRequest$outboundSchema;
    })(ChatCompletionRequest$ || (exports.ChatCompletionRequest$ = ChatCompletionRequest$ = {}));
    function chatCompletionRequestToJSON(chatCompletionRequest) {
      return JSON.stringify(exports.ChatCompletionRequest$outboundSchema.parse(chatCompletionRequest));
    }
    function chatCompletionRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatCompletionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatCompletionRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/usageinfo.js
var require_usageinfo = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/usageinfo.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UsageInfo$ = exports.UsageInfo$outboundSchema = exports.UsageInfo$inboundSchema = void 0;
    exports.usageInfoToJSON = usageInfoToJSON;
    exports.usageInfoFromJSON = usageInfoFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.UsageInfo$inboundSchema = z.object({
      prompt_tokens: z.number().int(),
      completion_tokens: z.number().int(),
      total_tokens: z.number().int()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "prompt_tokens": "promptTokens",
        "completion_tokens": "completionTokens",
        "total_tokens": "totalTokens"
      });
    });
    exports.UsageInfo$outboundSchema = z.object({
      promptTokens: z.number().int(),
      completionTokens: z.number().int(),
      totalTokens: z.number().int()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        promptTokens: "prompt_tokens",
        completionTokens: "completion_tokens",
        totalTokens: "total_tokens"
      });
    });
    var UsageInfo$;
    (function(UsageInfo$2) {
      UsageInfo$2.inboundSchema = exports.UsageInfo$inboundSchema;
      UsageInfo$2.outboundSchema = exports.UsageInfo$outboundSchema;
    })(UsageInfo$ || (exports.UsageInfo$ = UsageInfo$ = {}));
    function usageInfoToJSON(usageInfo) {
      return JSON.stringify(exports.UsageInfo$outboundSchema.parse(usageInfo));
    }
    function usageInfoFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UsageInfo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UsageInfo' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/chatcompletionresponse.js
var require_chatcompletionresponse = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/chatcompletionresponse.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChatCompletionResponse$ = exports.ChatCompletionResponse$outboundSchema = exports.ChatCompletionResponse$inboundSchema = void 0;
    exports.chatCompletionResponseToJSON = chatCompletionResponseToJSON;
    exports.chatCompletionResponseFromJSON = chatCompletionResponseFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var chatcompletionchoice_js_1 = require_chatcompletionchoice();
    var usageinfo_js_1 = require_usageinfo();
    exports.ChatCompletionResponse$inboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      model: z.string(),
      usage: usageinfo_js_1.UsageInfo$inboundSchema,
      created: z.number().int().optional(),
      choices: z.array(chatcompletionchoice_js_1.ChatCompletionChoice$inboundSchema).optional()
    });
    exports.ChatCompletionResponse$outboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      model: z.string(),
      usage: usageinfo_js_1.UsageInfo$outboundSchema,
      created: z.number().int().optional(),
      choices: z.array(chatcompletionchoice_js_1.ChatCompletionChoice$outboundSchema).optional()
    });
    var ChatCompletionResponse$;
    (function(ChatCompletionResponse$2) {
      ChatCompletionResponse$2.inboundSchema = exports.ChatCompletionResponse$inboundSchema;
      ChatCompletionResponse$2.outboundSchema = exports.ChatCompletionResponse$outboundSchema;
    })(ChatCompletionResponse$ || (exports.ChatCompletionResponse$ = ChatCompletionResponse$ = {}));
    function chatCompletionResponseToJSON(chatCompletionResponse) {
      return JSON.stringify(exports.ChatCompletionResponse$outboundSchema.parse(chatCompletionResponse));
    }
    function chatCompletionResponseFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatCompletionResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatCompletionResponse' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/chatcompletionstreamrequest.js
var require_chatcompletionstreamrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/chatcompletionstreamrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChatCompletionStreamRequest$ = exports.ChatCompletionStreamRequest$outboundSchema = exports.ChatCompletionStreamRequest$inboundSchema = exports.ChatCompletionStreamRequestToolChoice$ = exports.ChatCompletionStreamRequestToolChoice$outboundSchema = exports.ChatCompletionStreamRequestToolChoice$inboundSchema = exports.ChatCompletionStreamRequestMessages$ = exports.ChatCompletionStreamRequestMessages$outboundSchema = exports.ChatCompletionStreamRequestMessages$inboundSchema = exports.ChatCompletionStreamRequestStop$ = exports.ChatCompletionStreamRequestStop$outboundSchema = exports.ChatCompletionStreamRequestStop$inboundSchema = void 0;
    exports.chatCompletionStreamRequestStopToJSON = chatCompletionStreamRequestStopToJSON;
    exports.chatCompletionStreamRequestStopFromJSON = chatCompletionStreamRequestStopFromJSON;
    exports.chatCompletionStreamRequestMessagesToJSON = chatCompletionStreamRequestMessagesToJSON;
    exports.chatCompletionStreamRequestMessagesFromJSON = chatCompletionStreamRequestMessagesFromJSON;
    exports.chatCompletionStreamRequestToolChoiceToJSON = chatCompletionStreamRequestToolChoiceToJSON;
    exports.chatCompletionStreamRequestToolChoiceFromJSON = chatCompletionStreamRequestToolChoiceFromJSON;
    exports.chatCompletionStreamRequestToJSON = chatCompletionStreamRequestToJSON;
    exports.chatCompletionStreamRequestFromJSON = chatCompletionStreamRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var assistantmessage_js_1 = require_assistantmessage();
    var prediction_js_1 = require_prediction();
    var responseformat_js_1 = require_responseformat();
    var systemmessage_js_1 = require_systemmessage();
    var tool_js_1 = require_tool();
    var toolchoice_js_1 = require_toolchoice();
    var toolchoiceenum_js_1 = require_toolchoiceenum();
    var toolmessage_js_1 = require_toolmessage();
    var usermessage_js_1 = require_usermessage();
    exports.ChatCompletionStreamRequestStop$inboundSchema = z.union([z.string(), z.array(z.string())]);
    exports.ChatCompletionStreamRequestStop$outboundSchema = z.union([z.string(), z.array(z.string())]);
    var ChatCompletionStreamRequestStop$;
    (function(ChatCompletionStreamRequestStop$2) {
      ChatCompletionStreamRequestStop$2.inboundSchema = exports.ChatCompletionStreamRequestStop$inboundSchema;
      ChatCompletionStreamRequestStop$2.outboundSchema = exports.ChatCompletionStreamRequestStop$outboundSchema;
    })(ChatCompletionStreamRequestStop$ || (exports.ChatCompletionStreamRequestStop$ = ChatCompletionStreamRequestStop$ = {}));
    function chatCompletionStreamRequestStopToJSON(chatCompletionStreamRequestStop) {
      return JSON.stringify(exports.ChatCompletionStreamRequestStop$outboundSchema.parse(chatCompletionStreamRequestStop));
    }
    function chatCompletionStreamRequestStopFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatCompletionStreamRequestStop$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatCompletionStreamRequestStop' from JSON`);
    }
    exports.ChatCompletionStreamRequestMessages$inboundSchema = z.union([
      systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
      assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })))
    ]);
    exports.ChatCompletionStreamRequestMessages$outboundSchema = z.union([
      systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))),
      assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({ role: v.role })))
    ]);
    var ChatCompletionStreamRequestMessages$;
    (function(ChatCompletionStreamRequestMessages$2) {
      ChatCompletionStreamRequestMessages$2.inboundSchema = exports.ChatCompletionStreamRequestMessages$inboundSchema;
      ChatCompletionStreamRequestMessages$2.outboundSchema = exports.ChatCompletionStreamRequestMessages$outboundSchema;
    })(ChatCompletionStreamRequestMessages$ || (exports.ChatCompletionStreamRequestMessages$ = ChatCompletionStreamRequestMessages$ = {}));
    function chatCompletionStreamRequestMessagesToJSON(chatCompletionStreamRequestMessages) {
      return JSON.stringify(exports.ChatCompletionStreamRequestMessages$outboundSchema.parse(chatCompletionStreamRequestMessages));
    }
    function chatCompletionStreamRequestMessagesFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatCompletionStreamRequestMessages$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatCompletionStreamRequestMessages' from JSON`);
    }
    exports.ChatCompletionStreamRequestToolChoice$inboundSchema = z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]);
    exports.ChatCompletionStreamRequestToolChoice$outboundSchema = z.union([toolchoice_js_1.ToolChoice$outboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema]);
    var ChatCompletionStreamRequestToolChoice$;
    (function(ChatCompletionStreamRequestToolChoice$2) {
      ChatCompletionStreamRequestToolChoice$2.inboundSchema = exports.ChatCompletionStreamRequestToolChoice$inboundSchema;
      ChatCompletionStreamRequestToolChoice$2.outboundSchema = exports.ChatCompletionStreamRequestToolChoice$outboundSchema;
    })(ChatCompletionStreamRequestToolChoice$ || (exports.ChatCompletionStreamRequestToolChoice$ = ChatCompletionStreamRequestToolChoice$ = {}));
    function chatCompletionStreamRequestToolChoiceToJSON(chatCompletionStreamRequestToolChoice) {
      return JSON.stringify(exports.ChatCompletionStreamRequestToolChoice$outboundSchema.parse(chatCompletionStreamRequestToolChoice));
    }
    function chatCompletionStreamRequestToolChoiceFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatCompletionStreamRequestToolChoice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatCompletionStreamRequestToolChoice' from JSON`);
    }
    exports.ChatCompletionStreamRequest$inboundSchema = z.object({
      model: z.string(),
      temperature: z.nullable(z.number()).optional(),
      top_p: z.number().optional(),
      max_tokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(true),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      random_seed: z.nullable(z.number().int()).optional(),
      messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      response_format: responseformat_js_1.ResponseFormat$inboundSchema.optional(),
      tools: z.nullable(z.array(tool_js_1.Tool$inboundSchema)).optional(),
      tool_choice: z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]).optional(),
      presence_penalty: z.number().optional(),
      frequency_penalty: z.number().optional(),
      n: z.nullable(z.number().int()).optional(),
      prediction: prediction_js_1.Prediction$inboundSchema.optional(),
      safe_prompt: z.boolean().optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "top_p": "topP",
        "max_tokens": "maxTokens",
        "random_seed": "randomSeed",
        "response_format": "responseFormat",
        "tool_choice": "toolChoice",
        "presence_penalty": "presencePenalty",
        "frequency_penalty": "frequencyPenalty",
        "safe_prompt": "safePrompt"
      });
    });
    exports.ChatCompletionStreamRequest$outboundSchema = z.object({
      model: z.string(),
      temperature: z.nullable(z.number()).optional(),
      topP: z.number().optional(),
      maxTokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(true),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      randomSeed: z.nullable(z.number().int()).optional(),
      messages: z.array(z.union([
        systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      responseFormat: responseformat_js_1.ResponseFormat$outboundSchema.optional(),
      tools: z.nullable(z.array(tool_js_1.Tool$outboundSchema)).optional(),
      toolChoice: z.union([
        toolchoice_js_1.ToolChoice$outboundSchema,
        toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema
      ]).optional(),
      presencePenalty: z.number().optional(),
      frequencyPenalty: z.number().optional(),
      n: z.nullable(z.number().int()).optional(),
      prediction: prediction_js_1.Prediction$outboundSchema.optional(),
      safePrompt: z.boolean().optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        topP: "top_p",
        maxTokens: "max_tokens",
        randomSeed: "random_seed",
        responseFormat: "response_format",
        toolChoice: "tool_choice",
        presencePenalty: "presence_penalty",
        frequencyPenalty: "frequency_penalty",
        safePrompt: "safe_prompt"
      });
    });
    var ChatCompletionStreamRequest$;
    (function(ChatCompletionStreamRequest$2) {
      ChatCompletionStreamRequest$2.inboundSchema = exports.ChatCompletionStreamRequest$inboundSchema;
      ChatCompletionStreamRequest$2.outboundSchema = exports.ChatCompletionStreamRequest$outboundSchema;
    })(ChatCompletionStreamRequest$ || (exports.ChatCompletionStreamRequest$ = ChatCompletionStreamRequest$ = {}));
    function chatCompletionStreamRequestToJSON(chatCompletionStreamRequest) {
      return JSON.stringify(exports.ChatCompletionStreamRequest$outboundSchema.parse(chatCompletionStreamRequest));
    }
    function chatCompletionStreamRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatCompletionStreamRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatCompletionStreamRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/chatmoderationrequest.js
var require_chatmoderationrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/chatmoderationrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChatModerationRequest$ = exports.ChatModerationRequest$outboundSchema = exports.ChatModerationRequest$inboundSchema = exports.ChatModerationRequestInputs$ = exports.ChatModerationRequestInputs$outboundSchema = exports.ChatModerationRequestInputs$inboundSchema = exports.One$ = exports.One$outboundSchema = exports.One$inboundSchema = exports.Two$ = exports.Two$outboundSchema = exports.Two$inboundSchema = void 0;
    exports.twoToJSON = twoToJSON;
    exports.twoFromJSON = twoFromJSON;
    exports.oneToJSON = oneToJSON;
    exports.oneFromJSON = oneFromJSON;
    exports.chatModerationRequestInputsToJSON = chatModerationRequestInputsToJSON;
    exports.chatModerationRequestInputsFromJSON = chatModerationRequestInputsFromJSON;
    exports.chatModerationRequestToJSON = chatModerationRequestToJSON;
    exports.chatModerationRequestFromJSON = chatModerationRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var assistantmessage_js_1 = require_assistantmessage();
    var systemmessage_js_1 = require_systemmessage();
    var toolmessage_js_1 = require_toolmessage();
    var usermessage_js_1 = require_usermessage();
    exports.Two$inboundSchema = z.union([
      systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
        role: v.role
      }))),
      assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
        role: v.role
      })))
    ]);
    exports.Two$outboundSchema = z.union([
      systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
        role: v.role
      }))),
      assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
        role: v.role
      })))
    ]);
    var Two$;
    (function(Two$2) {
      Two$2.inboundSchema = exports.Two$inboundSchema;
      Two$2.outboundSchema = exports.Two$outboundSchema;
    })(Two$ || (exports.Two$ = Two$ = {}));
    function twoToJSON(two) {
      return JSON.stringify(exports.Two$outboundSchema.parse(two));
    }
    function twoFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Two$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Two' from JSON`);
    }
    exports.One$inboundSchema = z.union([
      systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
        role: v.role
      }))),
      assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
        role: v.role
      })))
    ]);
    exports.One$outboundSchema = z.union([
      systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
        role: v.role
      }))),
      usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
        role: v.role
      }))),
      assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
        role: v.role
      }))),
      toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
        role: v.role
      })))
    ]);
    var One$;
    (function(One$2) {
      One$2.inboundSchema = exports.One$inboundSchema;
      One$2.outboundSchema = exports.One$outboundSchema;
    })(One$ || (exports.One$ = One$ = {}));
    function oneToJSON(one) {
      return JSON.stringify(exports.One$outboundSchema.parse(one));
    }
    function oneFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.One$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'One' from JSON`);
    }
    exports.ChatModerationRequestInputs$inboundSchema = z.union([
      z.array(z.union([
        systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      z.array(z.array(z.union([
        systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])))
    ]);
    exports.ChatModerationRequestInputs$outboundSchema = z.union([
      z.array(z.union([
        systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])),
      z.array(z.array(z.union([
        systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
          role: v.role
        }))),
        usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
          role: v.role
        }))),
        assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
          role: v.role
        }))),
        toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
          role: v.role
        })))
      ])))
    ]);
    var ChatModerationRequestInputs$;
    (function(ChatModerationRequestInputs$2) {
      ChatModerationRequestInputs$2.inboundSchema = exports.ChatModerationRequestInputs$inboundSchema;
      ChatModerationRequestInputs$2.outboundSchema = exports.ChatModerationRequestInputs$outboundSchema;
    })(ChatModerationRequestInputs$ || (exports.ChatModerationRequestInputs$ = ChatModerationRequestInputs$ = {}));
    function chatModerationRequestInputsToJSON(chatModerationRequestInputs) {
      return JSON.stringify(exports.ChatModerationRequestInputs$outboundSchema.parse(chatModerationRequestInputs));
    }
    function chatModerationRequestInputsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatModerationRequestInputs$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatModerationRequestInputs' from JSON`);
    }
    exports.ChatModerationRequest$inboundSchema = z.object({
      model: z.string(),
      input: z.union([
        z.array(z.union([
          systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
            role: v.role
          }))),
          usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
            role: v.role
          }))),
          assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
            role: v.role
          }))),
          toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
            role: v.role
          })))
        ])),
        z.array(z.array(z.union([
          systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
            role: v.role
          }))),
          usermessage_js_1.UserMessage$inboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
            role: v.role
          }))),
          assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
            role: v.role
          }))),
          toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
            role: v.role
          })))
        ])))
      ]),
      truncate_for_context_length: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "input": "inputs",
        "truncate_for_context_length": "truncateForContextLength"
      });
    });
    exports.ChatModerationRequest$outboundSchema = z.object({
      model: z.string(),
      inputs: z.union([
        z.array(z.union([
          systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
            role: v.role
          }))),
          usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
            role: v.role
          }))),
          assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
            role: v.role
          }))),
          toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
            role: v.role
          })))
        ])),
        z.array(z.array(z.union([
          systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({ role: z.literal("system") }).transform((v) => ({
            role: v.role
          }))),
          usermessage_js_1.UserMessage$outboundSchema.and(z.object({ role: z.literal("user") }).transform((v) => ({
            role: v.role
          }))),
          assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({ role: z.literal("assistant") }).transform((v) => ({
            role: v.role
          }))),
          toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({ role: z.literal("tool") }).transform((v) => ({
            role: v.role
          })))
        ])))
      ]),
      truncateForContextLength: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        inputs: "input",
        truncateForContextLength: "truncate_for_context_length"
      });
    });
    var ChatModerationRequest$;
    (function(ChatModerationRequest$2) {
      ChatModerationRequest$2.inboundSchema = exports.ChatModerationRequest$inboundSchema;
      ChatModerationRequest$2.outboundSchema = exports.ChatModerationRequest$outboundSchema;
    })(ChatModerationRequest$ || (exports.ChatModerationRequest$ = ChatModerationRequest$ = {}));
    function chatModerationRequestToJSON(chatModerationRequest) {
      return JSON.stringify(exports.ChatModerationRequest$outboundSchema.parse(chatModerationRequest));
    }
    function chatModerationRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ChatModerationRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ChatModerationRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/metricout.js
var require_metricout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/metricout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MetricOut$ = exports.MetricOut$outboundSchema = exports.MetricOut$inboundSchema = void 0;
    exports.metricOutToJSON = metricOutToJSON;
    exports.metricOutFromJSON = metricOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.MetricOut$inboundSchema = z.object({
      train_loss: z.nullable(z.number()).optional(),
      valid_loss: z.nullable(z.number()).optional(),
      valid_mean_token_accuracy: z.nullable(z.number()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "train_loss": "trainLoss",
        "valid_loss": "validLoss",
        "valid_mean_token_accuracy": "validMeanTokenAccuracy"
      });
    });
    exports.MetricOut$outboundSchema = z.object({
      trainLoss: z.nullable(z.number()).optional(),
      validLoss: z.nullable(z.number()).optional(),
      validMeanTokenAccuracy: z.nullable(z.number()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        trainLoss: "train_loss",
        validLoss: "valid_loss",
        validMeanTokenAccuracy: "valid_mean_token_accuracy"
      });
    });
    var MetricOut$;
    (function(MetricOut$2) {
      MetricOut$2.inboundSchema = exports.MetricOut$inboundSchema;
      MetricOut$2.outboundSchema = exports.MetricOut$outboundSchema;
    })(MetricOut$ || (exports.MetricOut$ = MetricOut$ = {}));
    function metricOutToJSON(metricOut) {
      return JSON.stringify(exports.MetricOut$outboundSchema.parse(metricOut));
    }
    function metricOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.MetricOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'MetricOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/checkpointout.js
var require_checkpointout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/checkpointout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CheckpointOut$ = exports.CheckpointOut$outboundSchema = exports.CheckpointOut$inboundSchema = void 0;
    exports.checkpointOutToJSON = checkpointOutToJSON;
    exports.checkpointOutFromJSON = checkpointOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var metricout_js_1 = require_metricout();
    exports.CheckpointOut$inboundSchema = z.object({
      metrics: metricout_js_1.MetricOut$inboundSchema,
      step_number: z.number().int(),
      created_at: z.number().int()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "step_number": "stepNumber",
        "created_at": "createdAt"
      });
    });
    exports.CheckpointOut$outboundSchema = z.object({
      metrics: metricout_js_1.MetricOut$outboundSchema,
      stepNumber: z.number().int(),
      createdAt: z.number().int()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        stepNumber: "step_number",
        createdAt: "created_at"
      });
    });
    var CheckpointOut$;
    (function(CheckpointOut$2) {
      CheckpointOut$2.inboundSchema = exports.CheckpointOut$inboundSchema;
      CheckpointOut$2.outboundSchema = exports.CheckpointOut$outboundSchema;
    })(CheckpointOut$ || (exports.CheckpointOut$ = CheckpointOut$ = {}));
    function checkpointOutToJSON(checkpointOut) {
      return JSON.stringify(exports.CheckpointOut$outboundSchema.parse(checkpointOut));
    }
    function checkpointOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CheckpointOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckpointOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/classificationobject.js
var require_classificationobject = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/classificationobject.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClassificationObject$ = exports.ClassificationObject$outboundSchema = exports.ClassificationObject$inboundSchema = void 0;
    exports.classificationObjectToJSON = classificationObjectToJSON;
    exports.classificationObjectFromJSON = classificationObjectFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.ClassificationObject$inboundSchema = z.object({
      categories: z.record(z.boolean()).optional(),
      category_scores: z.record(z.number()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "category_scores": "categoryScores"
      });
    });
    exports.ClassificationObject$outboundSchema = z.object({
      categories: z.record(z.boolean()).optional(),
      categoryScores: z.record(z.number()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        categoryScores: "category_scores"
      });
    });
    var ClassificationObject$;
    (function(ClassificationObject$2) {
      ClassificationObject$2.inboundSchema = exports.ClassificationObject$inboundSchema;
      ClassificationObject$2.outboundSchema = exports.ClassificationObject$outboundSchema;
    })(ClassificationObject$ || (exports.ClassificationObject$ = ClassificationObject$ = {}));
    function classificationObjectToJSON(classificationObject) {
      return JSON.stringify(exports.ClassificationObject$outboundSchema.parse(classificationObject));
    }
    function classificationObjectFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ClassificationObject$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ClassificationObject' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/classificationrequest.js
var require_classificationrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/classificationrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClassificationRequest$ = exports.ClassificationRequest$outboundSchema = exports.ClassificationRequest$inboundSchema = exports.ClassificationRequestInputs$ = exports.ClassificationRequestInputs$outboundSchema = exports.ClassificationRequestInputs$inboundSchema = void 0;
    exports.classificationRequestInputsToJSON = classificationRequestInputsToJSON;
    exports.classificationRequestInputsFromJSON = classificationRequestInputsFromJSON;
    exports.classificationRequestToJSON = classificationRequestToJSON;
    exports.classificationRequestFromJSON = classificationRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.ClassificationRequestInputs$inboundSchema = z.union([z.string(), z.array(z.string())]);
    exports.ClassificationRequestInputs$outboundSchema = z.union([z.string(), z.array(z.string())]);
    var ClassificationRequestInputs$;
    (function(ClassificationRequestInputs$2) {
      ClassificationRequestInputs$2.inboundSchema = exports.ClassificationRequestInputs$inboundSchema;
      ClassificationRequestInputs$2.outboundSchema = exports.ClassificationRequestInputs$outboundSchema;
    })(ClassificationRequestInputs$ || (exports.ClassificationRequestInputs$ = ClassificationRequestInputs$ = {}));
    function classificationRequestInputsToJSON(classificationRequestInputs) {
      return JSON.stringify(exports.ClassificationRequestInputs$outboundSchema.parse(classificationRequestInputs));
    }
    function classificationRequestInputsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ClassificationRequestInputs$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ClassificationRequestInputs' from JSON`);
    }
    exports.ClassificationRequest$inboundSchema = z.object({
      model: z.string(),
      input: z.union([z.string(), z.array(z.string())])
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "input": "inputs"
      });
    });
    exports.ClassificationRequest$outboundSchema = z.object({
      model: z.string(),
      inputs: z.union([z.string(), z.array(z.string())])
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        inputs: "input"
      });
    });
    var ClassificationRequest$;
    (function(ClassificationRequest$2) {
      ClassificationRequest$2.inboundSchema = exports.ClassificationRequest$inboundSchema;
      ClassificationRequest$2.outboundSchema = exports.ClassificationRequest$outboundSchema;
    })(ClassificationRequest$ || (exports.ClassificationRequest$ = ClassificationRequest$ = {}));
    function classificationRequestToJSON(classificationRequest) {
      return JSON.stringify(exports.ClassificationRequest$outboundSchema.parse(classificationRequest));
    }
    function classificationRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ClassificationRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ClassificationRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/classificationresponse.js
var require_classificationresponse = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/classificationresponse.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClassificationResponse$ = exports.ClassificationResponse$outboundSchema = exports.ClassificationResponse$inboundSchema = void 0;
    exports.classificationResponseToJSON = classificationResponseToJSON;
    exports.classificationResponseFromJSON = classificationResponseFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var classificationobject_js_1 = require_classificationobject();
    exports.ClassificationResponse$inboundSchema = z.object({
      id: z.string().optional(),
      model: z.string().optional(),
      results: z.array(classificationobject_js_1.ClassificationObject$inboundSchema).optional()
    });
    exports.ClassificationResponse$outboundSchema = z.object({
      id: z.string().optional(),
      model: z.string().optional(),
      results: z.array(classificationobject_js_1.ClassificationObject$outboundSchema).optional()
    });
    var ClassificationResponse$;
    (function(ClassificationResponse$2) {
      ClassificationResponse$2.inboundSchema = exports.ClassificationResponse$inboundSchema;
      ClassificationResponse$2.outboundSchema = exports.ClassificationResponse$outboundSchema;
    })(ClassificationResponse$ || (exports.ClassificationResponse$ = ClassificationResponse$ = {}));
    function classificationResponseToJSON(classificationResponse) {
      return JSON.stringify(exports.ClassificationResponse$outboundSchema.parse(classificationResponse));
    }
    function classificationResponseFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ClassificationResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ClassificationResponse' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/deltamessage.js
var require_deltamessage = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/deltamessage.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeltaMessage$ = exports.DeltaMessage$outboundSchema = exports.DeltaMessage$inboundSchema = exports.Content$ = exports.Content$outboundSchema = exports.Content$inboundSchema = void 0;
    exports.contentToJSON = contentToJSON;
    exports.contentFromJSON = contentFromJSON;
    exports.deltaMessageToJSON = deltaMessageToJSON;
    exports.deltaMessageFromJSON = deltaMessageFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var contentchunk_js_1 = require_contentchunk();
    var toolcall_js_1 = require_toolcall();
    exports.Content$inboundSchema = z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$inboundSchema)]);
    exports.Content$outboundSchema = z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$outboundSchema)]);
    var Content$;
    (function(Content$2) {
      Content$2.inboundSchema = exports.Content$inboundSchema;
      Content$2.outboundSchema = exports.Content$outboundSchema;
    })(Content$ || (exports.Content$ = Content$ = {}));
    function contentToJSON(content) {
      return JSON.stringify(exports.Content$outboundSchema.parse(content));
    }
    function contentFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Content$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Content' from JSON`);
    }
    exports.DeltaMessage$inboundSchema = z.object({
      role: z.nullable(z.string()).optional(),
      content: z.nullable(z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$inboundSchema)])).optional(),
      tool_calls: z.nullable(z.array(toolcall_js_1.ToolCall$inboundSchema)).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "tool_calls": "toolCalls"
      });
    });
    exports.DeltaMessage$outboundSchema = z.object({
      role: z.nullable(z.string()).optional(),
      content: z.nullable(z.union([z.string(), z.array(contentchunk_js_1.ContentChunk$outboundSchema)])).optional(),
      toolCalls: z.nullable(z.array(toolcall_js_1.ToolCall$outboundSchema)).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        toolCalls: "tool_calls"
      });
    });
    var DeltaMessage$;
    (function(DeltaMessage$2) {
      DeltaMessage$2.inboundSchema = exports.DeltaMessage$inboundSchema;
      DeltaMessage$2.outboundSchema = exports.DeltaMessage$outboundSchema;
    })(DeltaMessage$ || (exports.DeltaMessage$ = DeltaMessage$ = {}));
    function deltaMessageToJSON(deltaMessage) {
      return JSON.stringify(exports.DeltaMessage$outboundSchema.parse(deltaMessage));
    }
    function deltaMessageFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DeltaMessage$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeltaMessage' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/completionresponsestreamchoice.js
var require_completionresponsestreamchoice = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/completionresponsestreamchoice.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CompletionResponseStreamChoice$ = exports.CompletionResponseStreamChoice$outboundSchema = exports.CompletionResponseStreamChoice$inboundSchema = exports.CompletionResponseStreamChoiceFinishReason$ = exports.CompletionResponseStreamChoiceFinishReason$outboundSchema = exports.CompletionResponseStreamChoiceFinishReason$inboundSchema = exports.CompletionResponseStreamChoiceFinishReason = void 0;
    exports.completionResponseStreamChoiceToJSON = completionResponseStreamChoiceToJSON;
    exports.completionResponseStreamChoiceFromJSON = completionResponseStreamChoiceFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var enums_js_1 = require_enums();
    var deltamessage_js_1 = require_deltamessage();
    exports.CompletionResponseStreamChoiceFinishReason = {
      Stop: "stop",
      Length: "length",
      Error: "error",
      ToolCalls: "tool_calls"
    };
    exports.CompletionResponseStreamChoiceFinishReason$inboundSchema = z.union([
      z.nativeEnum(exports.CompletionResponseStreamChoiceFinishReason),
      z.string().transform(enums_js_1.catchUnrecognizedEnum)
    ]);
    exports.CompletionResponseStreamChoiceFinishReason$outboundSchema = z.union([
      z.nativeEnum(exports.CompletionResponseStreamChoiceFinishReason),
      z.string().and(z.custom())
    ]);
    var CompletionResponseStreamChoiceFinishReason$;
    (function(CompletionResponseStreamChoiceFinishReason$2) {
      CompletionResponseStreamChoiceFinishReason$2.inboundSchema = exports.CompletionResponseStreamChoiceFinishReason$inboundSchema;
      CompletionResponseStreamChoiceFinishReason$2.outboundSchema = exports.CompletionResponseStreamChoiceFinishReason$outboundSchema;
    })(CompletionResponseStreamChoiceFinishReason$ || (exports.CompletionResponseStreamChoiceFinishReason$ = CompletionResponseStreamChoiceFinishReason$ = {}));
    exports.CompletionResponseStreamChoice$inboundSchema = z.object({
      index: z.number().int(),
      delta: deltamessage_js_1.DeltaMessage$inboundSchema,
      finish_reason: z.nullable(exports.CompletionResponseStreamChoiceFinishReason$inboundSchema)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "finish_reason": "finishReason"
      });
    });
    exports.CompletionResponseStreamChoice$outboundSchema = z.object({
      index: z.number().int(),
      delta: deltamessage_js_1.DeltaMessage$outboundSchema,
      finishReason: z.nullable(exports.CompletionResponseStreamChoiceFinishReason$outboundSchema)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        finishReason: "finish_reason"
      });
    });
    var CompletionResponseStreamChoice$;
    (function(CompletionResponseStreamChoice$2) {
      CompletionResponseStreamChoice$2.inboundSchema = exports.CompletionResponseStreamChoice$inboundSchema;
      CompletionResponseStreamChoice$2.outboundSchema = exports.CompletionResponseStreamChoice$outboundSchema;
    })(CompletionResponseStreamChoice$ || (exports.CompletionResponseStreamChoice$ = CompletionResponseStreamChoice$ = {}));
    function completionResponseStreamChoiceToJSON(completionResponseStreamChoice) {
      return JSON.stringify(exports.CompletionResponseStreamChoice$outboundSchema.parse(completionResponseStreamChoice));
    }
    function completionResponseStreamChoiceFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CompletionResponseStreamChoice$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompletionResponseStreamChoice' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/completionchunk.js
var require_completionchunk = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/completionchunk.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CompletionChunk$ = exports.CompletionChunk$outboundSchema = exports.CompletionChunk$inboundSchema = void 0;
    exports.completionChunkToJSON = completionChunkToJSON;
    exports.completionChunkFromJSON = completionChunkFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var completionresponsestreamchoice_js_1 = require_completionresponsestreamchoice();
    var usageinfo_js_1 = require_usageinfo();
    exports.CompletionChunk$inboundSchema = z.object({
      id: z.string(),
      object: z.string().optional(),
      created: z.number().int().optional(),
      model: z.string(),
      usage: usageinfo_js_1.UsageInfo$inboundSchema.optional(),
      choices: z.array(completionresponsestreamchoice_js_1.CompletionResponseStreamChoice$inboundSchema)
    });
    exports.CompletionChunk$outboundSchema = z.object({
      id: z.string(),
      object: z.string().optional(),
      created: z.number().int().optional(),
      model: z.string(),
      usage: usageinfo_js_1.UsageInfo$outboundSchema.optional(),
      choices: z.array(completionresponsestreamchoice_js_1.CompletionResponseStreamChoice$outboundSchema)
    });
    var CompletionChunk$;
    (function(CompletionChunk$2) {
      CompletionChunk$2.inboundSchema = exports.CompletionChunk$inboundSchema;
      CompletionChunk$2.outboundSchema = exports.CompletionChunk$outboundSchema;
    })(CompletionChunk$ || (exports.CompletionChunk$ = CompletionChunk$ = {}));
    function completionChunkToJSON(completionChunk) {
      return JSON.stringify(exports.CompletionChunk$outboundSchema.parse(completionChunk));
    }
    function completionChunkFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CompletionChunk$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompletionChunk' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/completionevent.js
var require_completionevent = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/completionevent.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CompletionEvent$ = exports.CompletionEvent$outboundSchema = exports.CompletionEvent$inboundSchema = void 0;
    exports.completionEventToJSON = completionEventToJSON;
    exports.completionEventFromJSON = completionEventFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var completionchunk_js_1 = require_completionchunk();
    exports.CompletionEvent$inboundSchema = z.object({
      data: z.string().transform((v, ctx) => {
        try {
          return JSON.parse(v);
        } catch (err) {
          ctx.addIssue({
            code: z.ZodIssueCode.custom,
            message: `malformed json: ${err}`
          });
          return z.NEVER;
        }
      }).pipe(completionchunk_js_1.CompletionChunk$inboundSchema)
    });
    exports.CompletionEvent$outboundSchema = z.object({
      data: completionchunk_js_1.CompletionChunk$outboundSchema
    });
    var CompletionEvent$;
    (function(CompletionEvent$2) {
      CompletionEvent$2.inboundSchema = exports.CompletionEvent$inboundSchema;
      CompletionEvent$2.outboundSchema = exports.CompletionEvent$outboundSchema;
    })(CompletionEvent$ || (exports.CompletionEvent$ = CompletionEvent$ = {}));
    function completionEventToJSON(completionEvent) {
      return JSON.stringify(exports.CompletionEvent$outboundSchema.parse(completionEvent));
    }
    function completionEventFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CompletionEvent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CompletionEvent' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/deletefileout.js
var require_deletefileout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/deletefileout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteFileOut$ = exports.DeleteFileOut$outboundSchema = exports.DeleteFileOut$inboundSchema = void 0;
    exports.deleteFileOutToJSON = deleteFileOutToJSON;
    exports.deleteFileOutFromJSON = deleteFileOutFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.DeleteFileOut$inboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      deleted: z.boolean()
    });
    exports.DeleteFileOut$outboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      deleted: z.boolean()
    });
    var DeleteFileOut$;
    (function(DeleteFileOut$2) {
      DeleteFileOut$2.inboundSchema = exports.DeleteFileOut$inboundSchema;
      DeleteFileOut$2.outboundSchema = exports.DeleteFileOut$outboundSchema;
    })(DeleteFileOut$ || (exports.DeleteFileOut$ = DeleteFileOut$ = {}));
    function deleteFileOutToJSON(deleteFileOut) {
      return JSON.stringify(exports.DeleteFileOut$outboundSchema.parse(deleteFileOut));
    }
    function deleteFileOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DeleteFileOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteFileOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/deletemodelout.js
var require_deletemodelout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/deletemodelout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteModelOut$ = exports.DeleteModelOut$outboundSchema = exports.DeleteModelOut$inboundSchema = void 0;
    exports.deleteModelOutToJSON = deleteModelOutToJSON;
    exports.deleteModelOutFromJSON = deleteModelOutFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.DeleteModelOut$inboundSchema = z.object({
      id: z.string(),
      object: z.string().default("model"),
      deleted: z.boolean().default(true)
    });
    exports.DeleteModelOut$outboundSchema = z.object({
      id: z.string(),
      object: z.string().default("model"),
      deleted: z.boolean().default(true)
    });
    var DeleteModelOut$;
    (function(DeleteModelOut$2) {
      DeleteModelOut$2.inboundSchema = exports.DeleteModelOut$inboundSchema;
      DeleteModelOut$2.outboundSchema = exports.DeleteModelOut$outboundSchema;
    })(DeleteModelOut$ || (exports.DeleteModelOut$ = DeleteModelOut$ = {}));
    function deleteModelOutToJSON(deleteModelOut) {
      return JSON.stringify(exports.DeleteModelOut$outboundSchema.parse(deleteModelOut));
    }
    function deleteModelOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DeleteModelOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteModelOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/eventout.js
var require_eventout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/eventout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventOut$ = exports.EventOut$outboundSchema = exports.EventOut$inboundSchema = void 0;
    exports.eventOutToJSON = eventOutToJSON;
    exports.eventOutFromJSON = eventOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.EventOut$inboundSchema = z.object({
      name: z.string(),
      data: z.nullable(z.record(z.any())).optional(),
      created_at: z.number().int()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt"
      });
    });
    exports.EventOut$outboundSchema = z.object({
      name: z.string(),
      data: z.nullable(z.record(z.any())).optional(),
      createdAt: z.number().int()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at"
      });
    });
    var EventOut$;
    (function(EventOut$2) {
      EventOut$2.inboundSchema = exports.EventOut$inboundSchema;
      EventOut$2.outboundSchema = exports.EventOut$outboundSchema;
    })(EventOut$ || (exports.EventOut$ = EventOut$ = {}));
    function eventOutToJSON(eventOut) {
      return JSON.stringify(exports.EventOut$outboundSchema.parse(eventOut));
    }
    function eventOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EventOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EventOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/githubrepositoryout.js
var require_githubrepositoryout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/githubrepositoryout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GithubRepositoryOut$ = exports.GithubRepositoryOut$outboundSchema = exports.GithubRepositoryOut$inboundSchema = exports.GithubRepositoryOutType$ = exports.GithubRepositoryOutType$outboundSchema = exports.GithubRepositoryOutType$inboundSchema = exports.GithubRepositoryOutType = void 0;
    exports.githubRepositoryOutToJSON = githubRepositoryOutToJSON;
    exports.githubRepositoryOutFromJSON = githubRepositoryOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.GithubRepositoryOutType = {
      Github: "github"
    };
    exports.GithubRepositoryOutType$inboundSchema = z.nativeEnum(exports.GithubRepositoryOutType);
    exports.GithubRepositoryOutType$outboundSchema = exports.GithubRepositoryOutType$inboundSchema;
    var GithubRepositoryOutType$;
    (function(GithubRepositoryOutType$2) {
      GithubRepositoryOutType$2.inboundSchema = exports.GithubRepositoryOutType$inboundSchema;
      GithubRepositoryOutType$2.outboundSchema = exports.GithubRepositoryOutType$outboundSchema;
    })(GithubRepositoryOutType$ || (exports.GithubRepositoryOutType$ = GithubRepositoryOutType$ = {}));
    exports.GithubRepositoryOut$inboundSchema = z.object({
      type: z.literal("github").default("github"),
      name: z.string(),
      owner: z.string(),
      ref: z.nullable(z.string()).optional(),
      weight: z.number().default(1),
      commit_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "commit_id": "commitId"
      });
    });
    exports.GithubRepositoryOut$outboundSchema = z.object({
      type: z.literal("github").default("github"),
      name: z.string(),
      owner: z.string(),
      ref: z.nullable(z.string()).optional(),
      weight: z.number().default(1),
      commitId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        commitId: "commit_id"
      });
    });
    var GithubRepositoryOut$;
    (function(GithubRepositoryOut$2) {
      GithubRepositoryOut$2.inboundSchema = exports.GithubRepositoryOut$inboundSchema;
      GithubRepositoryOut$2.outboundSchema = exports.GithubRepositoryOut$outboundSchema;
    })(GithubRepositoryOut$ || (exports.GithubRepositoryOut$ = GithubRepositoryOut$ = {}));
    function githubRepositoryOutToJSON(githubRepositoryOut) {
      return JSON.stringify(exports.GithubRepositoryOut$outboundSchema.parse(githubRepositoryOut));
    }
    function githubRepositoryOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GithubRepositoryOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GithubRepositoryOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/jobmetadataout.js
var require_jobmetadataout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/jobmetadataout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobMetadataOut$ = exports.JobMetadataOut$outboundSchema = exports.JobMetadataOut$inboundSchema = void 0;
    exports.jobMetadataOutToJSON = jobMetadataOutToJSON;
    exports.jobMetadataOutFromJSON = jobMetadataOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JobMetadataOut$inboundSchema = z.object({
      expected_duration_seconds: z.nullable(z.number().int()).optional(),
      cost: z.nullable(z.number()).optional(),
      cost_currency: z.nullable(z.string()).optional(),
      train_tokens_per_step: z.nullable(z.number().int()).optional(),
      train_tokens: z.nullable(z.number().int()).optional(),
      data_tokens: z.nullable(z.number().int()).optional(),
      estimated_start_time: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "expected_duration_seconds": "expectedDurationSeconds",
        "cost_currency": "costCurrency",
        "train_tokens_per_step": "trainTokensPerStep",
        "train_tokens": "trainTokens",
        "data_tokens": "dataTokens",
        "estimated_start_time": "estimatedStartTime"
      });
    });
    exports.JobMetadataOut$outboundSchema = z.object({
      expectedDurationSeconds: z.nullable(z.number().int()).optional(),
      cost: z.nullable(z.number()).optional(),
      costCurrency: z.nullable(z.string()).optional(),
      trainTokensPerStep: z.nullable(z.number().int()).optional(),
      trainTokens: z.nullable(z.number().int()).optional(),
      dataTokens: z.nullable(z.number().int()).optional(),
      estimatedStartTime: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        expectedDurationSeconds: "expected_duration_seconds",
        costCurrency: "cost_currency",
        trainTokensPerStep: "train_tokens_per_step",
        trainTokens: "train_tokens",
        dataTokens: "data_tokens",
        estimatedStartTime: "estimated_start_time"
      });
    });
    var JobMetadataOut$;
    (function(JobMetadataOut$2) {
      JobMetadataOut$2.inboundSchema = exports.JobMetadataOut$inboundSchema;
      JobMetadataOut$2.outboundSchema = exports.JobMetadataOut$outboundSchema;
    })(JobMetadataOut$ || (exports.JobMetadataOut$ = JobMetadataOut$ = {}));
    function jobMetadataOutToJSON(jobMetadataOut) {
      return JSON.stringify(exports.JobMetadataOut$outboundSchema.parse(jobMetadataOut));
    }
    function jobMetadataOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobMetadataOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobMetadataOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/trainingparameters.js
var require_trainingparameters = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/trainingparameters.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TrainingParameters$ = exports.TrainingParameters$outboundSchema = exports.TrainingParameters$inboundSchema = void 0;
    exports.trainingParametersToJSON = trainingParametersToJSON;
    exports.trainingParametersFromJSON = trainingParametersFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.TrainingParameters$inboundSchema = z.object({
      training_steps: z.nullable(z.number().int()).optional(),
      learning_rate: z.number().default(1e-4),
      weight_decay: z.nullable(z.number()).optional(),
      warmup_fraction: z.nullable(z.number()).optional(),
      epochs: z.nullable(z.number()).optional(),
      fim_ratio: z.nullable(z.number()).optional(),
      seq_len: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "training_steps": "trainingSteps",
        "learning_rate": "learningRate",
        "weight_decay": "weightDecay",
        "warmup_fraction": "warmupFraction",
        "fim_ratio": "fimRatio",
        "seq_len": "seqLen"
      });
    });
    exports.TrainingParameters$outboundSchema = z.object({
      trainingSteps: z.nullable(z.number().int()).optional(),
      learningRate: z.number().default(1e-4),
      weightDecay: z.nullable(z.number()).optional(),
      warmupFraction: z.nullable(z.number()).optional(),
      epochs: z.nullable(z.number()).optional(),
      fimRatio: z.nullable(z.number()).optional(),
      seqLen: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        trainingSteps: "training_steps",
        learningRate: "learning_rate",
        weightDecay: "weight_decay",
        warmupFraction: "warmup_fraction",
        fimRatio: "fim_ratio",
        seqLen: "seq_len"
      });
    });
    var TrainingParameters$;
    (function(TrainingParameters$2) {
      TrainingParameters$2.inboundSchema = exports.TrainingParameters$inboundSchema;
      TrainingParameters$2.outboundSchema = exports.TrainingParameters$outboundSchema;
    })(TrainingParameters$ || (exports.TrainingParameters$ = TrainingParameters$ = {}));
    function trainingParametersToJSON(trainingParameters) {
      return JSON.stringify(exports.TrainingParameters$outboundSchema.parse(trainingParameters));
    }
    function trainingParametersFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TrainingParameters$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TrainingParameters' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/wandbintegrationout.js
var require_wandbintegrationout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/wandbintegrationout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WandbIntegrationOut$ = exports.WandbIntegrationOut$outboundSchema = exports.WandbIntegrationOut$inboundSchema = exports.WandbIntegrationOutType$ = exports.WandbIntegrationOutType$outboundSchema = exports.WandbIntegrationOutType$inboundSchema = exports.WandbIntegrationOutType = void 0;
    exports.wandbIntegrationOutToJSON = wandbIntegrationOutToJSON;
    exports.wandbIntegrationOutFromJSON = wandbIntegrationOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.WandbIntegrationOutType = {
      Wandb: "wandb"
    };
    exports.WandbIntegrationOutType$inboundSchema = z.nativeEnum(exports.WandbIntegrationOutType);
    exports.WandbIntegrationOutType$outboundSchema = exports.WandbIntegrationOutType$inboundSchema;
    var WandbIntegrationOutType$;
    (function(WandbIntegrationOutType$2) {
      WandbIntegrationOutType$2.inboundSchema = exports.WandbIntegrationOutType$inboundSchema;
      WandbIntegrationOutType$2.outboundSchema = exports.WandbIntegrationOutType$outboundSchema;
    })(WandbIntegrationOutType$ || (exports.WandbIntegrationOutType$ = WandbIntegrationOutType$ = {}));
    exports.WandbIntegrationOut$inboundSchema = z.object({
      type: z.literal("wandb").default("wandb"),
      project: z.string(),
      name: z.nullable(z.string()).optional(),
      run_name: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "run_name": "runName"
      });
    });
    exports.WandbIntegrationOut$outboundSchema = z.object({
      type: z.literal("wandb").default("wandb"),
      project: z.string(),
      name: z.nullable(z.string()).optional(),
      runName: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        runName: "run_name"
      });
    });
    var WandbIntegrationOut$;
    (function(WandbIntegrationOut$2) {
      WandbIntegrationOut$2.inboundSchema = exports.WandbIntegrationOut$inboundSchema;
      WandbIntegrationOut$2.outboundSchema = exports.WandbIntegrationOut$outboundSchema;
    })(WandbIntegrationOut$ || (exports.WandbIntegrationOut$ = WandbIntegrationOut$ = {}));
    function wandbIntegrationOutToJSON(wandbIntegrationOut) {
      return JSON.stringify(exports.WandbIntegrationOut$outboundSchema.parse(wandbIntegrationOut));
    }
    function wandbIntegrationOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.WandbIntegrationOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WandbIntegrationOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/detailedjobout.js
var require_detailedjobout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/detailedjobout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DetailedJobOut$ = exports.DetailedJobOut$outboundSchema = exports.DetailedJobOut$inboundSchema = exports.DetailedJobOutRepositories$ = exports.DetailedJobOutRepositories$outboundSchema = exports.DetailedJobOutRepositories$inboundSchema = exports.DetailedJobOutIntegrations$ = exports.DetailedJobOutIntegrations$outboundSchema = exports.DetailedJobOutIntegrations$inboundSchema = exports.DetailedJobOutObject$ = exports.DetailedJobOutObject$outboundSchema = exports.DetailedJobOutObject$inboundSchema = exports.DetailedJobOutStatus$ = exports.DetailedJobOutStatus$outboundSchema = exports.DetailedJobOutStatus$inboundSchema = exports.DetailedJobOutObject = exports.DetailedJobOutStatus = void 0;
    exports.detailedJobOutIntegrationsToJSON = detailedJobOutIntegrationsToJSON;
    exports.detailedJobOutIntegrationsFromJSON = detailedJobOutIntegrationsFromJSON;
    exports.detailedJobOutRepositoriesToJSON = detailedJobOutRepositoriesToJSON;
    exports.detailedJobOutRepositoriesFromJSON = detailedJobOutRepositoriesFromJSON;
    exports.detailedJobOutToJSON = detailedJobOutToJSON;
    exports.detailedJobOutFromJSON = detailedJobOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var checkpointout_js_1 = require_checkpointout();
    var eventout_js_1 = require_eventout();
    var githubrepositoryout_js_1 = require_githubrepositoryout();
    var jobmetadataout_js_1 = require_jobmetadataout();
    var trainingparameters_js_1 = require_trainingparameters();
    var wandbintegrationout_js_1 = require_wandbintegrationout();
    exports.DetailedJobOutStatus = {
      Queued: "QUEUED",
      Started: "STARTED",
      Validating: "VALIDATING",
      Validated: "VALIDATED",
      Running: "RUNNING",
      FailedValidation: "FAILED_VALIDATION",
      Failed: "FAILED",
      Success: "SUCCESS",
      Cancelled: "CANCELLED",
      CancellationRequested: "CANCELLATION_REQUESTED"
    };
    exports.DetailedJobOutObject = {
      Job: "job"
    };
    exports.DetailedJobOutStatus$inboundSchema = z.nativeEnum(exports.DetailedJobOutStatus);
    exports.DetailedJobOutStatus$outboundSchema = exports.DetailedJobOutStatus$inboundSchema;
    var DetailedJobOutStatus$;
    (function(DetailedJobOutStatus$2) {
      DetailedJobOutStatus$2.inboundSchema = exports.DetailedJobOutStatus$inboundSchema;
      DetailedJobOutStatus$2.outboundSchema = exports.DetailedJobOutStatus$outboundSchema;
    })(DetailedJobOutStatus$ || (exports.DetailedJobOutStatus$ = DetailedJobOutStatus$ = {}));
    exports.DetailedJobOutObject$inboundSchema = z.nativeEnum(exports.DetailedJobOutObject);
    exports.DetailedJobOutObject$outboundSchema = exports.DetailedJobOutObject$inboundSchema;
    var DetailedJobOutObject$;
    (function(DetailedJobOutObject$2) {
      DetailedJobOutObject$2.inboundSchema = exports.DetailedJobOutObject$inboundSchema;
      DetailedJobOutObject$2.outboundSchema = exports.DetailedJobOutObject$outboundSchema;
    })(DetailedJobOutObject$ || (exports.DetailedJobOutObject$ = DetailedJobOutObject$ = {}));
    exports.DetailedJobOutIntegrations$inboundSchema = wandbintegrationout_js_1.WandbIntegrationOut$inboundSchema;
    exports.DetailedJobOutIntegrations$outboundSchema = wandbintegrationout_js_1.WandbIntegrationOut$outboundSchema;
    var DetailedJobOutIntegrations$;
    (function(DetailedJobOutIntegrations$2) {
      DetailedJobOutIntegrations$2.inboundSchema = exports.DetailedJobOutIntegrations$inboundSchema;
      DetailedJobOutIntegrations$2.outboundSchema = exports.DetailedJobOutIntegrations$outboundSchema;
    })(DetailedJobOutIntegrations$ || (exports.DetailedJobOutIntegrations$ = DetailedJobOutIntegrations$ = {}));
    function detailedJobOutIntegrationsToJSON(detailedJobOutIntegrations) {
      return JSON.stringify(exports.DetailedJobOutIntegrations$outboundSchema.parse(detailedJobOutIntegrations));
    }
    function detailedJobOutIntegrationsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DetailedJobOutIntegrations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DetailedJobOutIntegrations' from JSON`);
    }
    exports.DetailedJobOutRepositories$inboundSchema = githubrepositoryout_js_1.GithubRepositoryOut$inboundSchema;
    exports.DetailedJobOutRepositories$outboundSchema = githubrepositoryout_js_1.GithubRepositoryOut$outboundSchema;
    var DetailedJobOutRepositories$;
    (function(DetailedJobOutRepositories$2) {
      DetailedJobOutRepositories$2.inboundSchema = exports.DetailedJobOutRepositories$inboundSchema;
      DetailedJobOutRepositories$2.outboundSchema = exports.DetailedJobOutRepositories$outboundSchema;
    })(DetailedJobOutRepositories$ || (exports.DetailedJobOutRepositories$ = DetailedJobOutRepositories$ = {}));
    function detailedJobOutRepositoriesToJSON(detailedJobOutRepositories) {
      return JSON.stringify(exports.DetailedJobOutRepositories$outboundSchema.parse(detailedJobOutRepositories));
    }
    function detailedJobOutRepositoriesFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DetailedJobOutRepositories$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DetailedJobOutRepositories' from JSON`);
    }
    exports.DetailedJobOut$inboundSchema = z.object({
      id: z.string(),
      auto_start: z.boolean(),
      hyperparameters: trainingparameters_js_1.TrainingParameters$inboundSchema,
      model: z.string(),
      status: exports.DetailedJobOutStatus$inboundSchema,
      job_type: z.string(),
      created_at: z.number().int(),
      modified_at: z.number().int(),
      training_files: z.array(z.string()),
      validation_files: z.nullable(z.array(z.string())).optional(),
      object: z.literal("job").default("job"),
      fine_tuned_model: z.nullable(z.string()).optional(),
      suffix: z.nullable(z.string()).optional(),
      integrations: z.nullable(z.array(wandbintegrationout_js_1.WandbIntegrationOut$inboundSchema)).optional(),
      trained_tokens: z.nullable(z.number().int()).optional(),
      repositories: z.array(githubrepositoryout_js_1.GithubRepositoryOut$inboundSchema).optional(),
      metadata: z.nullable(jobmetadataout_js_1.JobMetadataOut$inboundSchema).optional(),
      events: z.array(eventout_js_1.EventOut$inboundSchema).optional(),
      checkpoints: z.array(checkpointout_js_1.CheckpointOut$inboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "auto_start": "autoStart",
        "job_type": "jobType",
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "training_files": "trainingFiles",
        "validation_files": "validationFiles",
        "fine_tuned_model": "fineTunedModel",
        "trained_tokens": "trainedTokens"
      });
    });
    exports.DetailedJobOut$outboundSchema = z.object({
      id: z.string(),
      autoStart: z.boolean(),
      hyperparameters: trainingparameters_js_1.TrainingParameters$outboundSchema,
      model: z.string(),
      status: exports.DetailedJobOutStatus$outboundSchema,
      jobType: z.string(),
      createdAt: z.number().int(),
      modifiedAt: z.number().int(),
      trainingFiles: z.array(z.string()),
      validationFiles: z.nullable(z.array(z.string())).optional(),
      object: z.literal("job").default("job"),
      fineTunedModel: z.nullable(z.string()).optional(),
      suffix: z.nullable(z.string()).optional(),
      integrations: z.nullable(z.array(wandbintegrationout_js_1.WandbIntegrationOut$outboundSchema)).optional(),
      trainedTokens: z.nullable(z.number().int()).optional(),
      repositories: z.array(githubrepositoryout_js_1.GithubRepositoryOut$outboundSchema).optional(),
      metadata: z.nullable(jobmetadataout_js_1.JobMetadataOut$outboundSchema).optional(),
      events: z.array(eventout_js_1.EventOut$outboundSchema).optional(),
      checkpoints: z.array(checkpointout_js_1.CheckpointOut$outboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        autoStart: "auto_start",
        jobType: "job_type",
        createdAt: "created_at",
        modifiedAt: "modified_at",
        trainingFiles: "training_files",
        validationFiles: "validation_files",
        fineTunedModel: "fine_tuned_model",
        trainedTokens: "trained_tokens"
      });
    });
    var DetailedJobOut$;
    (function(DetailedJobOut$2) {
      DetailedJobOut$2.inboundSchema = exports.DetailedJobOut$inboundSchema;
      DetailedJobOut$2.outboundSchema = exports.DetailedJobOut$outboundSchema;
    })(DetailedJobOut$ || (exports.DetailedJobOut$ = DetailedJobOut$ = {}));
    function detailedJobOutToJSON(detailedJobOut) {
      return JSON.stringify(exports.DetailedJobOut$outboundSchema.parse(detailedJobOut));
    }
    function detailedJobOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DetailedJobOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DetailedJobOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/embeddingrequest.js
var require_embeddingrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/embeddingrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EmbeddingRequest$ = exports.EmbeddingRequest$outboundSchema = exports.EmbeddingRequest$inboundSchema = exports.Inputs$ = exports.Inputs$outboundSchema = exports.Inputs$inboundSchema = void 0;
    exports.inputsToJSON = inputsToJSON;
    exports.inputsFromJSON = inputsFromJSON;
    exports.embeddingRequestToJSON = embeddingRequestToJSON;
    exports.embeddingRequestFromJSON = embeddingRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.Inputs$inboundSchema = z.union([z.string(), z.array(z.string())]);
    exports.Inputs$outboundSchema = z.union([z.string(), z.array(z.string())]);
    var Inputs$;
    (function(Inputs$2) {
      Inputs$2.inboundSchema = exports.Inputs$inboundSchema;
      Inputs$2.outboundSchema = exports.Inputs$outboundSchema;
    })(Inputs$ || (exports.Inputs$ = Inputs$ = {}));
    function inputsToJSON(inputs) {
      return JSON.stringify(exports.Inputs$outboundSchema.parse(inputs));
    }
    function inputsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Inputs$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Inputs' from JSON`);
    }
    exports.EmbeddingRequest$inboundSchema = z.object({
      model: z.string().default("mistral-embed"),
      input: z.union([z.string(), z.array(z.string())])
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "input": "inputs"
      });
    });
    exports.EmbeddingRequest$outboundSchema = z.object({
      model: z.string().default("mistral-embed"),
      inputs: z.union([z.string(), z.array(z.string())])
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        inputs: "input"
      });
    });
    var EmbeddingRequest$;
    (function(EmbeddingRequest$2) {
      EmbeddingRequest$2.inboundSchema = exports.EmbeddingRequest$inboundSchema;
      EmbeddingRequest$2.outboundSchema = exports.EmbeddingRequest$outboundSchema;
    })(EmbeddingRequest$ || (exports.EmbeddingRequest$ = EmbeddingRequest$ = {}));
    function embeddingRequestToJSON(embeddingRequest) {
      return JSON.stringify(exports.EmbeddingRequest$outboundSchema.parse(embeddingRequest));
    }
    function embeddingRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EmbeddingRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EmbeddingRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/embeddingresponsedata.js
var require_embeddingresponsedata = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/embeddingresponsedata.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EmbeddingResponseData$ = exports.EmbeddingResponseData$outboundSchema = exports.EmbeddingResponseData$inboundSchema = void 0;
    exports.embeddingResponseDataToJSON = embeddingResponseDataToJSON;
    exports.embeddingResponseDataFromJSON = embeddingResponseDataFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.EmbeddingResponseData$inboundSchema = z.object({
      object: z.string().optional(),
      embedding: z.array(z.number()).optional(),
      index: z.number().int().optional()
    });
    exports.EmbeddingResponseData$outboundSchema = z.object({
      object: z.string().optional(),
      embedding: z.array(z.number()).optional(),
      index: z.number().int().optional()
    });
    var EmbeddingResponseData$;
    (function(EmbeddingResponseData$2) {
      EmbeddingResponseData$2.inboundSchema = exports.EmbeddingResponseData$inboundSchema;
      EmbeddingResponseData$2.outboundSchema = exports.EmbeddingResponseData$outboundSchema;
    })(EmbeddingResponseData$ || (exports.EmbeddingResponseData$ = EmbeddingResponseData$ = {}));
    function embeddingResponseDataToJSON(embeddingResponseData) {
      return JSON.stringify(exports.EmbeddingResponseData$outboundSchema.parse(embeddingResponseData));
    }
    function embeddingResponseDataFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EmbeddingResponseData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EmbeddingResponseData' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/embeddingresponse.js
var require_embeddingresponse = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/embeddingresponse.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EmbeddingResponse$ = exports.EmbeddingResponse$outboundSchema = exports.EmbeddingResponse$inboundSchema = void 0;
    exports.embeddingResponseToJSON = embeddingResponseToJSON;
    exports.embeddingResponseFromJSON = embeddingResponseFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var embeddingresponsedata_js_1 = require_embeddingresponsedata();
    var usageinfo_js_1 = require_usageinfo();
    exports.EmbeddingResponse$inboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      model: z.string(),
      usage: usageinfo_js_1.UsageInfo$inboundSchema,
      data: z.array(embeddingresponsedata_js_1.EmbeddingResponseData$inboundSchema)
    });
    exports.EmbeddingResponse$outboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      model: z.string(),
      usage: usageinfo_js_1.UsageInfo$outboundSchema,
      data: z.array(embeddingresponsedata_js_1.EmbeddingResponseData$outboundSchema)
    });
    var EmbeddingResponse$;
    (function(EmbeddingResponse$2) {
      EmbeddingResponse$2.inboundSchema = exports.EmbeddingResponse$inboundSchema;
      EmbeddingResponse$2.outboundSchema = exports.EmbeddingResponse$outboundSchema;
    })(EmbeddingResponse$ || (exports.EmbeddingResponse$ = EmbeddingResponse$ = {}));
    function embeddingResponseToJSON(embeddingResponse) {
      return JSON.stringify(exports.EmbeddingResponse$outboundSchema.parse(embeddingResponse));
    }
    function embeddingResponseFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.EmbeddingResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'EmbeddingResponse' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/filepurpose.js
var require_filepurpose = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/filepurpose.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilePurpose$ = exports.FilePurpose$outboundSchema = exports.FilePurpose$inboundSchema = exports.FilePurpose = void 0;
    var z = __importStar(require_lib());
    var enums_js_1 = require_enums();
    exports.FilePurpose = {
      FineTune: "fine-tune",
      Batch: "batch",
      Ocr: "ocr"
    };
    exports.FilePurpose$inboundSchema = z.union([
      z.nativeEnum(exports.FilePurpose),
      z.string().transform(enums_js_1.catchUnrecognizedEnum)
    ]);
    exports.FilePurpose$outboundSchema = z.union([
      z.nativeEnum(exports.FilePurpose),
      z.string().and(z.custom())
    ]);
    var FilePurpose$;
    (function(FilePurpose$2) {
      FilePurpose$2.inboundSchema = exports.FilePurpose$inboundSchema;
      FilePurpose$2.outboundSchema = exports.FilePurpose$outboundSchema;
    })(FilePurpose$ || (exports.FilePurpose$ = FilePurpose$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/components/sampletype.js
var require_sampletype = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/sampletype.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SampleType$ = exports.SampleType$outboundSchema = exports.SampleType$inboundSchema = exports.SampleType = void 0;
    var z = __importStar(require_lib());
    var enums_js_1 = require_enums();
    exports.SampleType = {
      Pretrain: "pretrain",
      Instruct: "instruct",
      BatchRequest: "batch_request",
      BatchResult: "batch_result",
      BatchError: "batch_error"
    };
    exports.SampleType$inboundSchema = z.union([
      z.nativeEnum(exports.SampleType),
      z.string().transform(enums_js_1.catchUnrecognizedEnum)
    ]);
    exports.SampleType$outboundSchema = z.union([
      z.nativeEnum(exports.SampleType),
      z.string().and(z.custom())
    ]);
    var SampleType$;
    (function(SampleType$2) {
      SampleType$2.inboundSchema = exports.SampleType$inboundSchema;
      SampleType$2.outboundSchema = exports.SampleType$outboundSchema;
    })(SampleType$ || (exports.SampleType$ = SampleType$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/components/source.js
var require_source = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/source.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Source$ = exports.Source$outboundSchema = exports.Source$inboundSchema = exports.Source = void 0;
    var z = __importStar(require_lib());
    var enums_js_1 = require_enums();
    exports.Source = {
      Upload: "upload",
      Repository: "repository",
      Mistral: "mistral"
    };
    exports.Source$inboundSchema = z.union([
      z.nativeEnum(exports.Source),
      z.string().transform(enums_js_1.catchUnrecognizedEnum)
    ]);
    exports.Source$outboundSchema = z.union([
      z.nativeEnum(exports.Source),
      z.string().and(z.custom())
    ]);
    var Source$;
    (function(Source$2) {
      Source$2.inboundSchema = exports.Source$inboundSchema;
      Source$2.outboundSchema = exports.Source$outboundSchema;
    })(Source$ || (exports.Source$ = Source$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/components/fileschema.js
var require_fileschema = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/fileschema.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FileSchema$ = exports.FileSchema$outboundSchema = exports.FileSchema$inboundSchema = void 0;
    exports.fileSchemaToJSON = fileSchemaToJSON;
    exports.fileSchemaFromJSON = fileSchemaFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var filepurpose_js_1 = require_filepurpose();
    var sampletype_js_1 = require_sampletype();
    var source_js_1 = require_source();
    exports.FileSchema$inboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      bytes: z.number().int(),
      created_at: z.number().int(),
      filename: z.string(),
      purpose: filepurpose_js_1.FilePurpose$inboundSchema,
      sample_type: sampletype_js_1.SampleType$inboundSchema,
      num_lines: z.nullable(z.number().int()).optional(),
      source: source_js_1.Source$inboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "bytes": "sizeBytes",
        "created_at": "createdAt",
        "sample_type": "sampleType",
        "num_lines": "numLines"
      });
    });
    exports.FileSchema$outboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      sizeBytes: z.number().int(),
      createdAt: z.number().int(),
      filename: z.string(),
      purpose: filepurpose_js_1.FilePurpose$outboundSchema,
      sampleType: sampletype_js_1.SampleType$outboundSchema,
      numLines: z.nullable(z.number().int()).optional(),
      source: source_js_1.Source$outboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        sizeBytes: "bytes",
        createdAt: "created_at",
        sampleType: "sample_type",
        numLines: "num_lines"
      });
    });
    var FileSchema$;
    (function(FileSchema$2) {
      FileSchema$2.inboundSchema = exports.FileSchema$inboundSchema;
      FileSchema$2.outboundSchema = exports.FileSchema$outboundSchema;
    })(FileSchema$ || (exports.FileSchema$ = FileSchema$ = {}));
    function fileSchemaToJSON(fileSchema) {
      return JSON.stringify(exports.FileSchema$outboundSchema.parse(fileSchema));
    }
    function fileSchemaFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FileSchema$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FileSchema' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/filesignedurl.js
var require_filesignedurl = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/filesignedurl.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FileSignedURL$ = exports.FileSignedURL$outboundSchema = exports.FileSignedURL$inboundSchema = void 0;
    exports.fileSignedURLToJSON = fileSignedURLToJSON;
    exports.fileSignedURLFromJSON = fileSignedURLFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.FileSignedURL$inboundSchema = z.object({
      url: z.string()
    });
    exports.FileSignedURL$outboundSchema = z.object({
      url: z.string()
    });
    var FileSignedURL$;
    (function(FileSignedURL$2) {
      FileSignedURL$2.inboundSchema = exports.FileSignedURL$inboundSchema;
      FileSignedURL$2.outboundSchema = exports.FileSignedURL$outboundSchema;
    })(FileSignedURL$ || (exports.FileSignedURL$ = FileSignedURL$ = {}));
    function fileSignedURLToJSON(fileSignedURL) {
      return JSON.stringify(exports.FileSignedURL$outboundSchema.parse(fileSignedURL));
    }
    function fileSignedURLFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FileSignedURL$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FileSignedURL' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/fimcompletionrequest.js
var require_fimcompletionrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/fimcompletionrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FIMCompletionRequest$ = exports.FIMCompletionRequest$outboundSchema = exports.FIMCompletionRequest$inboundSchema = exports.FIMCompletionRequestStop$ = exports.FIMCompletionRequestStop$outboundSchema = exports.FIMCompletionRequestStop$inboundSchema = void 0;
    exports.fimCompletionRequestStopToJSON = fimCompletionRequestStopToJSON;
    exports.fimCompletionRequestStopFromJSON = fimCompletionRequestStopFromJSON;
    exports.fimCompletionRequestToJSON = fimCompletionRequestToJSON;
    exports.fimCompletionRequestFromJSON = fimCompletionRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.FIMCompletionRequestStop$inboundSchema = z.union([z.string(), z.array(z.string())]);
    exports.FIMCompletionRequestStop$outboundSchema = z.union([z.string(), z.array(z.string())]);
    var FIMCompletionRequestStop$;
    (function(FIMCompletionRequestStop$2) {
      FIMCompletionRequestStop$2.inboundSchema = exports.FIMCompletionRequestStop$inboundSchema;
      FIMCompletionRequestStop$2.outboundSchema = exports.FIMCompletionRequestStop$outboundSchema;
    })(FIMCompletionRequestStop$ || (exports.FIMCompletionRequestStop$ = FIMCompletionRequestStop$ = {}));
    function fimCompletionRequestStopToJSON(fimCompletionRequestStop) {
      return JSON.stringify(exports.FIMCompletionRequestStop$outboundSchema.parse(fimCompletionRequestStop));
    }
    function fimCompletionRequestStopFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FIMCompletionRequestStop$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FIMCompletionRequestStop' from JSON`);
    }
    exports.FIMCompletionRequest$inboundSchema = z.object({
      model: z.string(),
      temperature: z.nullable(z.number()).optional(),
      top_p: z.number().default(1),
      max_tokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(false),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      random_seed: z.nullable(z.number().int()).optional(),
      prompt: z.string(),
      suffix: z.nullable(z.string()).optional(),
      min_tokens: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "top_p": "topP",
        "max_tokens": "maxTokens",
        "random_seed": "randomSeed",
        "min_tokens": "minTokens"
      });
    });
    exports.FIMCompletionRequest$outboundSchema = z.object({
      model: z.string(),
      temperature: z.nullable(z.number()).optional(),
      topP: z.number().default(1),
      maxTokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(false),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      randomSeed: z.nullable(z.number().int()).optional(),
      prompt: z.string(),
      suffix: z.nullable(z.string()).optional(),
      minTokens: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        topP: "top_p",
        maxTokens: "max_tokens",
        randomSeed: "random_seed",
        minTokens: "min_tokens"
      });
    });
    var FIMCompletionRequest$;
    (function(FIMCompletionRequest$2) {
      FIMCompletionRequest$2.inboundSchema = exports.FIMCompletionRequest$inboundSchema;
      FIMCompletionRequest$2.outboundSchema = exports.FIMCompletionRequest$outboundSchema;
    })(FIMCompletionRequest$ || (exports.FIMCompletionRequest$ = FIMCompletionRequest$ = {}));
    function fimCompletionRequestToJSON(fimCompletionRequest) {
      return JSON.stringify(exports.FIMCompletionRequest$outboundSchema.parse(fimCompletionRequest));
    }
    function fimCompletionRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FIMCompletionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FIMCompletionRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/fimcompletionresponse.js
var require_fimcompletionresponse = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/fimcompletionresponse.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FIMCompletionResponse$ = exports.FIMCompletionResponse$outboundSchema = exports.FIMCompletionResponse$inboundSchema = void 0;
    exports.fimCompletionResponseToJSON = fimCompletionResponseToJSON;
    exports.fimCompletionResponseFromJSON = fimCompletionResponseFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var chatcompletionchoice_js_1 = require_chatcompletionchoice();
    var usageinfo_js_1 = require_usageinfo();
    exports.FIMCompletionResponse$inboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      model: z.string(),
      usage: usageinfo_js_1.UsageInfo$inboundSchema,
      created: z.number().int().optional(),
      choices: z.array(chatcompletionchoice_js_1.ChatCompletionChoice$inboundSchema).optional()
    });
    exports.FIMCompletionResponse$outboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      model: z.string(),
      usage: usageinfo_js_1.UsageInfo$outboundSchema,
      created: z.number().int().optional(),
      choices: z.array(chatcompletionchoice_js_1.ChatCompletionChoice$outboundSchema).optional()
    });
    var FIMCompletionResponse$;
    (function(FIMCompletionResponse$2) {
      FIMCompletionResponse$2.inboundSchema = exports.FIMCompletionResponse$inboundSchema;
      FIMCompletionResponse$2.outboundSchema = exports.FIMCompletionResponse$outboundSchema;
    })(FIMCompletionResponse$ || (exports.FIMCompletionResponse$ = FIMCompletionResponse$ = {}));
    function fimCompletionResponseToJSON(fimCompletionResponse) {
      return JSON.stringify(exports.FIMCompletionResponse$outboundSchema.parse(fimCompletionResponse));
    }
    function fimCompletionResponseFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FIMCompletionResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FIMCompletionResponse' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/fimcompletionstreamrequest.js
var require_fimcompletionstreamrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/fimcompletionstreamrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FIMCompletionStreamRequest$ = exports.FIMCompletionStreamRequest$outboundSchema = exports.FIMCompletionStreamRequest$inboundSchema = exports.FIMCompletionStreamRequestStop$ = exports.FIMCompletionStreamRequestStop$outboundSchema = exports.FIMCompletionStreamRequestStop$inboundSchema = void 0;
    exports.fimCompletionStreamRequestStopToJSON = fimCompletionStreamRequestStopToJSON;
    exports.fimCompletionStreamRequestStopFromJSON = fimCompletionStreamRequestStopFromJSON;
    exports.fimCompletionStreamRequestToJSON = fimCompletionStreamRequestToJSON;
    exports.fimCompletionStreamRequestFromJSON = fimCompletionStreamRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.FIMCompletionStreamRequestStop$inboundSchema = z.union([z.string(), z.array(z.string())]);
    exports.FIMCompletionStreamRequestStop$outboundSchema = z.union([z.string(), z.array(z.string())]);
    var FIMCompletionStreamRequestStop$;
    (function(FIMCompletionStreamRequestStop$2) {
      FIMCompletionStreamRequestStop$2.inboundSchema = exports.FIMCompletionStreamRequestStop$inboundSchema;
      FIMCompletionStreamRequestStop$2.outboundSchema = exports.FIMCompletionStreamRequestStop$outboundSchema;
    })(FIMCompletionStreamRequestStop$ || (exports.FIMCompletionStreamRequestStop$ = FIMCompletionStreamRequestStop$ = {}));
    function fimCompletionStreamRequestStopToJSON(fimCompletionStreamRequestStop) {
      return JSON.stringify(exports.FIMCompletionStreamRequestStop$outboundSchema.parse(fimCompletionStreamRequestStop));
    }
    function fimCompletionStreamRequestStopFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FIMCompletionStreamRequestStop$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FIMCompletionStreamRequestStop' from JSON`);
    }
    exports.FIMCompletionStreamRequest$inboundSchema = z.object({
      model: z.string(),
      temperature: z.nullable(z.number()).optional(),
      top_p: z.number().default(1),
      max_tokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(true),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      random_seed: z.nullable(z.number().int()).optional(),
      prompt: z.string(),
      suffix: z.nullable(z.string()).optional(),
      min_tokens: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "top_p": "topP",
        "max_tokens": "maxTokens",
        "random_seed": "randomSeed",
        "min_tokens": "minTokens"
      });
    });
    exports.FIMCompletionStreamRequest$outboundSchema = z.object({
      model: z.string(),
      temperature: z.nullable(z.number()).optional(),
      topP: z.number().default(1),
      maxTokens: z.nullable(z.number().int()).optional(),
      stream: z.boolean().default(true),
      stop: z.union([z.string(), z.array(z.string())]).optional(),
      randomSeed: z.nullable(z.number().int()).optional(),
      prompt: z.string(),
      suffix: z.nullable(z.string()).optional(),
      minTokens: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        topP: "top_p",
        maxTokens: "max_tokens",
        randomSeed: "random_seed",
        minTokens: "min_tokens"
      });
    });
    var FIMCompletionStreamRequest$;
    (function(FIMCompletionStreamRequest$2) {
      FIMCompletionStreamRequest$2.inboundSchema = exports.FIMCompletionStreamRequest$inboundSchema;
      FIMCompletionStreamRequest$2.outboundSchema = exports.FIMCompletionStreamRequest$outboundSchema;
    })(FIMCompletionStreamRequest$ || (exports.FIMCompletionStreamRequest$ = FIMCompletionStreamRequest$ = {}));
    function fimCompletionStreamRequestToJSON(fimCompletionStreamRequest) {
      return JSON.stringify(exports.FIMCompletionStreamRequest$outboundSchema.parse(fimCompletionStreamRequest));
    }
    function fimCompletionStreamRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FIMCompletionStreamRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FIMCompletionStreamRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/ftmodelcapabilitiesout.js
var require_ftmodelcapabilitiesout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/ftmodelcapabilitiesout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FTModelCapabilitiesOut$ = exports.FTModelCapabilitiesOut$outboundSchema = exports.FTModelCapabilitiesOut$inboundSchema = void 0;
    exports.ftModelCapabilitiesOutToJSON = ftModelCapabilitiesOutToJSON;
    exports.ftModelCapabilitiesOutFromJSON = ftModelCapabilitiesOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.FTModelCapabilitiesOut$inboundSchema = z.object({
      completion_chat: z.boolean().default(true),
      completion_fim: z.boolean().default(false),
      function_calling: z.boolean().default(false),
      fine_tuning: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "completion_chat": "completionChat",
        "completion_fim": "completionFim",
        "function_calling": "functionCalling",
        "fine_tuning": "fineTuning"
      });
    });
    exports.FTModelCapabilitiesOut$outboundSchema = z.object({
      completionChat: z.boolean().default(true),
      completionFim: z.boolean().default(false),
      functionCalling: z.boolean().default(false),
      fineTuning: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        completionChat: "completion_chat",
        completionFim: "completion_fim",
        functionCalling: "function_calling",
        fineTuning: "fine_tuning"
      });
    });
    var FTModelCapabilitiesOut$;
    (function(FTModelCapabilitiesOut$2) {
      FTModelCapabilitiesOut$2.inboundSchema = exports.FTModelCapabilitiesOut$inboundSchema;
      FTModelCapabilitiesOut$2.outboundSchema = exports.FTModelCapabilitiesOut$outboundSchema;
    })(FTModelCapabilitiesOut$ || (exports.FTModelCapabilitiesOut$ = FTModelCapabilitiesOut$ = {}));
    function ftModelCapabilitiesOutToJSON(ftModelCapabilitiesOut) {
      return JSON.stringify(exports.FTModelCapabilitiesOut$outboundSchema.parse(ftModelCapabilitiesOut));
    }
    function ftModelCapabilitiesOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FTModelCapabilitiesOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FTModelCapabilitiesOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/ftmodelcard.js
var require_ftmodelcard = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/ftmodelcard.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FTModelCard$ = exports.FTModelCard$outboundSchema = exports.FTModelCard$inboundSchema = exports.FTModelCardType$ = exports.FTModelCardType$outboundSchema = exports.FTModelCardType$inboundSchema = exports.FTModelCardType = void 0;
    exports.ftModelCardToJSON = ftModelCardToJSON;
    exports.ftModelCardFromJSON = ftModelCardFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var modelcapabilities_js_1 = require_modelcapabilities();
    exports.FTModelCardType = {
      FineTuned: "fine-tuned"
    };
    exports.FTModelCardType$inboundSchema = z.nativeEnum(exports.FTModelCardType);
    exports.FTModelCardType$outboundSchema = exports.FTModelCardType$inboundSchema;
    var FTModelCardType$;
    (function(FTModelCardType$2) {
      FTModelCardType$2.inboundSchema = exports.FTModelCardType$inboundSchema;
      FTModelCardType$2.outboundSchema = exports.FTModelCardType$outboundSchema;
    })(FTModelCardType$ || (exports.FTModelCardType$ = FTModelCardType$ = {}));
    exports.FTModelCard$inboundSchema = z.object({
      id: z.string(),
      object: z.string().default("model"),
      created: z.number().int().optional(),
      owned_by: z.string().default("mistralai"),
      capabilities: modelcapabilities_js_1.ModelCapabilities$inboundSchema,
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional(),
      max_context_length: z.number().int().default(32768),
      aliases: z.array(z.string()).optional(),
      deprecation: z.nullable(z.string().datetime({ offset: true }).transform((v) => new Date(v))).optional(),
      default_model_temperature: z.nullable(z.number()).optional(),
      type: z.literal("fine-tuned").default("fine-tuned"),
      job: z.string(),
      root: z.string(),
      archived: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "owned_by": "ownedBy",
        "max_context_length": "maxContextLength",
        "default_model_temperature": "defaultModelTemperature"
      });
    });
    exports.FTModelCard$outboundSchema = z.object({
      id: z.string(),
      object: z.string().default("model"),
      created: z.number().int().optional(),
      ownedBy: z.string().default("mistralai"),
      capabilities: modelcapabilities_js_1.ModelCapabilities$outboundSchema,
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional(),
      maxContextLength: z.number().int().default(32768),
      aliases: z.array(z.string()).optional(),
      deprecation: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
      defaultModelTemperature: z.nullable(z.number()).optional(),
      type: z.literal("fine-tuned").default("fine-tuned"),
      job: z.string(),
      root: z.string(),
      archived: z.boolean().default(false)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        ownedBy: "owned_by",
        maxContextLength: "max_context_length",
        defaultModelTemperature: "default_model_temperature"
      });
    });
    var FTModelCard$;
    (function(FTModelCard$2) {
      FTModelCard$2.inboundSchema = exports.FTModelCard$inboundSchema;
      FTModelCard$2.outboundSchema = exports.FTModelCard$outboundSchema;
    })(FTModelCard$ || (exports.FTModelCard$ = FTModelCard$ = {}));
    function ftModelCardToJSON(ftModelCard) {
      return JSON.stringify(exports.FTModelCard$outboundSchema.parse(ftModelCard));
    }
    function ftModelCardFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FTModelCard$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FTModelCard' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/ftmodelout.js
var require_ftmodelout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/ftmodelout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FTModelOut$ = exports.FTModelOut$outboundSchema = exports.FTModelOut$inboundSchema = exports.FTModelOutObject$ = exports.FTModelOutObject$outboundSchema = exports.FTModelOutObject$inboundSchema = exports.FTModelOutObject = void 0;
    exports.ftModelOutToJSON = ftModelOutToJSON;
    exports.ftModelOutFromJSON = ftModelOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var ftmodelcapabilitiesout_js_1 = require_ftmodelcapabilitiesout();
    exports.FTModelOutObject = {
      Model: "model"
    };
    exports.FTModelOutObject$inboundSchema = z.nativeEnum(exports.FTModelOutObject);
    exports.FTModelOutObject$outboundSchema = exports.FTModelOutObject$inboundSchema;
    var FTModelOutObject$;
    (function(FTModelOutObject$2) {
      FTModelOutObject$2.inboundSchema = exports.FTModelOutObject$inboundSchema;
      FTModelOutObject$2.outboundSchema = exports.FTModelOutObject$outboundSchema;
    })(FTModelOutObject$ || (exports.FTModelOutObject$ = FTModelOutObject$ = {}));
    exports.FTModelOut$inboundSchema = z.object({
      id: z.string(),
      object: z.literal("model").default("model"),
      created: z.number().int(),
      owned_by: z.string(),
      root: z.string(),
      archived: z.boolean(),
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional(),
      capabilities: ftmodelcapabilitiesout_js_1.FTModelCapabilitiesOut$inboundSchema,
      max_context_length: z.number().int().default(32768),
      aliases: z.array(z.string()).optional(),
      job: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "owned_by": "ownedBy",
        "max_context_length": "maxContextLength"
      });
    });
    exports.FTModelOut$outboundSchema = z.object({
      id: z.string(),
      object: z.literal("model").default("model"),
      created: z.number().int(),
      ownedBy: z.string(),
      root: z.string(),
      archived: z.boolean(),
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional(),
      capabilities: ftmodelcapabilitiesout_js_1.FTModelCapabilitiesOut$outboundSchema,
      maxContextLength: z.number().int().default(32768),
      aliases: z.array(z.string()).optional(),
      job: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        ownedBy: "owned_by",
        maxContextLength: "max_context_length"
      });
    });
    var FTModelOut$;
    (function(FTModelOut$2) {
      FTModelOut$2.inboundSchema = exports.FTModelOut$inboundSchema;
      FTModelOut$2.outboundSchema = exports.FTModelOut$outboundSchema;
    })(FTModelOut$ || (exports.FTModelOut$ = FTModelOut$ = {}));
    function ftModelOutToJSON(ftModelOut) {
      return JSON.stringify(exports.FTModelOut$outboundSchema.parse(ftModelOut));
    }
    function ftModelOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FTModelOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FTModelOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/githubrepositoryin.js
var require_githubrepositoryin = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/githubrepositoryin.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GithubRepositoryIn$ = exports.GithubRepositoryIn$outboundSchema = exports.GithubRepositoryIn$inboundSchema = exports.GithubRepositoryInType$ = exports.GithubRepositoryInType$outboundSchema = exports.GithubRepositoryInType$inboundSchema = exports.GithubRepositoryInType = void 0;
    exports.githubRepositoryInToJSON = githubRepositoryInToJSON;
    exports.githubRepositoryInFromJSON = githubRepositoryInFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.GithubRepositoryInType = {
      Github: "github"
    };
    exports.GithubRepositoryInType$inboundSchema = z.nativeEnum(exports.GithubRepositoryInType);
    exports.GithubRepositoryInType$outboundSchema = exports.GithubRepositoryInType$inboundSchema;
    var GithubRepositoryInType$;
    (function(GithubRepositoryInType$2) {
      GithubRepositoryInType$2.inboundSchema = exports.GithubRepositoryInType$inboundSchema;
      GithubRepositoryInType$2.outboundSchema = exports.GithubRepositoryInType$outboundSchema;
    })(GithubRepositoryInType$ || (exports.GithubRepositoryInType$ = GithubRepositoryInType$ = {}));
    exports.GithubRepositoryIn$inboundSchema = z.object({
      type: z.literal("github").default("github"),
      name: z.string(),
      owner: z.string(),
      ref: z.nullable(z.string()).optional(),
      weight: z.number().default(1),
      token: z.string()
    });
    exports.GithubRepositoryIn$outboundSchema = z.object({
      type: z.literal("github").default("github"),
      name: z.string(),
      owner: z.string(),
      ref: z.nullable(z.string()).optional(),
      weight: z.number().default(1),
      token: z.string()
    });
    var GithubRepositoryIn$;
    (function(GithubRepositoryIn$2) {
      GithubRepositoryIn$2.inboundSchema = exports.GithubRepositoryIn$inboundSchema;
      GithubRepositoryIn$2.outboundSchema = exports.GithubRepositoryIn$outboundSchema;
    })(GithubRepositoryIn$ || (exports.GithubRepositoryIn$ = GithubRepositoryIn$ = {}));
    function githubRepositoryInToJSON(githubRepositoryIn) {
      return JSON.stringify(exports.GithubRepositoryIn$outboundSchema.parse(githubRepositoryIn));
    }
    function githubRepositoryInFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GithubRepositoryIn$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GithubRepositoryIn' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/trainingfile.js
var require_trainingfile = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/trainingfile.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TrainingFile$ = exports.TrainingFile$outboundSchema = exports.TrainingFile$inboundSchema = void 0;
    exports.trainingFileToJSON = trainingFileToJSON;
    exports.trainingFileFromJSON = trainingFileFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.TrainingFile$inboundSchema = z.object({
      file_id: z.string(),
      weight: z.number().default(1)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "file_id": "fileId"
      });
    });
    exports.TrainingFile$outboundSchema = z.object({
      fileId: z.string(),
      weight: z.number().default(1)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        fileId: "file_id"
      });
    });
    var TrainingFile$;
    (function(TrainingFile$2) {
      TrainingFile$2.inboundSchema = exports.TrainingFile$inboundSchema;
      TrainingFile$2.outboundSchema = exports.TrainingFile$outboundSchema;
    })(TrainingFile$ || (exports.TrainingFile$ = TrainingFile$ = {}));
    function trainingFileToJSON(trainingFile) {
      return JSON.stringify(exports.TrainingFile$outboundSchema.parse(trainingFile));
    }
    function trainingFileFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TrainingFile$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TrainingFile' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/trainingparametersin.js
var require_trainingparametersin = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/trainingparametersin.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TrainingParametersIn$ = exports.TrainingParametersIn$outboundSchema = exports.TrainingParametersIn$inboundSchema = void 0;
    exports.trainingParametersInToJSON = trainingParametersInToJSON;
    exports.trainingParametersInFromJSON = trainingParametersInFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.TrainingParametersIn$inboundSchema = z.object({
      training_steps: z.nullable(z.number().int()).optional(),
      learning_rate: z.number().default(1e-4),
      weight_decay: z.nullable(z.number()).optional(),
      warmup_fraction: z.nullable(z.number()).optional(),
      epochs: z.nullable(z.number()).optional(),
      fim_ratio: z.nullable(z.number()).optional(),
      seq_len: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "training_steps": "trainingSteps",
        "learning_rate": "learningRate",
        "weight_decay": "weightDecay",
        "warmup_fraction": "warmupFraction",
        "fim_ratio": "fimRatio",
        "seq_len": "seqLen"
      });
    });
    exports.TrainingParametersIn$outboundSchema = z.object({
      trainingSteps: z.nullable(z.number().int()).optional(),
      learningRate: z.number().default(1e-4),
      weightDecay: z.nullable(z.number()).optional(),
      warmupFraction: z.nullable(z.number()).optional(),
      epochs: z.nullable(z.number()).optional(),
      fimRatio: z.nullable(z.number()).optional(),
      seqLen: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        trainingSteps: "training_steps",
        learningRate: "learning_rate",
        weightDecay: "weight_decay",
        warmupFraction: "warmup_fraction",
        fimRatio: "fim_ratio",
        seqLen: "seq_len"
      });
    });
    var TrainingParametersIn$;
    (function(TrainingParametersIn$2) {
      TrainingParametersIn$2.inboundSchema = exports.TrainingParametersIn$inboundSchema;
      TrainingParametersIn$2.outboundSchema = exports.TrainingParametersIn$outboundSchema;
    })(TrainingParametersIn$ || (exports.TrainingParametersIn$ = TrainingParametersIn$ = {}));
    function trainingParametersInToJSON(trainingParametersIn) {
      return JSON.stringify(exports.TrainingParametersIn$outboundSchema.parse(trainingParametersIn));
    }
    function trainingParametersInFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TrainingParametersIn$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TrainingParametersIn' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/wandbintegration.js
var require_wandbintegration = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/wandbintegration.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WandbIntegration$ = exports.WandbIntegration$outboundSchema = exports.WandbIntegration$inboundSchema = exports.WandbIntegrationType$ = exports.WandbIntegrationType$outboundSchema = exports.WandbIntegrationType$inboundSchema = exports.WandbIntegrationType = void 0;
    exports.wandbIntegrationToJSON = wandbIntegrationToJSON;
    exports.wandbIntegrationFromJSON = wandbIntegrationFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.WandbIntegrationType = {
      Wandb: "wandb"
    };
    exports.WandbIntegrationType$inboundSchema = z.nativeEnum(exports.WandbIntegrationType);
    exports.WandbIntegrationType$outboundSchema = exports.WandbIntegrationType$inboundSchema;
    var WandbIntegrationType$;
    (function(WandbIntegrationType$2) {
      WandbIntegrationType$2.inboundSchema = exports.WandbIntegrationType$inboundSchema;
      WandbIntegrationType$2.outboundSchema = exports.WandbIntegrationType$outboundSchema;
    })(WandbIntegrationType$ || (exports.WandbIntegrationType$ = WandbIntegrationType$ = {}));
    exports.WandbIntegration$inboundSchema = z.object({
      type: z.literal("wandb").default("wandb"),
      project: z.string(),
      name: z.nullable(z.string()).optional(),
      api_key: z.string(),
      run_name: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "api_key": "apiKey",
        "run_name": "runName"
      });
    });
    exports.WandbIntegration$outboundSchema = z.object({
      type: z.literal("wandb").default("wandb"),
      project: z.string(),
      name: z.nullable(z.string()).optional(),
      apiKey: z.string(),
      runName: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        apiKey: "api_key",
        runName: "run_name"
      });
    });
    var WandbIntegration$;
    (function(WandbIntegration$2) {
      WandbIntegration$2.inboundSchema = exports.WandbIntegration$inboundSchema;
      WandbIntegration$2.outboundSchema = exports.WandbIntegration$outboundSchema;
    })(WandbIntegration$ || (exports.WandbIntegration$ = WandbIntegration$ = {}));
    function wandbIntegrationToJSON(wandbIntegration) {
      return JSON.stringify(exports.WandbIntegration$outboundSchema.parse(wandbIntegration));
    }
    function wandbIntegrationFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.WandbIntegration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'WandbIntegration' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/jobin.js
var require_jobin = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/jobin.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobIn$ = exports.JobIn$outboundSchema = exports.JobIn$inboundSchema = exports.JobInRepositories$ = exports.JobInRepositories$outboundSchema = exports.JobInRepositories$inboundSchema = exports.JobInIntegrations$ = exports.JobInIntegrations$outboundSchema = exports.JobInIntegrations$inboundSchema = void 0;
    exports.jobInIntegrationsToJSON = jobInIntegrationsToJSON;
    exports.jobInIntegrationsFromJSON = jobInIntegrationsFromJSON;
    exports.jobInRepositoriesToJSON = jobInRepositoriesToJSON;
    exports.jobInRepositoriesFromJSON = jobInRepositoriesFromJSON;
    exports.jobInToJSON = jobInToJSON;
    exports.jobInFromJSON = jobInFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var githubrepositoryin_js_1 = require_githubrepositoryin();
    var trainingfile_js_1 = require_trainingfile();
    var trainingparametersin_js_1 = require_trainingparametersin();
    var wandbintegration_js_1 = require_wandbintegration();
    exports.JobInIntegrations$inboundSchema = wandbintegration_js_1.WandbIntegration$inboundSchema;
    exports.JobInIntegrations$outboundSchema = wandbintegration_js_1.WandbIntegration$outboundSchema;
    var JobInIntegrations$;
    (function(JobInIntegrations$2) {
      JobInIntegrations$2.inboundSchema = exports.JobInIntegrations$inboundSchema;
      JobInIntegrations$2.outboundSchema = exports.JobInIntegrations$outboundSchema;
    })(JobInIntegrations$ || (exports.JobInIntegrations$ = JobInIntegrations$ = {}));
    function jobInIntegrationsToJSON(jobInIntegrations) {
      return JSON.stringify(exports.JobInIntegrations$outboundSchema.parse(jobInIntegrations));
    }
    function jobInIntegrationsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobInIntegrations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobInIntegrations' from JSON`);
    }
    exports.JobInRepositories$inboundSchema = githubrepositoryin_js_1.GithubRepositoryIn$inboundSchema;
    exports.JobInRepositories$outboundSchema = githubrepositoryin_js_1.GithubRepositoryIn$outboundSchema;
    var JobInRepositories$;
    (function(JobInRepositories$2) {
      JobInRepositories$2.inboundSchema = exports.JobInRepositories$inboundSchema;
      JobInRepositories$2.outboundSchema = exports.JobInRepositories$outboundSchema;
    })(JobInRepositories$ || (exports.JobInRepositories$ = JobInRepositories$ = {}));
    function jobInRepositoriesToJSON(jobInRepositories) {
      return JSON.stringify(exports.JobInRepositories$outboundSchema.parse(jobInRepositories));
    }
    function jobInRepositoriesFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobInRepositories$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobInRepositories' from JSON`);
    }
    exports.JobIn$inboundSchema = z.object({
      model: z.string(),
      training_files: z.array(trainingfile_js_1.TrainingFile$inboundSchema).optional(),
      validation_files: z.nullable(z.array(z.string())).optional(),
      hyperparameters: trainingparametersin_js_1.TrainingParametersIn$inboundSchema,
      suffix: z.nullable(z.string()).optional(),
      integrations: z.nullable(z.array(wandbintegration_js_1.WandbIntegration$inboundSchema)).optional(),
      repositories: z.array(githubrepositoryin_js_1.GithubRepositoryIn$inboundSchema).optional(),
      auto_start: z.boolean().optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "training_files": "trainingFiles",
        "validation_files": "validationFiles",
        "auto_start": "autoStart"
      });
    });
    exports.JobIn$outboundSchema = z.object({
      model: z.string(),
      trainingFiles: z.array(trainingfile_js_1.TrainingFile$outboundSchema).optional(),
      validationFiles: z.nullable(z.array(z.string())).optional(),
      hyperparameters: trainingparametersin_js_1.TrainingParametersIn$outboundSchema,
      suffix: z.nullable(z.string()).optional(),
      integrations: z.nullable(z.array(wandbintegration_js_1.WandbIntegration$outboundSchema)).optional(),
      repositories: z.array(githubrepositoryin_js_1.GithubRepositoryIn$outboundSchema).optional(),
      autoStart: z.boolean().optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        trainingFiles: "training_files",
        validationFiles: "validation_files",
        autoStart: "auto_start"
      });
    });
    var JobIn$;
    (function(JobIn$2) {
      JobIn$2.inboundSchema = exports.JobIn$inboundSchema;
      JobIn$2.outboundSchema = exports.JobIn$outboundSchema;
    })(JobIn$ || (exports.JobIn$ = JobIn$ = {}));
    function jobInToJSON(jobIn) {
      return JSON.stringify(exports.JobIn$outboundSchema.parse(jobIn));
    }
    function jobInFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobIn$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobIn' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/jobout.js
var require_jobout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/jobout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobOut$ = exports.JobOut$outboundSchema = exports.JobOut$inboundSchema = exports.Repositories$ = exports.Repositories$outboundSchema = exports.Repositories$inboundSchema = exports.Integrations$ = exports.Integrations$outboundSchema = exports.Integrations$inboundSchema = exports.ObjectT$ = exports.ObjectT$outboundSchema = exports.ObjectT$inboundSchema = exports.Status$ = exports.Status$outboundSchema = exports.Status$inboundSchema = exports.ObjectT = exports.Status = void 0;
    exports.integrationsToJSON = integrationsToJSON;
    exports.integrationsFromJSON = integrationsFromJSON;
    exports.repositoriesToJSON = repositoriesToJSON;
    exports.repositoriesFromJSON = repositoriesFromJSON;
    exports.jobOutToJSON = jobOutToJSON;
    exports.jobOutFromJSON = jobOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var githubrepositoryout_js_1 = require_githubrepositoryout();
    var jobmetadataout_js_1 = require_jobmetadataout();
    var trainingparameters_js_1 = require_trainingparameters();
    var wandbintegrationout_js_1 = require_wandbintegrationout();
    exports.Status = {
      Queued: "QUEUED",
      Started: "STARTED",
      Validating: "VALIDATING",
      Validated: "VALIDATED",
      Running: "RUNNING",
      FailedValidation: "FAILED_VALIDATION",
      Failed: "FAILED",
      Success: "SUCCESS",
      Cancelled: "CANCELLED",
      CancellationRequested: "CANCELLATION_REQUESTED"
    };
    exports.ObjectT = {
      Job: "job"
    };
    exports.Status$inboundSchema = z.nativeEnum(exports.Status);
    exports.Status$outboundSchema = exports.Status$inboundSchema;
    var Status$;
    (function(Status$2) {
      Status$2.inboundSchema = exports.Status$inboundSchema;
      Status$2.outboundSchema = exports.Status$outboundSchema;
    })(Status$ || (exports.Status$ = Status$ = {}));
    exports.ObjectT$inboundSchema = z.nativeEnum(exports.ObjectT);
    exports.ObjectT$outboundSchema = exports.ObjectT$inboundSchema;
    var ObjectT$;
    (function(ObjectT$2) {
      ObjectT$2.inboundSchema = exports.ObjectT$inboundSchema;
      ObjectT$2.outboundSchema = exports.ObjectT$outboundSchema;
    })(ObjectT$ || (exports.ObjectT$ = ObjectT$ = {}));
    exports.Integrations$inboundSchema = wandbintegrationout_js_1.WandbIntegrationOut$inboundSchema;
    exports.Integrations$outboundSchema = wandbintegrationout_js_1.WandbIntegrationOut$outboundSchema;
    var Integrations$;
    (function(Integrations$2) {
      Integrations$2.inboundSchema = exports.Integrations$inboundSchema;
      Integrations$2.outboundSchema = exports.Integrations$outboundSchema;
    })(Integrations$ || (exports.Integrations$ = Integrations$ = {}));
    function integrationsToJSON(integrations) {
      return JSON.stringify(exports.Integrations$outboundSchema.parse(integrations));
    }
    function integrationsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Integrations$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Integrations' from JSON`);
    }
    exports.Repositories$inboundSchema = githubrepositoryout_js_1.GithubRepositoryOut$inboundSchema;
    exports.Repositories$outboundSchema = githubrepositoryout_js_1.GithubRepositoryOut$outboundSchema;
    var Repositories$;
    (function(Repositories$2) {
      Repositories$2.inboundSchema = exports.Repositories$inboundSchema;
      Repositories$2.outboundSchema = exports.Repositories$outboundSchema;
    })(Repositories$ || (exports.Repositories$ = Repositories$ = {}));
    function repositoriesToJSON(repositories) {
      return JSON.stringify(exports.Repositories$outboundSchema.parse(repositories));
    }
    function repositoriesFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Repositories$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Repositories' from JSON`);
    }
    exports.JobOut$inboundSchema = z.object({
      id: z.string(),
      auto_start: z.boolean(),
      hyperparameters: trainingparameters_js_1.TrainingParameters$inboundSchema,
      model: z.string(),
      status: exports.Status$inboundSchema,
      job_type: z.string(),
      created_at: z.number().int(),
      modified_at: z.number().int(),
      training_files: z.array(z.string()),
      validation_files: z.nullable(z.array(z.string())).optional(),
      object: z.literal("job").default("job"),
      fine_tuned_model: z.nullable(z.string()).optional(),
      suffix: z.nullable(z.string()).optional(),
      integrations: z.nullable(z.array(wandbintegrationout_js_1.WandbIntegrationOut$inboundSchema)).optional(),
      trained_tokens: z.nullable(z.number().int()).optional(),
      repositories: z.array(githubrepositoryout_js_1.GithubRepositoryOut$inboundSchema).optional(),
      metadata: z.nullable(jobmetadataout_js_1.JobMetadataOut$inboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "auto_start": "autoStart",
        "job_type": "jobType",
        "created_at": "createdAt",
        "modified_at": "modifiedAt",
        "training_files": "trainingFiles",
        "validation_files": "validationFiles",
        "fine_tuned_model": "fineTunedModel",
        "trained_tokens": "trainedTokens"
      });
    });
    exports.JobOut$outboundSchema = z.object({
      id: z.string(),
      autoStart: z.boolean(),
      hyperparameters: trainingparameters_js_1.TrainingParameters$outboundSchema,
      model: z.string(),
      status: exports.Status$outboundSchema,
      jobType: z.string(),
      createdAt: z.number().int(),
      modifiedAt: z.number().int(),
      trainingFiles: z.array(z.string()),
      validationFiles: z.nullable(z.array(z.string())).optional(),
      object: z.literal("job").default("job"),
      fineTunedModel: z.nullable(z.string()).optional(),
      suffix: z.nullable(z.string()).optional(),
      integrations: z.nullable(z.array(wandbintegrationout_js_1.WandbIntegrationOut$outboundSchema)).optional(),
      trainedTokens: z.nullable(z.number().int()).optional(),
      repositories: z.array(githubrepositoryout_js_1.GithubRepositoryOut$outboundSchema).optional(),
      metadata: z.nullable(jobmetadataout_js_1.JobMetadataOut$outboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        autoStart: "auto_start",
        jobType: "job_type",
        createdAt: "created_at",
        modifiedAt: "modified_at",
        trainingFiles: "training_files",
        validationFiles: "validation_files",
        fineTunedModel: "fine_tuned_model",
        trainedTokens: "trained_tokens"
      });
    });
    var JobOut$;
    (function(JobOut$2) {
      JobOut$2.inboundSchema = exports.JobOut$inboundSchema;
      JobOut$2.outboundSchema = exports.JobOut$outboundSchema;
    })(JobOut$ || (exports.JobOut$ = JobOut$ = {}));
    function jobOutToJSON(jobOut) {
      return JSON.stringify(exports.JobOut$outboundSchema.parse(jobOut));
    }
    function jobOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/jobsout.js
var require_jobsout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/jobsout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsOut$ = exports.JobsOut$outboundSchema = exports.JobsOut$inboundSchema = exports.JobsOutObject$ = exports.JobsOutObject$outboundSchema = exports.JobsOutObject$inboundSchema = exports.JobsOutObject = void 0;
    exports.jobsOutToJSON = jobsOutToJSON;
    exports.jobsOutFromJSON = jobsOutFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var jobout_js_1 = require_jobout();
    exports.JobsOutObject = {
      List: "list"
    };
    exports.JobsOutObject$inboundSchema = z.nativeEnum(exports.JobsOutObject);
    exports.JobsOutObject$outboundSchema = exports.JobsOutObject$inboundSchema;
    var JobsOutObject$;
    (function(JobsOutObject$2) {
      JobsOutObject$2.inboundSchema = exports.JobsOutObject$inboundSchema;
      JobsOutObject$2.outboundSchema = exports.JobsOutObject$outboundSchema;
    })(JobsOutObject$ || (exports.JobsOutObject$ = JobsOutObject$ = {}));
    exports.JobsOut$inboundSchema = z.object({
      data: z.array(jobout_js_1.JobOut$inboundSchema).optional(),
      object: z.literal("list").default("list"),
      total: z.number().int()
    });
    exports.JobsOut$outboundSchema = z.object({
      data: z.array(jobout_js_1.JobOut$outboundSchema).optional(),
      object: z.literal("list").default("list"),
      total: z.number().int()
    });
    var JobsOut$;
    (function(JobsOut$2) {
      JobsOut$2.inboundSchema = exports.JobsOut$inboundSchema;
      JobsOut$2.outboundSchema = exports.JobsOut$outboundSchema;
    })(JobsOut$ || (exports.JobsOut$ = JobsOut$ = {}));
    function jobsOutToJSON(jobsOut) {
      return JSON.stringify(exports.JobsOut$outboundSchema.parse(jobsOut));
    }
    function jobsOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/legacyjobmetadataout.js
var require_legacyjobmetadataout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/legacyjobmetadataout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LegacyJobMetadataOut$ = exports.LegacyJobMetadataOut$outboundSchema = exports.LegacyJobMetadataOut$inboundSchema = exports.LegacyJobMetadataOutObject$ = exports.LegacyJobMetadataOutObject$outboundSchema = exports.LegacyJobMetadataOutObject$inboundSchema = exports.LegacyJobMetadataOutObject = void 0;
    exports.legacyJobMetadataOutToJSON = legacyJobMetadataOutToJSON;
    exports.legacyJobMetadataOutFromJSON = legacyJobMetadataOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.LegacyJobMetadataOutObject = {
      JobMetadata: "job.metadata"
    };
    exports.LegacyJobMetadataOutObject$inboundSchema = z.nativeEnum(exports.LegacyJobMetadataOutObject);
    exports.LegacyJobMetadataOutObject$outboundSchema = exports.LegacyJobMetadataOutObject$inboundSchema;
    var LegacyJobMetadataOutObject$;
    (function(LegacyJobMetadataOutObject$2) {
      LegacyJobMetadataOutObject$2.inboundSchema = exports.LegacyJobMetadataOutObject$inboundSchema;
      LegacyJobMetadataOutObject$2.outboundSchema = exports.LegacyJobMetadataOutObject$outboundSchema;
    })(LegacyJobMetadataOutObject$ || (exports.LegacyJobMetadataOutObject$ = LegacyJobMetadataOutObject$ = {}));
    exports.LegacyJobMetadataOut$inboundSchema = z.object({
      expected_duration_seconds: z.nullable(z.number().int()).optional(),
      cost: z.nullable(z.number()).optional(),
      cost_currency: z.nullable(z.string()).optional(),
      train_tokens_per_step: z.nullable(z.number().int()).optional(),
      train_tokens: z.nullable(z.number().int()).optional(),
      data_tokens: z.nullable(z.number().int()).optional(),
      estimated_start_time: z.nullable(z.number().int()).optional(),
      deprecated: z.boolean().default(true),
      details: z.string(),
      epochs: z.nullable(z.number()).optional(),
      training_steps: z.nullable(z.number().int()).optional(),
      object: z.literal("job.metadata").default("job.metadata")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "expected_duration_seconds": "expectedDurationSeconds",
        "cost_currency": "costCurrency",
        "train_tokens_per_step": "trainTokensPerStep",
        "train_tokens": "trainTokens",
        "data_tokens": "dataTokens",
        "estimated_start_time": "estimatedStartTime",
        "training_steps": "trainingSteps"
      });
    });
    exports.LegacyJobMetadataOut$outboundSchema = z.object({
      expectedDurationSeconds: z.nullable(z.number().int()).optional(),
      cost: z.nullable(z.number()).optional(),
      costCurrency: z.nullable(z.string()).optional(),
      trainTokensPerStep: z.nullable(z.number().int()).optional(),
      trainTokens: z.nullable(z.number().int()).optional(),
      dataTokens: z.nullable(z.number().int()).optional(),
      estimatedStartTime: z.nullable(z.number().int()).optional(),
      deprecated: z.boolean().default(true),
      details: z.string(),
      epochs: z.nullable(z.number()).optional(),
      trainingSteps: z.nullable(z.number().int()).optional(),
      object: z.literal("job.metadata").default("job.metadata")
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        expectedDurationSeconds: "expected_duration_seconds",
        costCurrency: "cost_currency",
        trainTokensPerStep: "train_tokens_per_step",
        trainTokens: "train_tokens",
        dataTokens: "data_tokens",
        estimatedStartTime: "estimated_start_time",
        trainingSteps: "training_steps"
      });
    });
    var LegacyJobMetadataOut$;
    (function(LegacyJobMetadataOut$2) {
      LegacyJobMetadataOut$2.inboundSchema = exports.LegacyJobMetadataOut$inboundSchema;
      LegacyJobMetadataOut$2.outboundSchema = exports.LegacyJobMetadataOut$outboundSchema;
    })(LegacyJobMetadataOut$ || (exports.LegacyJobMetadataOut$ = LegacyJobMetadataOut$ = {}));
    function legacyJobMetadataOutToJSON(legacyJobMetadataOut) {
      return JSON.stringify(exports.LegacyJobMetadataOut$outboundSchema.parse(legacyJobMetadataOut));
    }
    function legacyJobMetadataOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.LegacyJobMetadataOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LegacyJobMetadataOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/listfilesout.js
var require_listfilesout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/listfilesout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListFilesOut$ = exports.ListFilesOut$outboundSchema = exports.ListFilesOut$inboundSchema = void 0;
    exports.listFilesOutToJSON = listFilesOutToJSON;
    exports.listFilesOutFromJSON = listFilesOutFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var fileschema_js_1 = require_fileschema();
    exports.ListFilesOut$inboundSchema = z.object({
      data: z.array(fileschema_js_1.FileSchema$inboundSchema),
      object: z.string(),
      total: z.number().int()
    });
    exports.ListFilesOut$outboundSchema = z.object({
      data: z.array(fileschema_js_1.FileSchema$outboundSchema),
      object: z.string(),
      total: z.number().int()
    });
    var ListFilesOut$;
    (function(ListFilesOut$2) {
      ListFilesOut$2.inboundSchema = exports.ListFilesOut$inboundSchema;
      ListFilesOut$2.outboundSchema = exports.ListFilesOut$outboundSchema;
    })(ListFilesOut$ || (exports.ListFilesOut$ = ListFilesOut$ = {}));
    function listFilesOutToJSON(listFilesOut) {
      return JSON.stringify(exports.ListFilesOut$outboundSchema.parse(listFilesOut));
    }
    function listFilesOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ListFilesOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ListFilesOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/modellist.js
var require_modellist = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/modellist.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModelList$ = exports.ModelList$outboundSchema = exports.ModelList$inboundSchema = exports.Data$ = exports.Data$outboundSchema = exports.Data$inboundSchema = void 0;
    exports.dataToJSON = dataToJSON;
    exports.dataFromJSON = dataFromJSON;
    exports.modelListToJSON = modelListToJSON;
    exports.modelListFromJSON = modelListFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var basemodelcard_js_1 = require_basemodelcard();
    var ftmodelcard_js_1 = require_ftmodelcard();
    exports.Data$inboundSchema = z.union([
      basemodelcard_js_1.BaseModelCard$inboundSchema.and(z.object({ type: z.literal("base") }).transform((v) => ({
        type: v.type
      }))),
      ftmodelcard_js_1.FTModelCard$inboundSchema.and(z.object({ type: z.literal("fine-tuned") }).transform((v) => ({
        type: v.type
      })))
    ]);
    exports.Data$outboundSchema = z.union([
      basemodelcard_js_1.BaseModelCard$outboundSchema.and(z.object({ type: z.literal("base") }).transform((v) => ({
        type: v.type
      }))),
      ftmodelcard_js_1.FTModelCard$outboundSchema.and(z.object({ type: z.literal("fine-tuned") }).transform((v) => ({
        type: v.type
      })))
    ]);
    var Data$;
    (function(Data$2) {
      Data$2.inboundSchema = exports.Data$inboundSchema;
      Data$2.outboundSchema = exports.Data$outboundSchema;
    })(Data$ || (exports.Data$ = Data$ = {}));
    function dataToJSON(data) {
      return JSON.stringify(exports.Data$outboundSchema.parse(data));
    }
    function dataFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Data$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Data' from JSON`);
    }
    exports.ModelList$inboundSchema = z.object({
      object: z.string().default("list"),
      data: z.array(z.union([
        basemodelcard_js_1.BaseModelCard$inboundSchema.and(z.object({ type: z.literal("base") }).transform((v) => ({
          type: v.type
        }))),
        ftmodelcard_js_1.FTModelCard$inboundSchema.and(z.object({ type: z.literal("fine-tuned") }).transform((v) => ({
          type: v.type
        })))
      ])).optional()
    });
    exports.ModelList$outboundSchema = z.object({
      object: z.string().default("list"),
      data: z.array(z.union([
        basemodelcard_js_1.BaseModelCard$outboundSchema.and(z.object({ type: z.literal("base") }).transform((v) => ({
          type: v.type
        }))),
        ftmodelcard_js_1.FTModelCard$outboundSchema.and(z.object({ type: z.literal("fine-tuned") }).transform((v) => ({
          type: v.type
        })))
      ])).optional()
    });
    var ModelList$;
    (function(ModelList$2) {
      ModelList$2.inboundSchema = exports.ModelList$inboundSchema;
      ModelList$2.outboundSchema = exports.ModelList$outboundSchema;
    })(ModelList$ || (exports.ModelList$ = ModelList$ = {}));
    function modelListToJSON(modelList) {
      return JSON.stringify(exports.ModelList$outboundSchema.parse(modelList));
    }
    function modelListFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ModelList$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ModelList' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/ocrimageobject.js
var require_ocrimageobject = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/ocrimageobject.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OCRImageObject$ = exports.OCRImageObject$outboundSchema = exports.OCRImageObject$inboundSchema = void 0;
    exports.ocrImageObjectToJSON = ocrImageObjectToJSON;
    exports.ocrImageObjectFromJSON = ocrImageObjectFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.OCRImageObject$inboundSchema = z.object({
      id: z.string(),
      top_left_x: z.nullable(z.number().int()),
      top_left_y: z.nullable(z.number().int()),
      bottom_right_x: z.nullable(z.number().int()),
      bottom_right_y: z.nullable(z.number().int()),
      image_base64: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "top_left_x": "topLeftX",
        "top_left_y": "topLeftY",
        "bottom_right_x": "bottomRightX",
        "bottom_right_y": "bottomRightY",
        "image_base64": "imageBase64"
      });
    });
    exports.OCRImageObject$outboundSchema = z.object({
      id: z.string(),
      topLeftX: z.nullable(z.number().int()),
      topLeftY: z.nullable(z.number().int()),
      bottomRightX: z.nullable(z.number().int()),
      bottomRightY: z.nullable(z.number().int()),
      imageBase64: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        topLeftX: "top_left_x",
        topLeftY: "top_left_y",
        bottomRightX: "bottom_right_x",
        bottomRightY: "bottom_right_y",
        imageBase64: "image_base64"
      });
    });
    var OCRImageObject$;
    (function(OCRImageObject$2) {
      OCRImageObject$2.inboundSchema = exports.OCRImageObject$inboundSchema;
      OCRImageObject$2.outboundSchema = exports.OCRImageObject$outboundSchema;
    })(OCRImageObject$ || (exports.OCRImageObject$ = OCRImageObject$ = {}));
    function ocrImageObjectToJSON(ocrImageObject) {
      return JSON.stringify(exports.OCRImageObject$outboundSchema.parse(ocrImageObject));
    }
    function ocrImageObjectFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.OCRImageObject$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OCRImageObject' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/ocrpagedimensions.js
var require_ocrpagedimensions = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/ocrpagedimensions.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OCRPageDimensions$ = exports.OCRPageDimensions$outboundSchema = exports.OCRPageDimensions$inboundSchema = void 0;
    exports.ocrPageDimensionsToJSON = ocrPageDimensionsToJSON;
    exports.ocrPageDimensionsFromJSON = ocrPageDimensionsFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.OCRPageDimensions$inboundSchema = z.object({
      dpi: z.number().int(),
      height: z.number().int(),
      width: z.number().int()
    });
    exports.OCRPageDimensions$outboundSchema = z.object({
      dpi: z.number().int(),
      height: z.number().int(),
      width: z.number().int()
    });
    var OCRPageDimensions$;
    (function(OCRPageDimensions$2) {
      OCRPageDimensions$2.inboundSchema = exports.OCRPageDimensions$inboundSchema;
      OCRPageDimensions$2.outboundSchema = exports.OCRPageDimensions$outboundSchema;
    })(OCRPageDimensions$ || (exports.OCRPageDimensions$ = OCRPageDimensions$ = {}));
    function ocrPageDimensionsToJSON(ocrPageDimensions) {
      return JSON.stringify(exports.OCRPageDimensions$outboundSchema.parse(ocrPageDimensions));
    }
    function ocrPageDimensionsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.OCRPageDimensions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OCRPageDimensions' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/ocrpageobject.js
var require_ocrpageobject = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/ocrpageobject.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OCRPageObject$ = exports.OCRPageObject$outboundSchema = exports.OCRPageObject$inboundSchema = void 0;
    exports.ocrPageObjectToJSON = ocrPageObjectToJSON;
    exports.ocrPageObjectFromJSON = ocrPageObjectFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var ocrimageobject_js_1 = require_ocrimageobject();
    var ocrpagedimensions_js_1 = require_ocrpagedimensions();
    exports.OCRPageObject$inboundSchema = z.object({
      index: z.number().int(),
      markdown: z.string(),
      images: z.array(ocrimageobject_js_1.OCRImageObject$inboundSchema),
      dimensions: z.nullable(ocrpagedimensions_js_1.OCRPageDimensions$inboundSchema)
    });
    exports.OCRPageObject$outboundSchema = z.object({
      index: z.number().int(),
      markdown: z.string(),
      images: z.array(ocrimageobject_js_1.OCRImageObject$outboundSchema),
      dimensions: z.nullable(ocrpagedimensions_js_1.OCRPageDimensions$outboundSchema)
    });
    var OCRPageObject$;
    (function(OCRPageObject$2) {
      OCRPageObject$2.inboundSchema = exports.OCRPageObject$inboundSchema;
      OCRPageObject$2.outboundSchema = exports.OCRPageObject$outboundSchema;
    })(OCRPageObject$ || (exports.OCRPageObject$ = OCRPageObject$ = {}));
    function ocrPageObjectToJSON(ocrPageObject) {
      return JSON.stringify(exports.OCRPageObject$outboundSchema.parse(ocrPageObject));
    }
    function ocrPageObjectFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.OCRPageObject$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OCRPageObject' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/ocrrequest.js
var require_ocrrequest = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/ocrrequest.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OCRRequest$ = exports.OCRRequest$outboundSchema = exports.OCRRequest$inboundSchema = exports.Document$ = exports.Document$outboundSchema = exports.Document$inboundSchema = void 0;
    exports.documentToJSON = documentToJSON;
    exports.documentFromJSON = documentFromJSON;
    exports.ocrRequestToJSON = ocrRequestToJSON;
    exports.ocrRequestFromJSON = ocrRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var documenturlchunk_js_1 = require_documenturlchunk();
    var imageurlchunk_js_1 = require_imageurlchunk();
    exports.Document$inboundSchema = z.union([imageurlchunk_js_1.ImageURLChunk$inboundSchema, documenturlchunk_js_1.DocumentURLChunk$inboundSchema]);
    exports.Document$outboundSchema = z.union([imageurlchunk_js_1.ImageURLChunk$outboundSchema, documenturlchunk_js_1.DocumentURLChunk$outboundSchema]);
    var Document$;
    (function(Document$2) {
      Document$2.inboundSchema = exports.Document$inboundSchema;
      Document$2.outboundSchema = exports.Document$outboundSchema;
    })(Document$ || (exports.Document$ = Document$ = {}));
    function documentToJSON(document) {
      return JSON.stringify(exports.Document$outboundSchema.parse(document));
    }
    function documentFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Document$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Document' from JSON`);
    }
    exports.OCRRequest$inboundSchema = z.object({
      model: z.nullable(z.string()),
      id: z.string().optional(),
      document: z.union([
        imageurlchunk_js_1.ImageURLChunk$inboundSchema,
        documenturlchunk_js_1.DocumentURLChunk$inboundSchema
      ]),
      pages: z.nullable(z.array(z.number().int())).optional(),
      include_image_base64: z.nullable(z.boolean()).optional(),
      image_limit: z.nullable(z.number().int()).optional(),
      image_min_size: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "include_image_base64": "includeImageBase64",
        "image_limit": "imageLimit",
        "image_min_size": "imageMinSize"
      });
    });
    exports.OCRRequest$outboundSchema = z.object({
      model: z.nullable(z.string()),
      id: z.string().optional(),
      document: z.union([
        imageurlchunk_js_1.ImageURLChunk$outboundSchema,
        documenturlchunk_js_1.DocumentURLChunk$outboundSchema
      ]),
      pages: z.nullable(z.array(z.number().int())).optional(),
      includeImageBase64: z.nullable(z.boolean()).optional(),
      imageLimit: z.nullable(z.number().int()).optional(),
      imageMinSize: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        includeImageBase64: "include_image_base64",
        imageLimit: "image_limit",
        imageMinSize: "image_min_size"
      });
    });
    var OCRRequest$;
    (function(OCRRequest$2) {
      OCRRequest$2.inboundSchema = exports.OCRRequest$inboundSchema;
      OCRRequest$2.outboundSchema = exports.OCRRequest$outboundSchema;
    })(OCRRequest$ || (exports.OCRRequest$ = OCRRequest$ = {}));
    function ocrRequestToJSON(ocrRequest) {
      return JSON.stringify(exports.OCRRequest$outboundSchema.parse(ocrRequest));
    }
    function ocrRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.OCRRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OCRRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/ocrusageinfo.js
var require_ocrusageinfo = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/ocrusageinfo.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OCRUsageInfo$ = exports.OCRUsageInfo$outboundSchema = exports.OCRUsageInfo$inboundSchema = void 0;
    exports.ocrUsageInfoToJSON = ocrUsageInfoToJSON;
    exports.ocrUsageInfoFromJSON = ocrUsageInfoFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.OCRUsageInfo$inboundSchema = z.object({
      pages_processed: z.number().int(),
      doc_size_bytes: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "pages_processed": "pagesProcessed",
        "doc_size_bytes": "docSizeBytes"
      });
    });
    exports.OCRUsageInfo$outboundSchema = z.object({
      pagesProcessed: z.number().int(),
      docSizeBytes: z.nullable(z.number().int()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        pagesProcessed: "pages_processed",
        docSizeBytes: "doc_size_bytes"
      });
    });
    var OCRUsageInfo$;
    (function(OCRUsageInfo$2) {
      OCRUsageInfo$2.inboundSchema = exports.OCRUsageInfo$inboundSchema;
      OCRUsageInfo$2.outboundSchema = exports.OCRUsageInfo$outboundSchema;
    })(OCRUsageInfo$ || (exports.OCRUsageInfo$ = OCRUsageInfo$ = {}));
    function ocrUsageInfoToJSON(ocrUsageInfo) {
      return JSON.stringify(exports.OCRUsageInfo$outboundSchema.parse(ocrUsageInfo));
    }
    function ocrUsageInfoFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.OCRUsageInfo$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OCRUsageInfo' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/ocrresponse.js
var require_ocrresponse = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/ocrresponse.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OCRResponse$ = exports.OCRResponse$outboundSchema = exports.OCRResponse$inboundSchema = void 0;
    exports.ocrResponseToJSON = ocrResponseToJSON;
    exports.ocrResponseFromJSON = ocrResponseFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var ocrpageobject_js_1 = require_ocrpageobject();
    var ocrusageinfo_js_1 = require_ocrusageinfo();
    exports.OCRResponse$inboundSchema = z.object({
      pages: z.array(ocrpageobject_js_1.OCRPageObject$inboundSchema),
      model: z.string(),
      usage_info: ocrusageinfo_js_1.OCRUsageInfo$inboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "usage_info": "usageInfo"
      });
    });
    exports.OCRResponse$outboundSchema = z.object({
      pages: z.array(ocrpageobject_js_1.OCRPageObject$outboundSchema),
      model: z.string(),
      usageInfo: ocrusageinfo_js_1.OCRUsageInfo$outboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        usageInfo: "usage_info"
      });
    });
    var OCRResponse$;
    (function(OCRResponse$2) {
      OCRResponse$2.inboundSchema = exports.OCRResponse$inboundSchema;
      OCRResponse$2.outboundSchema = exports.OCRResponse$outboundSchema;
    })(OCRResponse$ || (exports.OCRResponse$ = OCRResponse$ = {}));
    function ocrResponseToJSON(ocrResponse) {
      return JSON.stringify(exports.OCRResponse$outboundSchema.parse(ocrResponse));
    }
    function ocrResponseFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.OCRResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OCRResponse' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/retrievefileout.js
var require_retrievefileout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/retrievefileout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RetrieveFileOut$ = exports.RetrieveFileOut$outboundSchema = exports.RetrieveFileOut$inboundSchema = void 0;
    exports.retrieveFileOutToJSON = retrieveFileOutToJSON;
    exports.retrieveFileOutFromJSON = retrieveFileOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var filepurpose_js_1 = require_filepurpose();
    var sampletype_js_1 = require_sampletype();
    var source_js_1 = require_source();
    exports.RetrieveFileOut$inboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      bytes: z.number().int(),
      created_at: z.number().int(),
      filename: z.string(),
      purpose: filepurpose_js_1.FilePurpose$inboundSchema,
      sample_type: sampletype_js_1.SampleType$inboundSchema,
      num_lines: z.nullable(z.number().int()).optional(),
      source: source_js_1.Source$inboundSchema,
      deleted: z.boolean()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "bytes": "sizeBytes",
        "created_at": "createdAt",
        "sample_type": "sampleType",
        "num_lines": "numLines"
      });
    });
    exports.RetrieveFileOut$outboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      sizeBytes: z.number().int(),
      createdAt: z.number().int(),
      filename: z.string(),
      purpose: filepurpose_js_1.FilePurpose$outboundSchema,
      sampleType: sampletype_js_1.SampleType$outboundSchema,
      numLines: z.nullable(z.number().int()).optional(),
      source: source_js_1.Source$outboundSchema,
      deleted: z.boolean()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        sizeBytes: "bytes",
        createdAt: "created_at",
        sampleType: "sample_type",
        numLines: "num_lines"
      });
    });
    var RetrieveFileOut$;
    (function(RetrieveFileOut$2) {
      RetrieveFileOut$2.inboundSchema = exports.RetrieveFileOut$inboundSchema;
      RetrieveFileOut$2.outboundSchema = exports.RetrieveFileOut$outboundSchema;
    })(RetrieveFileOut$ || (exports.RetrieveFileOut$ = RetrieveFileOut$ = {}));
    function retrieveFileOutToJSON(retrieveFileOut) {
      return JSON.stringify(exports.RetrieveFileOut$outboundSchema.parse(retrieveFileOut));
    }
    function retrieveFileOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RetrieveFileOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RetrieveFileOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/security.js
var require_security2 = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/security.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Security$ = exports.Security$outboundSchema = exports.Security$inboundSchema = void 0;
    exports.securityToJSON = securityToJSON;
    exports.securityFromJSON = securityFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.Security$inboundSchema = z.object({
      ApiKey: z.string().optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "ApiKey": "apiKey"
      });
    });
    exports.Security$outboundSchema = z.object({
      apiKey: z.string().optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        apiKey: "ApiKey"
      });
    });
    var Security$;
    (function(Security$2) {
      Security$2.inboundSchema = exports.Security$inboundSchema;
      Security$2.outboundSchema = exports.Security$outboundSchema;
    })(Security$ || (exports.Security$ = Security$ = {}));
    function securityToJSON(security) {
      return JSON.stringify(exports.Security$outboundSchema.parse(security));
    }
    function securityFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Security$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Security' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/unarchiveftmodelout.js
var require_unarchiveftmodelout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/unarchiveftmodelout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnarchiveFTModelOut$ = exports.UnarchiveFTModelOut$outboundSchema = exports.UnarchiveFTModelOut$inboundSchema = exports.UnarchiveFTModelOutObject$ = exports.UnarchiveFTModelOutObject$outboundSchema = exports.UnarchiveFTModelOutObject$inboundSchema = exports.UnarchiveFTModelOutObject = void 0;
    exports.unarchiveFTModelOutToJSON = unarchiveFTModelOutToJSON;
    exports.unarchiveFTModelOutFromJSON = unarchiveFTModelOutFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.UnarchiveFTModelOutObject = {
      Model: "model"
    };
    exports.UnarchiveFTModelOutObject$inboundSchema = z.nativeEnum(exports.UnarchiveFTModelOutObject);
    exports.UnarchiveFTModelOutObject$outboundSchema = exports.UnarchiveFTModelOutObject$inboundSchema;
    var UnarchiveFTModelOutObject$;
    (function(UnarchiveFTModelOutObject$2) {
      UnarchiveFTModelOutObject$2.inboundSchema = exports.UnarchiveFTModelOutObject$inboundSchema;
      UnarchiveFTModelOutObject$2.outboundSchema = exports.UnarchiveFTModelOutObject$outboundSchema;
    })(UnarchiveFTModelOutObject$ || (exports.UnarchiveFTModelOutObject$ = UnarchiveFTModelOutObject$ = {}));
    exports.UnarchiveFTModelOut$inboundSchema = z.object({
      id: z.string(),
      object: z.literal("model").default("model"),
      archived: z.boolean().default(false)
    });
    exports.UnarchiveFTModelOut$outboundSchema = z.object({
      id: z.string(),
      object: z.literal("model").default("model"),
      archived: z.boolean().default(false)
    });
    var UnarchiveFTModelOut$;
    (function(UnarchiveFTModelOut$2) {
      UnarchiveFTModelOut$2.inboundSchema = exports.UnarchiveFTModelOut$inboundSchema;
      UnarchiveFTModelOut$2.outboundSchema = exports.UnarchiveFTModelOut$outboundSchema;
    })(UnarchiveFTModelOut$ || (exports.UnarchiveFTModelOut$ = UnarchiveFTModelOut$ = {}));
    function unarchiveFTModelOutToJSON(unarchiveFTModelOut) {
      return JSON.stringify(exports.UnarchiveFTModelOut$outboundSchema.parse(unarchiveFTModelOut));
    }
    function unarchiveFTModelOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UnarchiveFTModelOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UnarchiveFTModelOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/updateftmodelin.js
var require_updateftmodelin = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/updateftmodelin.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateFTModelIn$ = exports.UpdateFTModelIn$outboundSchema = exports.UpdateFTModelIn$inboundSchema = void 0;
    exports.updateFTModelInToJSON = updateFTModelInToJSON;
    exports.updateFTModelInFromJSON = updateFTModelInFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.UpdateFTModelIn$inboundSchema = z.object({
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional()
    });
    exports.UpdateFTModelIn$outboundSchema = z.object({
      name: z.nullable(z.string()).optional(),
      description: z.nullable(z.string()).optional()
    });
    var UpdateFTModelIn$;
    (function(UpdateFTModelIn$2) {
      UpdateFTModelIn$2.inboundSchema = exports.UpdateFTModelIn$inboundSchema;
      UpdateFTModelIn$2.outboundSchema = exports.UpdateFTModelIn$outboundSchema;
    })(UpdateFTModelIn$ || (exports.UpdateFTModelIn$ = UpdateFTModelIn$ = {}));
    function updateFTModelInToJSON(updateFTModelIn) {
      return JSON.stringify(exports.UpdateFTModelIn$outboundSchema.parse(updateFTModelIn));
    }
    function updateFTModelInFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UpdateFTModelIn$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpdateFTModelIn' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/uploadfileout.js
var require_uploadfileout = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/uploadfileout.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UploadFileOut$ = exports.UploadFileOut$outboundSchema = exports.UploadFileOut$inboundSchema = void 0;
    exports.uploadFileOutToJSON = uploadFileOutToJSON;
    exports.uploadFileOutFromJSON = uploadFileOutFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var filepurpose_js_1 = require_filepurpose();
    var sampletype_js_1 = require_sampletype();
    var source_js_1 = require_source();
    exports.UploadFileOut$inboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      bytes: z.number().int(),
      created_at: z.number().int(),
      filename: z.string(),
      purpose: filepurpose_js_1.FilePurpose$inboundSchema,
      sample_type: sampletype_js_1.SampleType$inboundSchema,
      num_lines: z.nullable(z.number().int()).optional(),
      source: source_js_1.Source$inboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "bytes": "sizeBytes",
        "created_at": "createdAt",
        "sample_type": "sampleType",
        "num_lines": "numLines"
      });
    });
    exports.UploadFileOut$outboundSchema = z.object({
      id: z.string(),
      object: z.string(),
      sizeBytes: z.number().int(),
      createdAt: z.number().int(),
      filename: z.string(),
      purpose: filepurpose_js_1.FilePurpose$outboundSchema,
      sampleType: sampletype_js_1.SampleType$outboundSchema,
      numLines: z.nullable(z.number().int()).optional(),
      source: source_js_1.Source$outboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        sizeBytes: "bytes",
        createdAt: "created_at",
        sampleType: "sample_type",
        numLines: "num_lines"
      });
    });
    var UploadFileOut$;
    (function(UploadFileOut$2) {
      UploadFileOut$2.inboundSchema = exports.UploadFileOut$inboundSchema;
      UploadFileOut$2.outboundSchema = exports.UploadFileOut$outboundSchema;
    })(UploadFileOut$ || (exports.UploadFileOut$ = UploadFileOut$ = {}));
    function uploadFileOutToJSON(uploadFileOut) {
      return JSON.stringify(exports.UploadFileOut$outboundSchema.parse(uploadFileOut));
    }
    function uploadFileOutFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.UploadFileOut$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UploadFileOut' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/validationerror.js
var require_validationerror = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/validationerror.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationError$ = exports.ValidationError$outboundSchema = exports.ValidationError$inboundSchema = exports.Loc$ = exports.Loc$outboundSchema = exports.Loc$inboundSchema = void 0;
    exports.locToJSON = locToJSON;
    exports.locFromJSON = locFromJSON;
    exports.validationErrorToJSON = validationErrorToJSON;
    exports.validationErrorFromJSON = validationErrorFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    exports.Loc$inboundSchema = z.union([z.string(), z.number().int()]);
    exports.Loc$outboundSchema = z.union([z.string(), z.number().int()]);
    var Loc$;
    (function(Loc$2) {
      Loc$2.inboundSchema = exports.Loc$inboundSchema;
      Loc$2.outboundSchema = exports.Loc$outboundSchema;
    })(Loc$ || (exports.Loc$ = Loc$ = {}));
    function locToJSON(loc) {
      return JSON.stringify(exports.Loc$outboundSchema.parse(loc));
    }
    function locFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Loc$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Loc' from JSON`);
    }
    exports.ValidationError$inboundSchema = z.object({
      loc: z.array(z.union([z.string(), z.number().int()])),
      msg: z.string(),
      type: z.string()
    });
    exports.ValidationError$outboundSchema = z.object({
      loc: z.array(z.union([z.string(), z.number().int()])),
      msg: z.string(),
      type: z.string()
    });
    var ValidationError$;
    (function(ValidationError$2) {
      ValidationError$2.inboundSchema = exports.ValidationError$inboundSchema;
      ValidationError$2.outboundSchema = exports.ValidationError$outboundSchema;
    })(ValidationError$ || (exports.ValidationError$ = ValidationError$ = {}));
    function validationErrorToJSON(validationError) {
      return JSON.stringify(exports.ValidationError$outboundSchema.parse(validationError));
    }
    function validationErrorFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ValidationError$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ValidationError' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/components/index.js
var require_components = __commonJS({
  "node_modules/@mistralai/mistralai/models/components/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_agentscompletionrequest(), exports);
    __exportStar(require_agentscompletionstreamrequest(), exports);
    __exportStar(require_apiendpoint(), exports);
    __exportStar(require_archiveftmodelout(), exports);
    __exportStar(require_assistantmessage(), exports);
    __exportStar(require_basemodelcard(), exports);
    __exportStar(require_batcherror(), exports);
    __exportStar(require_batchjobin(), exports);
    __exportStar(require_batchjobout(), exports);
    __exportStar(require_batchjobsout(), exports);
    __exportStar(require_batchjobstatus(), exports);
    __exportStar(require_chatcompletionchoice(), exports);
    __exportStar(require_chatcompletionrequest(), exports);
    __exportStar(require_chatcompletionresponse(), exports);
    __exportStar(require_chatcompletionstreamrequest(), exports);
    __exportStar(require_chatmoderationrequest(), exports);
    __exportStar(require_checkpointout(), exports);
    __exportStar(require_classificationobject(), exports);
    __exportStar(require_classificationrequest(), exports);
    __exportStar(require_classificationresponse(), exports);
    __exportStar(require_completionchunk(), exports);
    __exportStar(require_completionevent(), exports);
    __exportStar(require_completionresponsestreamchoice(), exports);
    __exportStar(require_contentchunk(), exports);
    __exportStar(require_deletefileout(), exports);
    __exportStar(require_deletemodelout(), exports);
    __exportStar(require_deltamessage(), exports);
    __exportStar(require_detailedjobout(), exports);
    __exportStar(require_documenturlchunk(), exports);
    __exportStar(require_embeddingrequest(), exports);
    __exportStar(require_embeddingresponse(), exports);
    __exportStar(require_embeddingresponsedata(), exports);
    __exportStar(require_eventout(), exports);
    __exportStar(require_filepurpose(), exports);
    __exportStar(require_fileschema(), exports);
    __exportStar(require_filesignedurl(), exports);
    __exportStar(require_fimcompletionrequest(), exports);
    __exportStar(require_fimcompletionresponse(), exports);
    __exportStar(require_fimcompletionstreamrequest(), exports);
    __exportStar(require_ftmodelcapabilitiesout(), exports);
    __exportStar(require_ftmodelcard(), exports);
    __exportStar(require_ftmodelout(), exports);
    __exportStar(require_function(), exports);
    __exportStar(require_functioncall(), exports);
    __exportStar(require_functionname(), exports);
    __exportStar(require_githubrepositoryin(), exports);
    __exportStar(require_githubrepositoryout(), exports);
    __exportStar(require_imageurl(), exports);
    __exportStar(require_imageurlchunk(), exports);
    __exportStar(require_jobin(), exports);
    __exportStar(require_jobmetadataout(), exports);
    __exportStar(require_jobout(), exports);
    __exportStar(require_jobsout(), exports);
    __exportStar(require_jsonschema(), exports);
    __exportStar(require_legacyjobmetadataout(), exports);
    __exportStar(require_listfilesout(), exports);
    __exportStar(require_metricout(), exports);
    __exportStar(require_modelcapabilities(), exports);
    __exportStar(require_modellist(), exports);
    __exportStar(require_ocrimageobject(), exports);
    __exportStar(require_ocrpagedimensions(), exports);
    __exportStar(require_ocrpageobject(), exports);
    __exportStar(require_ocrrequest(), exports);
    __exportStar(require_ocrresponse(), exports);
    __exportStar(require_ocrusageinfo(), exports);
    __exportStar(require_prediction(), exports);
    __exportStar(require_referencechunk(), exports);
    __exportStar(require_responseformat(), exports);
    __exportStar(require_responseformats(), exports);
    __exportStar(require_retrievefileout(), exports);
    __exportStar(require_sampletype(), exports);
    __exportStar(require_security2(), exports);
    __exportStar(require_source(), exports);
    __exportStar(require_systemmessage(), exports);
    __exportStar(require_textchunk(), exports);
    __exportStar(require_tool(), exports);
    __exportStar(require_toolcall(), exports);
    __exportStar(require_toolchoice(), exports);
    __exportStar(require_toolchoiceenum(), exports);
    __exportStar(require_toolmessage(), exports);
    __exportStar(require_tooltypes(), exports);
    __exportStar(require_trainingfile(), exports);
    __exportStar(require_trainingparameters(), exports);
    __exportStar(require_trainingparametersin(), exports);
    __exportStar(require_unarchiveftmodelout(), exports);
    __exportStar(require_updateftmodelin(), exports);
    __exportStar(require_uploadfileout(), exports);
    __exportStar(require_usageinfo(), exports);
    __exportStar(require_usermessage(), exports);
    __exportStar(require_validationerror(), exports);
    __exportStar(require_wandbintegration(), exports);
    __exportStar(require_wandbintegrationout(), exports);
  }
});

// node_modules/@mistralai/mistralai/models/errors/httpvalidationerror.js
var require_httpvalidationerror = __commonJS({
  "node_modules/@mistralai/mistralai/models/errors/httpvalidationerror.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HTTPValidationError$ = exports.HTTPValidationError$outboundSchema = exports.HTTPValidationError$inboundSchema = exports.HTTPValidationError = void 0;
    var z = __importStar(require_lib());
    var components = __importStar(require_components());
    var HTTPValidationError = class extends Error {
      constructor(err) {
        const message = "message" in err && typeof err.message === "string" ? err.message : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;
        if (err.detail != null)
          this.detail = err.detail;
        this.name = "HTTPValidationError";
      }
    };
    exports.HTTPValidationError = HTTPValidationError;
    exports.HTTPValidationError$inboundSchema = z.object({
      detail: z.array(components.ValidationError$inboundSchema).optional()
    }).transform((v) => {
      return new HTTPValidationError(v);
    });
    exports.HTTPValidationError$outboundSchema = z.instanceof(HTTPValidationError).transform((v) => v.data$).pipe(z.object({
      detail: z.array(components.ValidationError$outboundSchema).optional()
    }));
    var HTTPValidationError$;
    (function(HTTPValidationError$2) {
      HTTPValidationError$2.inboundSchema = exports.HTTPValidationError$inboundSchema;
      HTTPValidationError$2.outboundSchema = exports.HTTPValidationError$outboundSchema;
    })(HTTPValidationError$ || (exports.HTTPValidationError$ = HTTPValidationError$ = {}));
  }
});

// node_modules/@mistralai/mistralai/models/errors/index.js
var require_errors2 = __commonJS({
  "node_modules/@mistralai/mistralai/models/errors/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_httpclienterrors(), exports);
    __exportStar(require_httpvalidationerror(), exports);
    __exportStar(require_sdkerror(), exports);
    __exportStar(require_sdkvalidationerror(), exports);
  }
});

// node_modules/@mistralai/mistralai/types/async.js
var require_async = __commonJS({
  "node_modules/@mistralai/mistralai/types/async.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _APIPromise_promise;
    var _APIPromise_unwrapped;
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.APIPromise = void 0;
    var APIPromise = class {
      constructor(p) {
        _APIPromise_promise.set(this, void 0);
        _APIPromise_unwrapped.set(this, void 0);
        this[_a] = "APIPromise";
        __classPrivateFieldSet(this, _APIPromise_promise, p instanceof Promise ? p : Promise.resolve(p), "f");
        __classPrivateFieldSet(this, _APIPromise_unwrapped, p instanceof Promise ? __classPrivateFieldGet(this, _APIPromise_promise, "f").then(([value]) => value) : Promise.resolve(p[0]), "f");
      }
      then(onfulfilled, onrejected) {
        return __classPrivateFieldGet(this, _APIPromise_promise, "f").then(onfulfilled ? ([value]) => onfulfilled(value) : void 0, onrejected);
      }
      catch(onrejected) {
        return __classPrivateFieldGet(this, _APIPromise_unwrapped, "f").catch(onrejected);
      }
      finally(onfinally) {
        return __classPrivateFieldGet(this, _APIPromise_unwrapped, "f").finally(onfinally);
      }
      $inspect() {
        return __classPrivateFieldGet(this, _APIPromise_promise, "f");
      }
    };
    exports.APIPromise = APIPromise;
    _APIPromise_promise = /* @__PURE__ */ new WeakMap(), _APIPromise_unwrapped = /* @__PURE__ */ new WeakMap(), _a = Symbol.toStringTag;
  }
});

// node_modules/@mistralai/mistralai/funcs/agentsComplete.js
var require_agentsComplete = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/agentsComplete.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.agentsComplete = agentsComplete;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    var async_js_1 = require_async();
    function agentsComplete(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.AgentsCompletionRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/agents/completions")();
      const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "agents_completion_v1_agents_completions_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.ChatCompletionResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/agentsStream.js
var require_agentsStream = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/agentsStream.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.agentsStream = agentsStream;
    var z = __importStar(require_lib());
    var encodings_js_1 = require_encodings();
    var event_streams_js_1 = require_event_streams();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    var async_js_1 = require_async();
    function agentsStream(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.AgentsCompletionStreamRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/agents/completions#stream")();
      const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "text/event-stream"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "stream_agents",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.sse(200, z.instanceof(ReadableStream).transform((stream) => {
        return new event_streams_js_1.EventStream({
          stream,
          decoder(rawEvent) {
            const schema = components.CompletionEvent$inboundSchema;
            return schema.parse(rawEvent);
          }
        });
      }), { sseSentinel: "[DONE]" }), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/agents.js
var require_agents = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/agents.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Agents = void 0;
    var agentsComplete_js_1 = require_agentsComplete();
    var agentsStream_js_1 = require_agentsStream();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var Agents = class extends sdks_js_1.ClientSDK {
      /**
       * Agents Completion
       */
      async complete(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, agentsComplete_js_1.agentsComplete)(this, request, options));
      }
      /**
       * Stream Agents completion
       *
       * @remarks
       * Mistral AI provides the ability to stream responses back to a client in order to allow partial results for certain requests. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
       */
      async stream(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, agentsStream_js_1.agentsStream)(this, request, options));
      }
    };
    exports.Agents = Agents;
  }
});

// node_modules/@mistralai/mistralai/models/operations/deletemodelv1modelsmodeliddelete.js
var require_deletemodelv1modelsmodeliddelete = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/deletemodelv1modelsmodeliddelete.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteModelV1ModelsModelIdDeleteRequest$ = exports.DeleteModelV1ModelsModelIdDeleteRequest$outboundSchema = exports.DeleteModelV1ModelsModelIdDeleteRequest$inboundSchema = void 0;
    exports.deleteModelV1ModelsModelIdDeleteRequestToJSON = deleteModelV1ModelsModelIdDeleteRequestToJSON;
    exports.deleteModelV1ModelsModelIdDeleteRequestFromJSON = deleteModelV1ModelsModelIdDeleteRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.DeleteModelV1ModelsModelIdDeleteRequest$inboundSchema = z.object({
      model_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "model_id": "modelId"
      });
    });
    exports.DeleteModelV1ModelsModelIdDeleteRequest$outboundSchema = z.object({
      modelId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        modelId: "model_id"
      });
    });
    var DeleteModelV1ModelsModelIdDeleteRequest$;
    (function(DeleteModelV1ModelsModelIdDeleteRequest$2) {
      DeleteModelV1ModelsModelIdDeleteRequest$2.inboundSchema = exports.DeleteModelV1ModelsModelIdDeleteRequest$inboundSchema;
      DeleteModelV1ModelsModelIdDeleteRequest$2.outboundSchema = exports.DeleteModelV1ModelsModelIdDeleteRequest$outboundSchema;
    })(DeleteModelV1ModelsModelIdDeleteRequest$ || (exports.DeleteModelV1ModelsModelIdDeleteRequest$ = DeleteModelV1ModelsModelIdDeleteRequest$ = {}));
    function deleteModelV1ModelsModelIdDeleteRequestToJSON(deleteModelV1ModelsModelIdDeleteRequest) {
      return JSON.stringify(exports.DeleteModelV1ModelsModelIdDeleteRequest$outboundSchema.parse(deleteModelV1ModelsModelIdDeleteRequest));
    }
    function deleteModelV1ModelsModelIdDeleteRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DeleteModelV1ModelsModelIdDeleteRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DeleteModelV1ModelsModelIdDeleteRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/filesapiroutesdeletefile.js
var require_filesapiroutesdeletefile = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/filesapiroutesdeletefile.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilesApiRoutesDeleteFileRequest$ = exports.FilesApiRoutesDeleteFileRequest$outboundSchema = exports.FilesApiRoutesDeleteFileRequest$inboundSchema = void 0;
    exports.filesApiRoutesDeleteFileRequestToJSON = filesApiRoutesDeleteFileRequestToJSON;
    exports.filesApiRoutesDeleteFileRequestFromJSON = filesApiRoutesDeleteFileRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.FilesApiRoutesDeleteFileRequest$inboundSchema = z.object({
      file_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "file_id": "fileId"
      });
    });
    exports.FilesApiRoutesDeleteFileRequest$outboundSchema = z.object({
      fileId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        fileId: "file_id"
      });
    });
    var FilesApiRoutesDeleteFileRequest$;
    (function(FilesApiRoutesDeleteFileRequest$2) {
      FilesApiRoutesDeleteFileRequest$2.inboundSchema = exports.FilesApiRoutesDeleteFileRequest$inboundSchema;
      FilesApiRoutesDeleteFileRequest$2.outboundSchema = exports.FilesApiRoutesDeleteFileRequest$outboundSchema;
    })(FilesApiRoutesDeleteFileRequest$ || (exports.FilesApiRoutesDeleteFileRequest$ = FilesApiRoutesDeleteFileRequest$ = {}));
    function filesApiRoutesDeleteFileRequestToJSON(filesApiRoutesDeleteFileRequest) {
      return JSON.stringify(exports.FilesApiRoutesDeleteFileRequest$outboundSchema.parse(filesApiRoutesDeleteFileRequest));
    }
    function filesApiRoutesDeleteFileRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FilesApiRoutesDeleteFileRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesApiRoutesDeleteFileRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/filesapiroutesdownloadfile.js
var require_filesapiroutesdownloadfile = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/filesapiroutesdownloadfile.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilesApiRoutesDownloadFileRequest$ = exports.FilesApiRoutesDownloadFileRequest$outboundSchema = exports.FilesApiRoutesDownloadFileRequest$inboundSchema = void 0;
    exports.filesApiRoutesDownloadFileRequestToJSON = filesApiRoutesDownloadFileRequestToJSON;
    exports.filesApiRoutesDownloadFileRequestFromJSON = filesApiRoutesDownloadFileRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.FilesApiRoutesDownloadFileRequest$inboundSchema = z.object({
      file_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "file_id": "fileId"
      });
    });
    exports.FilesApiRoutesDownloadFileRequest$outboundSchema = z.object({
      fileId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        fileId: "file_id"
      });
    });
    var FilesApiRoutesDownloadFileRequest$;
    (function(FilesApiRoutesDownloadFileRequest$2) {
      FilesApiRoutesDownloadFileRequest$2.inboundSchema = exports.FilesApiRoutesDownloadFileRequest$inboundSchema;
      FilesApiRoutesDownloadFileRequest$2.outboundSchema = exports.FilesApiRoutesDownloadFileRequest$outboundSchema;
    })(FilesApiRoutesDownloadFileRequest$ || (exports.FilesApiRoutesDownloadFileRequest$ = FilesApiRoutesDownloadFileRequest$ = {}));
    function filesApiRoutesDownloadFileRequestToJSON(filesApiRoutesDownloadFileRequest) {
      return JSON.stringify(exports.FilesApiRoutesDownloadFileRequest$outboundSchema.parse(filesApiRoutesDownloadFileRequest));
    }
    function filesApiRoutesDownloadFileRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FilesApiRoutesDownloadFileRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesApiRoutesDownloadFileRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/filesapiroutesgetsignedurl.js
var require_filesapiroutesgetsignedurl = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/filesapiroutesgetsignedurl.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilesApiRoutesGetSignedUrlRequest$ = exports.FilesApiRoutesGetSignedUrlRequest$outboundSchema = exports.FilesApiRoutesGetSignedUrlRequest$inboundSchema = void 0;
    exports.filesApiRoutesGetSignedUrlRequestToJSON = filesApiRoutesGetSignedUrlRequestToJSON;
    exports.filesApiRoutesGetSignedUrlRequestFromJSON = filesApiRoutesGetSignedUrlRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.FilesApiRoutesGetSignedUrlRequest$inboundSchema = z.object({
      file_id: z.string(),
      expiry: z.number().int().default(24)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "file_id": "fileId"
      });
    });
    exports.FilesApiRoutesGetSignedUrlRequest$outboundSchema = z.object({
      fileId: z.string(),
      expiry: z.number().int().default(24)
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        fileId: "file_id"
      });
    });
    var FilesApiRoutesGetSignedUrlRequest$;
    (function(FilesApiRoutesGetSignedUrlRequest$2) {
      FilesApiRoutesGetSignedUrlRequest$2.inboundSchema = exports.FilesApiRoutesGetSignedUrlRequest$inboundSchema;
      FilesApiRoutesGetSignedUrlRequest$2.outboundSchema = exports.FilesApiRoutesGetSignedUrlRequest$outboundSchema;
    })(FilesApiRoutesGetSignedUrlRequest$ || (exports.FilesApiRoutesGetSignedUrlRequest$ = FilesApiRoutesGetSignedUrlRequest$ = {}));
    function filesApiRoutesGetSignedUrlRequestToJSON(filesApiRoutesGetSignedUrlRequest) {
      return JSON.stringify(exports.FilesApiRoutesGetSignedUrlRequest$outboundSchema.parse(filesApiRoutesGetSignedUrlRequest));
    }
    function filesApiRoutesGetSignedUrlRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FilesApiRoutesGetSignedUrlRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesApiRoutesGetSignedUrlRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/filesapirouteslistfiles.js
var require_filesapirouteslistfiles = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/filesapirouteslistfiles.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilesApiRoutesListFilesRequest$ = exports.FilesApiRoutesListFilesRequest$outboundSchema = exports.FilesApiRoutesListFilesRequest$inboundSchema = void 0;
    exports.filesApiRoutesListFilesRequestToJSON = filesApiRoutesListFilesRequestToJSON;
    exports.filesApiRoutesListFilesRequestFromJSON = filesApiRoutesListFilesRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var components = __importStar(require_components());
    exports.FilesApiRoutesListFilesRequest$inboundSchema = z.object({
      page: z.number().int().default(0),
      page_size: z.number().int().default(100),
      sample_type: z.nullable(z.array(components.SampleType$inboundSchema)).optional(),
      source: z.nullable(z.array(components.Source$inboundSchema)).optional(),
      search: z.nullable(z.string()).optional(),
      purpose: z.nullable(components.FilePurpose$inboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "page_size": "pageSize",
        "sample_type": "sampleType"
      });
    });
    exports.FilesApiRoutesListFilesRequest$outboundSchema = z.object({
      page: z.number().int().default(0),
      pageSize: z.number().int().default(100),
      sampleType: z.nullable(z.array(components.SampleType$outboundSchema)).optional(),
      source: z.nullable(z.array(components.Source$outboundSchema)).optional(),
      search: z.nullable(z.string()).optional(),
      purpose: z.nullable(components.FilePurpose$outboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        pageSize: "page_size",
        sampleType: "sample_type"
      });
    });
    var FilesApiRoutesListFilesRequest$;
    (function(FilesApiRoutesListFilesRequest$2) {
      FilesApiRoutesListFilesRequest$2.inboundSchema = exports.FilesApiRoutesListFilesRequest$inboundSchema;
      FilesApiRoutesListFilesRequest$2.outboundSchema = exports.FilesApiRoutesListFilesRequest$outboundSchema;
    })(FilesApiRoutesListFilesRequest$ || (exports.FilesApiRoutesListFilesRequest$ = FilesApiRoutesListFilesRequest$ = {}));
    function filesApiRoutesListFilesRequestToJSON(filesApiRoutesListFilesRequest) {
      return JSON.stringify(exports.FilesApiRoutesListFilesRequest$outboundSchema.parse(filesApiRoutesListFilesRequest));
    }
    function filesApiRoutesListFilesRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FilesApiRoutesListFilesRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesApiRoutesListFilesRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/filesapiroutesretrievefile.js
var require_filesapiroutesretrievefile = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/filesapiroutesretrievefile.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilesApiRoutesRetrieveFileRequest$ = exports.FilesApiRoutesRetrieveFileRequest$outboundSchema = exports.FilesApiRoutesRetrieveFileRequest$inboundSchema = void 0;
    exports.filesApiRoutesRetrieveFileRequestToJSON = filesApiRoutesRetrieveFileRequestToJSON;
    exports.filesApiRoutesRetrieveFileRequestFromJSON = filesApiRoutesRetrieveFileRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.FilesApiRoutesRetrieveFileRequest$inboundSchema = z.object({
      file_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "file_id": "fileId"
      });
    });
    exports.FilesApiRoutesRetrieveFileRequest$outboundSchema = z.object({
      fileId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        fileId: "file_id"
      });
    });
    var FilesApiRoutesRetrieveFileRequest$;
    (function(FilesApiRoutesRetrieveFileRequest$2) {
      FilesApiRoutesRetrieveFileRequest$2.inboundSchema = exports.FilesApiRoutesRetrieveFileRequest$inboundSchema;
      FilesApiRoutesRetrieveFileRequest$2.outboundSchema = exports.FilesApiRoutesRetrieveFileRequest$outboundSchema;
    })(FilesApiRoutesRetrieveFileRequest$ || (exports.FilesApiRoutesRetrieveFileRequest$ = FilesApiRoutesRetrieveFileRequest$ = {}));
    function filesApiRoutesRetrieveFileRequestToJSON(filesApiRoutesRetrieveFileRequest) {
      return JSON.stringify(exports.FilesApiRoutesRetrieveFileRequest$outboundSchema.parse(filesApiRoutesRetrieveFileRequest));
    }
    function filesApiRoutesRetrieveFileRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FilesApiRoutesRetrieveFileRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesApiRoutesRetrieveFileRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/types/blobs.js
var require_blobs = __commonJS({
  "node_modules/@mistralai/mistralai/types/blobs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.blobLikeSchema = void 0;
    exports.isBlobLike = isBlobLike;
    var z = __importStar(require_lib());
    exports.blobLikeSchema = z.custom(isBlobLike, {
      message: "expected a Blob, File or Blob-like object",
      fatal: true
    });
    function isBlobLike(val) {
      if (val instanceof Blob) {
        return true;
      }
      if (typeof val !== "object" || val == null || !(Symbol.toStringTag in val)) {
        return false;
      }
      const name = val[Symbol.toStringTag];
      if (typeof name !== "string") {
        return false;
      }
      if (name !== "Blob" && name !== "File") {
        return false;
      }
      return "stream" in val && typeof val.stream === "function";
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/filesapiroutesuploadfile.js
var require_filesapiroutesuploadfile = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/filesapiroutesuploadfile.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilesApiRoutesUploadFileMultiPartBodyParams$ = exports.FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema = exports.FilesApiRoutesUploadFileMultiPartBodyParams$inboundSchema = exports.FileT$ = exports.FileT$outboundSchema = exports.FileT$inboundSchema = void 0;
    exports.fileToJSON = fileToJSON;
    exports.fileFromJSON = fileFromJSON;
    exports.filesApiRoutesUploadFileMultiPartBodyParamsToJSON = filesApiRoutesUploadFileMultiPartBodyParamsToJSON;
    exports.filesApiRoutesUploadFileMultiPartBodyParamsFromJSON = filesApiRoutesUploadFileMultiPartBodyParamsFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var blobs_js_1 = require_blobs();
    var components = __importStar(require_components());
    exports.FileT$inboundSchema = z.object({
      fileName: z.string(),
      content: z.union([
        z.instanceof(ReadableStream),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array)
      ])
    });
    exports.FileT$outboundSchema = z.object({
      fileName: z.string(),
      content: z.union([
        z.instanceof(ReadableStream),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Uint8Array)
      ])
    });
    var FileT$;
    (function(FileT$2) {
      FileT$2.inboundSchema = exports.FileT$inboundSchema;
      FileT$2.outboundSchema = exports.FileT$outboundSchema;
    })(FileT$ || (exports.FileT$ = FileT$ = {}));
    function fileToJSON(fileT) {
      return JSON.stringify(exports.FileT$outboundSchema.parse(fileT));
    }
    function fileFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FileT$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FileT' from JSON`);
    }
    exports.FilesApiRoutesUploadFileMultiPartBodyParams$inboundSchema = z.object({
      file: z.lazy(() => exports.FileT$inboundSchema),
      purpose: components.FilePurpose$inboundSchema.optional()
    });
    exports.FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema = z.object({
      file: z.lazy(() => exports.FileT$outboundSchema).or(blobs_js_1.blobLikeSchema),
      purpose: components.FilePurpose$outboundSchema.optional()
    });
    var FilesApiRoutesUploadFileMultiPartBodyParams$;
    (function(FilesApiRoutesUploadFileMultiPartBodyParams$2) {
      FilesApiRoutesUploadFileMultiPartBodyParams$2.inboundSchema = exports.FilesApiRoutesUploadFileMultiPartBodyParams$inboundSchema;
      FilesApiRoutesUploadFileMultiPartBodyParams$2.outboundSchema = exports.FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema;
    })(FilesApiRoutesUploadFileMultiPartBodyParams$ || (exports.FilesApiRoutesUploadFileMultiPartBodyParams$ = FilesApiRoutesUploadFileMultiPartBodyParams$ = {}));
    function filesApiRoutesUploadFileMultiPartBodyParamsToJSON(filesApiRoutesUploadFileMultiPartBodyParams) {
      return JSON.stringify(exports.FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema.parse(filesApiRoutesUploadFileMultiPartBodyParams));
    }
    function filesApiRoutesUploadFileMultiPartBodyParamsFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.FilesApiRoutesUploadFileMultiPartBodyParams$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'FilesApiRoutesUploadFileMultiPartBodyParams' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesbatchcancelbatchjob.js
var require_jobsapiroutesbatchcancelbatchjob = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesbatchcancelbatchjob.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesBatchCancelBatchJobRequest$ = exports.JobsApiRoutesBatchCancelBatchJobRequest$outboundSchema = exports.JobsApiRoutesBatchCancelBatchJobRequest$inboundSchema = void 0;
    exports.jobsApiRoutesBatchCancelBatchJobRequestToJSON = jobsApiRoutesBatchCancelBatchJobRequestToJSON;
    exports.jobsApiRoutesBatchCancelBatchJobRequestFromJSON = jobsApiRoutesBatchCancelBatchJobRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JobsApiRoutesBatchCancelBatchJobRequest$inboundSchema = z.object({
      job_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "job_id": "jobId"
      });
    });
    exports.JobsApiRoutesBatchCancelBatchJobRequest$outboundSchema = z.object({
      jobId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        jobId: "job_id"
      });
    });
    var JobsApiRoutesBatchCancelBatchJobRequest$;
    (function(JobsApiRoutesBatchCancelBatchJobRequest$2) {
      JobsApiRoutesBatchCancelBatchJobRequest$2.inboundSchema = exports.JobsApiRoutesBatchCancelBatchJobRequest$inboundSchema;
      JobsApiRoutesBatchCancelBatchJobRequest$2.outboundSchema = exports.JobsApiRoutesBatchCancelBatchJobRequest$outboundSchema;
    })(JobsApiRoutesBatchCancelBatchJobRequest$ || (exports.JobsApiRoutesBatchCancelBatchJobRequest$ = JobsApiRoutesBatchCancelBatchJobRequest$ = {}));
    function jobsApiRoutesBatchCancelBatchJobRequestToJSON(jobsApiRoutesBatchCancelBatchJobRequest) {
      return JSON.stringify(exports.JobsApiRoutesBatchCancelBatchJobRequest$outboundSchema.parse(jobsApiRoutesBatchCancelBatchJobRequest));
    }
    function jobsApiRoutesBatchCancelBatchJobRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesBatchCancelBatchJobRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesBatchCancelBatchJobRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesbatchgetbatchjob.js
var require_jobsapiroutesbatchgetbatchjob = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesbatchgetbatchjob.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesBatchGetBatchJobRequest$ = exports.JobsApiRoutesBatchGetBatchJobRequest$outboundSchema = exports.JobsApiRoutesBatchGetBatchJobRequest$inboundSchema = void 0;
    exports.jobsApiRoutesBatchGetBatchJobRequestToJSON = jobsApiRoutesBatchGetBatchJobRequestToJSON;
    exports.jobsApiRoutesBatchGetBatchJobRequestFromJSON = jobsApiRoutesBatchGetBatchJobRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JobsApiRoutesBatchGetBatchJobRequest$inboundSchema = z.object({
      job_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "job_id": "jobId"
      });
    });
    exports.JobsApiRoutesBatchGetBatchJobRequest$outboundSchema = z.object({
      jobId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        jobId: "job_id"
      });
    });
    var JobsApiRoutesBatchGetBatchJobRequest$;
    (function(JobsApiRoutesBatchGetBatchJobRequest$2) {
      JobsApiRoutesBatchGetBatchJobRequest$2.inboundSchema = exports.JobsApiRoutesBatchGetBatchJobRequest$inboundSchema;
      JobsApiRoutesBatchGetBatchJobRequest$2.outboundSchema = exports.JobsApiRoutesBatchGetBatchJobRequest$outboundSchema;
    })(JobsApiRoutesBatchGetBatchJobRequest$ || (exports.JobsApiRoutesBatchGetBatchJobRequest$ = JobsApiRoutesBatchGetBatchJobRequest$ = {}));
    function jobsApiRoutesBatchGetBatchJobRequestToJSON(jobsApiRoutesBatchGetBatchJobRequest) {
      return JSON.stringify(exports.JobsApiRoutesBatchGetBatchJobRequest$outboundSchema.parse(jobsApiRoutesBatchGetBatchJobRequest));
    }
    function jobsApiRoutesBatchGetBatchJobRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesBatchGetBatchJobRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesBatchGetBatchJobRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesbatchgetbatchjobs.js
var require_jobsapiroutesbatchgetbatchjobs = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesbatchgetbatchjobs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesBatchGetBatchJobsRequest$ = exports.JobsApiRoutesBatchGetBatchJobsRequest$outboundSchema = exports.JobsApiRoutesBatchGetBatchJobsRequest$inboundSchema = void 0;
    exports.jobsApiRoutesBatchGetBatchJobsRequestToJSON = jobsApiRoutesBatchGetBatchJobsRequestToJSON;
    exports.jobsApiRoutesBatchGetBatchJobsRequestFromJSON = jobsApiRoutesBatchGetBatchJobsRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var components = __importStar(require_components());
    exports.JobsApiRoutesBatchGetBatchJobsRequest$inboundSchema = z.object({
      page: z.number().int().default(0),
      page_size: z.number().int().default(100),
      model: z.nullable(z.string()).optional(),
      metadata: z.nullable(z.record(z.any())).optional(),
      created_after: z.nullable(z.string().datetime({ offset: true }).transform((v) => new Date(v))).optional(),
      created_by_me: z.boolean().default(false),
      status: z.nullable(components.BatchJobStatus$inboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "page_size": "pageSize",
        "created_after": "createdAfter",
        "created_by_me": "createdByMe"
      });
    });
    exports.JobsApiRoutesBatchGetBatchJobsRequest$outboundSchema = z.object({
      page: z.number().int().default(0),
      pageSize: z.number().int().default(100),
      model: z.nullable(z.string()).optional(),
      metadata: z.nullable(z.record(z.any())).optional(),
      createdAfter: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
      createdByMe: z.boolean().default(false),
      status: z.nullable(components.BatchJobStatus$outboundSchema).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        pageSize: "page_size",
        createdAfter: "created_after",
        createdByMe: "created_by_me"
      });
    });
    var JobsApiRoutesBatchGetBatchJobsRequest$;
    (function(JobsApiRoutesBatchGetBatchJobsRequest$2) {
      JobsApiRoutesBatchGetBatchJobsRequest$2.inboundSchema = exports.JobsApiRoutesBatchGetBatchJobsRequest$inboundSchema;
      JobsApiRoutesBatchGetBatchJobsRequest$2.outboundSchema = exports.JobsApiRoutesBatchGetBatchJobsRequest$outboundSchema;
    })(JobsApiRoutesBatchGetBatchJobsRequest$ || (exports.JobsApiRoutesBatchGetBatchJobsRequest$ = JobsApiRoutesBatchGetBatchJobsRequest$ = {}));
    function jobsApiRoutesBatchGetBatchJobsRequestToJSON(jobsApiRoutesBatchGetBatchJobsRequest) {
      return JSON.stringify(exports.JobsApiRoutesBatchGetBatchJobsRequest$outboundSchema.parse(jobsApiRoutesBatchGetBatchJobsRequest));
    }
    function jobsApiRoutesBatchGetBatchJobsRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesBatchGetBatchJobsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesBatchGetBatchJobsRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningarchivefinetunedmodel.js
var require_jobsapiroutesfinetuningarchivefinetunedmodel = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningarchivefinetunedmodel.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$ = exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$outboundSchema = exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$inboundSchema = void 0;
    exports.jobsApiRoutesFineTuningArchiveFineTunedModelRequestToJSON = jobsApiRoutesFineTuningArchiveFineTunedModelRequestToJSON;
    exports.jobsApiRoutesFineTuningArchiveFineTunedModelRequestFromJSON = jobsApiRoutesFineTuningArchiveFineTunedModelRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$inboundSchema = z.object({
      model_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "model_id": "modelId"
      });
    });
    exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$outboundSchema = z.object({
      modelId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        modelId: "model_id"
      });
    });
    var JobsApiRoutesFineTuningArchiveFineTunedModelRequest$;
    (function(JobsApiRoutesFineTuningArchiveFineTunedModelRequest$2) {
      JobsApiRoutesFineTuningArchiveFineTunedModelRequest$2.inboundSchema = exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$inboundSchema;
      JobsApiRoutesFineTuningArchiveFineTunedModelRequest$2.outboundSchema = exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$outboundSchema;
    })(JobsApiRoutesFineTuningArchiveFineTunedModelRequest$ || (exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$ = JobsApiRoutesFineTuningArchiveFineTunedModelRequest$ = {}));
    function jobsApiRoutesFineTuningArchiveFineTunedModelRequestToJSON(jobsApiRoutesFineTuningArchiveFineTunedModelRequest) {
      return JSON.stringify(exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$outboundSchema.parse(jobsApiRoutesFineTuningArchiveFineTunedModelRequest));
    }
    function jobsApiRoutesFineTuningArchiveFineTunedModelRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesFineTuningArchiveFineTunedModelRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningcancelfinetuningjob.js
var require_jobsapiroutesfinetuningcancelfinetuningjob = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningcancelfinetuningjob.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$ = exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$outboundSchema = exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$inboundSchema = void 0;
    exports.jobsApiRoutesFineTuningCancelFineTuningJobRequestToJSON = jobsApiRoutesFineTuningCancelFineTuningJobRequestToJSON;
    exports.jobsApiRoutesFineTuningCancelFineTuningJobRequestFromJSON = jobsApiRoutesFineTuningCancelFineTuningJobRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$inboundSchema = z.object({
      job_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "job_id": "jobId"
      });
    });
    exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$outboundSchema = z.object({
      jobId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        jobId: "job_id"
      });
    });
    var JobsApiRoutesFineTuningCancelFineTuningJobRequest$;
    (function(JobsApiRoutesFineTuningCancelFineTuningJobRequest$2) {
      JobsApiRoutesFineTuningCancelFineTuningJobRequest$2.inboundSchema = exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$inboundSchema;
      JobsApiRoutesFineTuningCancelFineTuningJobRequest$2.outboundSchema = exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$outboundSchema;
    })(JobsApiRoutesFineTuningCancelFineTuningJobRequest$ || (exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$ = JobsApiRoutesFineTuningCancelFineTuningJobRequest$ = {}));
    function jobsApiRoutesFineTuningCancelFineTuningJobRequestToJSON(jobsApiRoutesFineTuningCancelFineTuningJobRequest) {
      return JSON.stringify(exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$outboundSchema.parse(jobsApiRoutesFineTuningCancelFineTuningJobRequest));
    }
    function jobsApiRoutesFineTuningCancelFineTuningJobRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesFineTuningCancelFineTuningJobRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesFineTuningCancelFineTuningJobRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningcreatefinetuningjob.js
var require_jobsapiroutesfinetuningcreatefinetuningjob = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningcreatefinetuningjob.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$ = exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$outboundSchema = exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$inboundSchema = void 0;
    exports.jobsApiRoutesFineTuningCreateFineTuningJobResponseToJSON = jobsApiRoutesFineTuningCreateFineTuningJobResponseToJSON;
    exports.jobsApiRoutesFineTuningCreateFineTuningJobResponseFromJSON = jobsApiRoutesFineTuningCreateFineTuningJobResponseFromJSON;
    var z = __importStar(require_lib());
    var schemas_js_1 = require_schemas();
    var components = __importStar(require_components());
    exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$inboundSchema = z.union([
      components.LegacyJobMetadataOut$inboundSchema,
      components.JobOut$inboundSchema
    ]);
    exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$outboundSchema = z.union([
      components.LegacyJobMetadataOut$outboundSchema,
      components.JobOut$outboundSchema
    ]);
    var JobsApiRoutesFineTuningCreateFineTuningJobResponse$;
    (function(JobsApiRoutesFineTuningCreateFineTuningJobResponse$2) {
      JobsApiRoutesFineTuningCreateFineTuningJobResponse$2.inboundSchema = exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$inboundSchema;
      JobsApiRoutesFineTuningCreateFineTuningJobResponse$2.outboundSchema = exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$outboundSchema;
    })(JobsApiRoutesFineTuningCreateFineTuningJobResponse$ || (exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$ = JobsApiRoutesFineTuningCreateFineTuningJobResponse$ = {}));
    function jobsApiRoutesFineTuningCreateFineTuningJobResponseToJSON(jobsApiRoutesFineTuningCreateFineTuningJobResponse) {
      return JSON.stringify(exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$outboundSchema.parse(jobsApiRoutesFineTuningCreateFineTuningJobResponse));
    }
    function jobsApiRoutesFineTuningCreateFineTuningJobResponseFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesFineTuningCreateFineTuningJobResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesFineTuningCreateFineTuningJobResponse' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuninggetfinetuningjob.js
var require_jobsapiroutesfinetuninggetfinetuningjob = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuninggetfinetuningjob.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$ = exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$outboundSchema = exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$inboundSchema = void 0;
    exports.jobsApiRoutesFineTuningGetFineTuningJobRequestToJSON = jobsApiRoutesFineTuningGetFineTuningJobRequestToJSON;
    exports.jobsApiRoutesFineTuningGetFineTuningJobRequestFromJSON = jobsApiRoutesFineTuningGetFineTuningJobRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$inboundSchema = z.object({
      job_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "job_id": "jobId"
      });
    });
    exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$outboundSchema = z.object({
      jobId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        jobId: "job_id"
      });
    });
    var JobsApiRoutesFineTuningGetFineTuningJobRequest$;
    (function(JobsApiRoutesFineTuningGetFineTuningJobRequest$2) {
      JobsApiRoutesFineTuningGetFineTuningJobRequest$2.inboundSchema = exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$inboundSchema;
      JobsApiRoutesFineTuningGetFineTuningJobRequest$2.outboundSchema = exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$outboundSchema;
    })(JobsApiRoutesFineTuningGetFineTuningJobRequest$ || (exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$ = JobsApiRoutesFineTuningGetFineTuningJobRequest$ = {}));
    function jobsApiRoutesFineTuningGetFineTuningJobRequestToJSON(jobsApiRoutesFineTuningGetFineTuningJobRequest) {
      return JSON.stringify(exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$outboundSchema.parse(jobsApiRoutesFineTuningGetFineTuningJobRequest));
    }
    function jobsApiRoutesFineTuningGetFineTuningJobRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesFineTuningGetFineTuningJobRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesFineTuningGetFineTuningJobRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuninggetfinetuningjobs.js
var require_jobsapiroutesfinetuninggetfinetuningjobs = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuninggetfinetuningjobs.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$ = exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$outboundSchema = exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$inboundSchema = exports.Status$ = exports.Status$outboundSchema = exports.Status$inboundSchema = exports.Status = void 0;
    exports.jobsApiRoutesFineTuningGetFineTuningJobsRequestToJSON = jobsApiRoutesFineTuningGetFineTuningJobsRequestToJSON;
    exports.jobsApiRoutesFineTuningGetFineTuningJobsRequestFromJSON = jobsApiRoutesFineTuningGetFineTuningJobsRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.Status = {
      Queued: "QUEUED",
      Started: "STARTED",
      Validating: "VALIDATING",
      Validated: "VALIDATED",
      Running: "RUNNING",
      FailedValidation: "FAILED_VALIDATION",
      Failed: "FAILED",
      Success: "SUCCESS",
      Cancelled: "CANCELLED",
      CancellationRequested: "CANCELLATION_REQUESTED"
    };
    exports.Status$inboundSchema = z.nativeEnum(exports.Status);
    exports.Status$outboundSchema = exports.Status$inboundSchema;
    var Status$;
    (function(Status$2) {
      Status$2.inboundSchema = exports.Status$inboundSchema;
      Status$2.outboundSchema = exports.Status$outboundSchema;
    })(Status$ || (exports.Status$ = Status$ = {}));
    exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$inboundSchema = z.object({
      page: z.number().int().default(0),
      page_size: z.number().int().default(100),
      model: z.nullable(z.string()).optional(),
      created_after: z.nullable(z.string().datetime({ offset: true }).transform((v) => new Date(v))).optional(),
      created_by_me: z.boolean().default(false),
      status: z.nullable(exports.Status$inboundSchema).optional(),
      wandb_project: z.nullable(z.string()).optional(),
      wandb_name: z.nullable(z.string()).optional(),
      suffix: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "page_size": "pageSize",
        "created_after": "createdAfter",
        "created_by_me": "createdByMe",
        "wandb_project": "wandbProject",
        "wandb_name": "wandbName"
      });
    });
    exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$outboundSchema = z.object({
      page: z.number().int().default(0),
      pageSize: z.number().int().default(100),
      model: z.nullable(z.string()).optional(),
      createdAfter: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
      createdByMe: z.boolean().default(false),
      status: z.nullable(exports.Status$outboundSchema).optional(),
      wandbProject: z.nullable(z.string()).optional(),
      wandbName: z.nullable(z.string()).optional(),
      suffix: z.nullable(z.string()).optional()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        pageSize: "page_size",
        createdAfter: "created_after",
        createdByMe: "created_by_me",
        wandbProject: "wandb_project",
        wandbName: "wandb_name"
      });
    });
    var JobsApiRoutesFineTuningGetFineTuningJobsRequest$;
    (function(JobsApiRoutesFineTuningGetFineTuningJobsRequest$2) {
      JobsApiRoutesFineTuningGetFineTuningJobsRequest$2.inboundSchema = exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$inboundSchema;
      JobsApiRoutesFineTuningGetFineTuningJobsRequest$2.outboundSchema = exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$outboundSchema;
    })(JobsApiRoutesFineTuningGetFineTuningJobsRequest$ || (exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$ = JobsApiRoutesFineTuningGetFineTuningJobsRequest$ = {}));
    function jobsApiRoutesFineTuningGetFineTuningJobsRequestToJSON(jobsApiRoutesFineTuningGetFineTuningJobsRequest) {
      return JSON.stringify(exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$outboundSchema.parse(jobsApiRoutesFineTuningGetFineTuningJobsRequest));
    }
    function jobsApiRoutesFineTuningGetFineTuningJobsRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesFineTuningGetFineTuningJobsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesFineTuningGetFineTuningJobsRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningstartfinetuningjob.js
var require_jobsapiroutesfinetuningstartfinetuningjob = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningstartfinetuningjob.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$ = exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$outboundSchema = exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$inboundSchema = void 0;
    exports.jobsApiRoutesFineTuningStartFineTuningJobRequestToJSON = jobsApiRoutesFineTuningStartFineTuningJobRequestToJSON;
    exports.jobsApiRoutesFineTuningStartFineTuningJobRequestFromJSON = jobsApiRoutesFineTuningStartFineTuningJobRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$inboundSchema = z.object({
      job_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "job_id": "jobId"
      });
    });
    exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$outboundSchema = z.object({
      jobId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        jobId: "job_id"
      });
    });
    var JobsApiRoutesFineTuningStartFineTuningJobRequest$;
    (function(JobsApiRoutesFineTuningStartFineTuningJobRequest$2) {
      JobsApiRoutesFineTuningStartFineTuningJobRequest$2.inboundSchema = exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$inboundSchema;
      JobsApiRoutesFineTuningStartFineTuningJobRequest$2.outboundSchema = exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$outboundSchema;
    })(JobsApiRoutesFineTuningStartFineTuningJobRequest$ || (exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$ = JobsApiRoutesFineTuningStartFineTuningJobRequest$ = {}));
    function jobsApiRoutesFineTuningStartFineTuningJobRequestToJSON(jobsApiRoutesFineTuningStartFineTuningJobRequest) {
      return JSON.stringify(exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$outboundSchema.parse(jobsApiRoutesFineTuningStartFineTuningJobRequest));
    }
    function jobsApiRoutesFineTuningStartFineTuningJobRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesFineTuningStartFineTuningJobRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesFineTuningStartFineTuningJobRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningunarchivefinetunedmodel.js
var require_jobsapiroutesfinetuningunarchivefinetunedmodel = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningunarchivefinetunedmodel.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$ = exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$outboundSchema = exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$inboundSchema = void 0;
    exports.jobsApiRoutesFineTuningUnarchiveFineTunedModelRequestToJSON = jobsApiRoutesFineTuningUnarchiveFineTunedModelRequestToJSON;
    exports.jobsApiRoutesFineTuningUnarchiveFineTunedModelRequestFromJSON = jobsApiRoutesFineTuningUnarchiveFineTunedModelRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$inboundSchema = z.object({
      model_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "model_id": "modelId"
      });
    });
    exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$outboundSchema = z.object({
      modelId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        modelId: "model_id"
      });
    });
    var JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$;
    (function(JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$2) {
      JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$2.inboundSchema = exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$inboundSchema;
      JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$2.outboundSchema = exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$outboundSchema;
    })(JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$ || (exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$ = JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$ = {}));
    function jobsApiRoutesFineTuningUnarchiveFineTunedModelRequestToJSON(jobsApiRoutesFineTuningUnarchiveFineTunedModelRequest) {
      return JSON.stringify(exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$outboundSchema.parse(jobsApiRoutesFineTuningUnarchiveFineTunedModelRequest));
    }
    function jobsApiRoutesFineTuningUnarchiveFineTunedModelRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningupdatefinetunedmodel.js
var require_jobsapiroutesfinetuningupdatefinetunedmodel = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/jobsapiroutesfinetuningupdatefinetunedmodel.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$ = exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$outboundSchema = exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$inboundSchema = void 0;
    exports.jobsApiRoutesFineTuningUpdateFineTunedModelRequestToJSON = jobsApiRoutesFineTuningUpdateFineTunedModelRequestToJSON;
    exports.jobsApiRoutesFineTuningUpdateFineTunedModelRequestFromJSON = jobsApiRoutesFineTuningUpdateFineTunedModelRequestFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var components = __importStar(require_components());
    exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$inboundSchema = z.object({
      model_id: z.string(),
      UpdateFTModelIn: components.UpdateFTModelIn$inboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "model_id": "modelId",
        "UpdateFTModelIn": "updateFTModelIn"
      });
    });
    exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$outboundSchema = z.object({
      modelId: z.string(),
      updateFTModelIn: components.UpdateFTModelIn$outboundSchema
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        modelId: "model_id",
        updateFTModelIn: "UpdateFTModelIn"
      });
    });
    var JobsApiRoutesFineTuningUpdateFineTunedModelRequest$;
    (function(JobsApiRoutesFineTuningUpdateFineTunedModelRequest$2) {
      JobsApiRoutesFineTuningUpdateFineTunedModelRequest$2.inboundSchema = exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$inboundSchema;
      JobsApiRoutesFineTuningUpdateFineTunedModelRequest$2.outboundSchema = exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$outboundSchema;
    })(JobsApiRoutesFineTuningUpdateFineTunedModelRequest$ || (exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$ = JobsApiRoutesFineTuningUpdateFineTunedModelRequest$ = {}));
    function jobsApiRoutesFineTuningUpdateFineTunedModelRequestToJSON(jobsApiRoutesFineTuningUpdateFineTunedModelRequest) {
      return JSON.stringify(exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$outboundSchema.parse(jobsApiRoutesFineTuningUpdateFineTunedModelRequest));
    }
    function jobsApiRoutesFineTuningUpdateFineTunedModelRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'JobsApiRoutesFineTuningUpdateFineTunedModelRequest' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/retrievemodelv1modelsmodelidget.js
var require_retrievemodelv1modelsmodelidget = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/retrievemodelv1modelsmodelidget.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$ = exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$outboundSchema = exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$inboundSchema = exports.RetrieveModelV1ModelsModelIdGetRequest$ = exports.RetrieveModelV1ModelsModelIdGetRequest$outboundSchema = exports.RetrieveModelV1ModelsModelIdGetRequest$inboundSchema = void 0;
    exports.retrieveModelV1ModelsModelIdGetRequestToJSON = retrieveModelV1ModelsModelIdGetRequestToJSON;
    exports.retrieveModelV1ModelsModelIdGetRequestFromJSON = retrieveModelV1ModelsModelIdGetRequestFromJSON;
    exports.retrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGetToJSON = retrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGetToJSON;
    exports.retrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGetFromJSON = retrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGetFromJSON;
    var z = __importStar(require_lib());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var components = __importStar(require_components());
    exports.RetrieveModelV1ModelsModelIdGetRequest$inboundSchema = z.object({
      model_id: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        "model_id": "modelId"
      });
    });
    exports.RetrieveModelV1ModelsModelIdGetRequest$outboundSchema = z.object({
      modelId: z.string()
    }).transform((v) => {
      return (0, primitives_js_1.remap)(v, {
        modelId: "model_id"
      });
    });
    var RetrieveModelV1ModelsModelIdGetRequest$;
    (function(RetrieveModelV1ModelsModelIdGetRequest$2) {
      RetrieveModelV1ModelsModelIdGetRequest$2.inboundSchema = exports.RetrieveModelV1ModelsModelIdGetRequest$inboundSchema;
      RetrieveModelV1ModelsModelIdGetRequest$2.outboundSchema = exports.RetrieveModelV1ModelsModelIdGetRequest$outboundSchema;
    })(RetrieveModelV1ModelsModelIdGetRequest$ || (exports.RetrieveModelV1ModelsModelIdGetRequest$ = RetrieveModelV1ModelsModelIdGetRequest$ = {}));
    function retrieveModelV1ModelsModelIdGetRequestToJSON(retrieveModelV1ModelsModelIdGetRequest) {
      return JSON.stringify(exports.RetrieveModelV1ModelsModelIdGetRequest$outboundSchema.parse(retrieveModelV1ModelsModelIdGetRequest));
    }
    function retrieveModelV1ModelsModelIdGetRequestFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RetrieveModelV1ModelsModelIdGetRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RetrieveModelV1ModelsModelIdGetRequest' from JSON`);
    }
    exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$inboundSchema = z.union([
      components.BaseModelCard$inboundSchema.and(z.object({ type: z.literal("base") }).transform((v) => ({
        type: v.type
      }))),
      components.FTModelCard$inboundSchema.and(z.object({ type: z.literal("fine-tuned") }).transform((v) => ({
        type: v.type
      })))
    ]);
    exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$outboundSchema = z.union([
      components.BaseModelCard$outboundSchema.and(z.object({ type: z.literal("base") }).transform((v) => ({
        type: v.type
      }))),
      components.FTModelCard$outboundSchema.and(z.object({ type: z.literal("fine-tuned") }).transform((v) => ({
        type: v.type
      })))
    ]);
    var RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$;
    (function(RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$2) {
      RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$2.inboundSchema = exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$inboundSchema;
      RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$2.outboundSchema = exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$outboundSchema;
    })(RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$ || (exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$ = RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$ = {}));
    function retrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGetToJSON(retrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet) {
      return JSON.stringify(exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$outboundSchema.parse(retrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet));
    }
    function retrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGetFromJSON(jsonString) {
      return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet' from JSON`);
    }
  }
});

// node_modules/@mistralai/mistralai/models/operations/index.js
var require_operations = __commonJS({
  "node_modules/@mistralai/mistralai/models/operations/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_deletemodelv1modelsmodeliddelete(), exports);
    __exportStar(require_filesapiroutesdeletefile(), exports);
    __exportStar(require_filesapiroutesdownloadfile(), exports);
    __exportStar(require_filesapiroutesgetsignedurl(), exports);
    __exportStar(require_filesapirouteslistfiles(), exports);
    __exportStar(require_filesapiroutesretrievefile(), exports);
    __exportStar(require_filesapiroutesuploadfile(), exports);
    __exportStar(require_jobsapiroutesbatchcancelbatchjob(), exports);
    __exportStar(require_jobsapiroutesbatchgetbatchjob(), exports);
    __exportStar(require_jobsapiroutesbatchgetbatchjobs(), exports);
    __exportStar(require_jobsapiroutesfinetuningarchivefinetunedmodel(), exports);
    __exportStar(require_jobsapiroutesfinetuningcancelfinetuningjob(), exports);
    __exportStar(require_jobsapiroutesfinetuningcreatefinetuningjob(), exports);
    __exportStar(require_jobsapiroutesfinetuninggetfinetuningjob(), exports);
    __exportStar(require_jobsapiroutesfinetuninggetfinetuningjobs(), exports);
    __exportStar(require_jobsapiroutesfinetuningstartfinetuningjob(), exports);
    __exportStar(require_jobsapiroutesfinetuningunarchivefinetunedmodel(), exports);
    __exportStar(require_jobsapiroutesfinetuningupdatefinetunedmodel(), exports);
    __exportStar(require_retrievemodelv1modelsmodelidget(), exports);
  }
});

// node_modules/@mistralai/mistralai/funcs/batchJobsCancel.js
var require_batchJobsCancel = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/batchJobsCancel.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.batchJobsCancel = batchJobsCancel;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function batchJobsCancel(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesBatchCancelBatchJobRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        job_id: (0, encodings_js_1.encodeSimple)("job_id", payload.job_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/batch/jobs/{job_id}/cancel")(pathParams);
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "jobs_api_routes_batch_cancel_batch_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.BatchJobOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/batchJobsCreate.js
var require_batchJobsCreate = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/batchJobsCreate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.batchJobsCreate = batchJobsCreate;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var async_js_1 = require_async();
    function batchJobsCreate(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.BatchJobIn$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/batch/jobs")();
      const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "jobs_api_routes_batch_create_batch_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.BatchJobOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/batchJobsGet.js
var require_batchJobsGet = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/batchJobsGet.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.batchJobsGet = batchJobsGet;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function batchJobsGet(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesBatchGetBatchJobRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        job_id: (0, encodings_js_1.encodeSimple)("job_id", payload.job_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/batch/jobs/{job_id}")(pathParams);
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "jobs_api_routes_batch_get_batch_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.BatchJobOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/batchJobsList.js
var require_batchJobsList = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/batchJobsList.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.batchJobsList = batchJobsList;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function batchJobsList(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesBatchGetBatchJobsRequest$outboundSchema.optional().parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = null;
      const path = (0, url_js_1.pathToFunc)("/v1/batch/jobs")();
      const query = (0, encodings_js_1.encodeFormQuery)({
        "created_after": payload == null ? void 0 : payload.created_after,
        "created_by_me": payload == null ? void 0 : payload.created_by_me,
        "metadata": payload == null ? void 0 : payload.metadata,
        "model": payload == null ? void 0 : payload.model,
        "page": payload == null ? void 0 : payload.page,
        "page_size": payload == null ? void 0 : payload.page_size,
        "status": payload == null ? void 0 : payload.status
      });
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "jobs_api_routes_batch_get_batch_jobs",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        query,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.BatchJobsOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/mistraljobs.js
var require_mistraljobs = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/mistraljobs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MistralJobs = void 0;
    var batchJobsCancel_js_1 = require_batchJobsCancel();
    var batchJobsCreate_js_1 = require_batchJobsCreate();
    var batchJobsGet_js_1 = require_batchJobsGet();
    var batchJobsList_js_1 = require_batchJobsList();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var MistralJobs = class extends sdks_js_1.ClientSDK {
      /**
       * Get Batch Jobs
       *
       * @remarks
       * Get a list of batch jobs for your organization and user.
       */
      async list(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, batchJobsList_js_1.batchJobsList)(this, request, options));
      }
      /**
       * Create Batch Job
       *
       * @remarks
       * Create a new batch job, it will be queued for processing.
       */
      async create(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, batchJobsCreate_js_1.batchJobsCreate)(this, request, options));
      }
      /**
       * Get Batch Job
       *
       * @remarks
       * Get a batch job details by its UUID.
       */
      async get(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, batchJobsGet_js_1.batchJobsGet)(this, request, options));
      }
      /**
       * Cancel Batch Job
       *
       * @remarks
       * Request the cancellation of a batch job.
       */
      async cancel(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, batchJobsCancel_js_1.batchJobsCancel)(this, request, options));
      }
    };
    exports.MistralJobs = MistralJobs;
  }
});

// node_modules/@mistralai/mistralai/sdk/batch.js
var require_batch = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/batch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Batch = void 0;
    var sdks_js_1 = require_sdks();
    var mistraljobs_js_1 = require_mistraljobs();
    var Batch = class extends sdks_js_1.ClientSDK {
      get jobs() {
        var _a;
        return (_a = this._jobs) != null ? _a : this._jobs = new mistraljobs_js_1.MistralJobs(this._options);
      }
    };
    exports.Batch = Batch;
  }
});

// node_modules/@mistralai/mistralai/funcs/chatComplete.js
var require_chatComplete = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/chatComplete.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chatComplete = chatComplete;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    var async_js_1 = require_async();
    function chatComplete(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.ChatCompletionRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/chat/completions")();
      const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "chat_completion_v1_chat_completions_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.ChatCompletionResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/chatStream.js
var require_chatStream = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/chatStream.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chatStream = chatStream;
    var z = __importStar(require_lib());
    var encodings_js_1 = require_encodings();
    var event_streams_js_1 = require_event_streams();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    var async_js_1 = require_async();
    function chatStream(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.ChatCompletionStreamRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/chat/completions#stream")();
      const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "text/event-stream"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "stream_chat",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.sse(200, z.instanceof(ReadableStream).transform((stream) => {
        return new event_streams_js_1.EventStream({
          stream,
          decoder(rawEvent) {
            const schema = components.CompletionEvent$inboundSchema;
            return schema.parse(rawEvent);
          }
        });
      }), { sseSentinel: "[DONE]" }), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/zod-to-json-schema/dist/cjs/Options.js
var require_Options = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/Options.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultOptions = exports.defaultOptions = exports.jsonDescription = exports.ignoreOverride = void 0;
    exports.ignoreOverride = Symbol("Let zodToJsonSchema decide on which parser to use");
    var jsonDescription = (jsonSchema, def) => {
      if (def.description) {
        try {
          return {
            ...jsonSchema,
            ...JSON.parse(def.description)
          };
        } catch (e) {
        }
      }
      return jsonSchema;
    };
    exports.jsonDescription = jsonDescription;
    exports.defaultOptions = {
      name: void 0,
      $refStrategy: "root",
      basePath: ["#"],
      effectStrategy: "input",
      pipeStrategy: "all",
      dateStrategy: "format:date-time",
      mapStrategy: "entries",
      removeAdditionalStrategy: "passthrough",
      allowedAdditionalProperties: true,
      rejectedAdditionalProperties: false,
      definitionPath: "definitions",
      target: "jsonSchema7",
      strictUnions: false,
      definitions: {},
      errorMessages: false,
      markdownDescription: false,
      patternStrategy: "escape",
      applyRegexFlags: false,
      emailStrategy: "format:email",
      base64Strategy: "contentEncoding:base64",
      nameStrategy: "ref"
    };
    var getDefaultOptions = (options) => typeof options === "string" ? {
      ...exports.defaultOptions,
      name: options
    } : {
      ...exports.defaultOptions,
      ...options
    };
    exports.getDefaultOptions = getDefaultOptions;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/Refs.js
var require_Refs = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/Refs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRefs = void 0;
    var Options_js_1 = require_Options();
    var getRefs = (options) => {
      const _options = (0, Options_js_1.getDefaultOptions)(options);
      const currentPath = _options.name !== void 0 ? [..._options.basePath, _options.definitionPath, _options.name] : _options.basePath;
      return {
        ..._options,
        currentPath,
        propertyPath: void 0,
        seen: new Map(Object.entries(_options.definitions).map(([name, def]) => [
          def._def,
          {
            def: def._def,
            path: [..._options.basePath, _options.definitionPath, name],
            // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.
            jsonSchema: void 0
          }
        ]))
      };
    };
    exports.getRefs = getRefs;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/errorMessages.js
var require_errorMessages = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/errorMessages.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setResponseValueAndErrors = exports.addErrorMessage = void 0;
    function addErrorMessage(res, key, errorMessage, refs) {
      if (!(refs == null ? void 0 : refs.errorMessages))
        return;
      if (errorMessage) {
        res.errorMessage = {
          ...res.errorMessage,
          [key]: errorMessage
        };
      }
    }
    exports.addErrorMessage = addErrorMessage;
    function setResponseValueAndErrors(res, key, value, errorMessage, refs) {
      res[key] = value;
      addErrorMessage(res, key, errorMessage, refs);
    }
    exports.setResponseValueAndErrors = setResponseValueAndErrors;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/any.js
var require_any = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/any.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseAnyDef = void 0;
    function parseAnyDef() {
      return {};
    }
    exports.parseAnyDef = parseAnyDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/array.js
var require_array = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/array.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseArrayDef = void 0;
    var zod_1 = require_lib();
    var errorMessages_js_1 = require_errorMessages();
    var parseDef_js_1 = require_parseDef();
    function parseArrayDef(def, refs) {
      var _a, _b, _c;
      const res = {
        type: "array"
      };
      if (((_a = def.type) == null ? void 0 : _a._def) && ((_c = (_b = def.type) == null ? void 0 : _b._def) == null ? void 0 : _c.typeName) !== zod_1.ZodFirstPartyTypeKind.ZodAny) {
        res.items = (0, parseDef_js_1.parseDef)(def.type._def, {
          ...refs,
          currentPath: [...refs.currentPath, "items"]
        });
      }
      if (def.minLength) {
        (0, errorMessages_js_1.setResponseValueAndErrors)(res, "minItems", def.minLength.value, def.minLength.message, refs);
      }
      if (def.maxLength) {
        (0, errorMessages_js_1.setResponseValueAndErrors)(res, "maxItems", def.maxLength.value, def.maxLength.message, refs);
      }
      if (def.exactLength) {
        (0, errorMessages_js_1.setResponseValueAndErrors)(res, "minItems", def.exactLength.value, def.exactLength.message, refs);
        (0, errorMessages_js_1.setResponseValueAndErrors)(res, "maxItems", def.exactLength.value, def.exactLength.message, refs);
      }
      return res;
    }
    exports.parseArrayDef = parseArrayDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/bigint.js
var require_bigint = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/bigint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseBigintDef = void 0;
    var errorMessages_js_1 = require_errorMessages();
    function parseBigintDef(def, refs) {
      const res = {
        type: "integer",
        format: "int64"
      };
      if (!def.checks)
        return res;
      for (const check of def.checks) {
        switch (check.kind) {
          case "min":
            if (refs.target === "jsonSchema7") {
              if (check.inclusive) {
                (0, errorMessages_js_1.setResponseValueAndErrors)(res, "minimum", check.value, check.message, refs);
              } else {
                (0, errorMessages_js_1.setResponseValueAndErrors)(res, "exclusiveMinimum", check.value, check.message, refs);
              }
            } else {
              if (!check.inclusive) {
                res.exclusiveMinimum = true;
              }
              (0, errorMessages_js_1.setResponseValueAndErrors)(res, "minimum", check.value, check.message, refs);
            }
            break;
          case "max":
            if (refs.target === "jsonSchema7") {
              if (check.inclusive) {
                (0, errorMessages_js_1.setResponseValueAndErrors)(res, "maximum", check.value, check.message, refs);
              } else {
                (0, errorMessages_js_1.setResponseValueAndErrors)(res, "exclusiveMaximum", check.value, check.message, refs);
              }
            } else {
              if (!check.inclusive) {
                res.exclusiveMaximum = true;
              }
              (0, errorMessages_js_1.setResponseValueAndErrors)(res, "maximum", check.value, check.message, refs);
            }
            break;
          case "multipleOf":
            (0, errorMessages_js_1.setResponseValueAndErrors)(res, "multipleOf", check.value, check.message, refs);
            break;
        }
      }
      return res;
    }
    exports.parseBigintDef = parseBigintDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/boolean.js
var require_boolean = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/boolean.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseBooleanDef = void 0;
    function parseBooleanDef() {
      return {
        type: "boolean"
      };
    }
    exports.parseBooleanDef = parseBooleanDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/branded.js
var require_branded = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/branded.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseBrandedDef = void 0;
    var parseDef_js_1 = require_parseDef();
    function parseBrandedDef(_def, refs) {
      return (0, parseDef_js_1.parseDef)(_def.type._def, refs);
    }
    exports.parseBrandedDef = parseBrandedDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/catch.js
var require_catch = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/catch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseCatchDef = void 0;
    var parseDef_js_1 = require_parseDef();
    var parseCatchDef = (def, refs) => {
      return (0, parseDef_js_1.parseDef)(def.innerType._def, refs);
    };
    exports.parseCatchDef = parseCatchDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/date.js
var require_date = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/date.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseDateDef = void 0;
    var errorMessages_js_1 = require_errorMessages();
    function parseDateDef(def, refs, overrideDateStrategy) {
      const strategy = overrideDateStrategy != null ? overrideDateStrategy : refs.dateStrategy;
      if (Array.isArray(strategy)) {
        return {
          anyOf: strategy.map((item, i) => parseDateDef(def, refs, item))
        };
      }
      switch (strategy) {
        case "string":
        case "format:date-time":
          return {
            type: "string",
            format: "date-time"
          };
        case "format:date":
          return {
            type: "string",
            format: "date"
          };
        case "integer":
          return integerDateParser(def, refs);
      }
    }
    exports.parseDateDef = parseDateDef;
    var integerDateParser = (def, refs) => {
      const res = {
        type: "integer",
        format: "unix-time"
      };
      if (refs.target === "openApi3") {
        return res;
      }
      for (const check of def.checks) {
        switch (check.kind) {
          case "min":
            (0, errorMessages_js_1.setResponseValueAndErrors)(
              res,
              "minimum",
              check.value,
              // This is in milliseconds
              check.message,
              refs
            );
            break;
          case "max":
            (0, errorMessages_js_1.setResponseValueAndErrors)(
              res,
              "maximum",
              check.value,
              // This is in milliseconds
              check.message,
              refs
            );
            break;
        }
      }
      return res;
    };
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/default.js
var require_default = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/default.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseDefaultDef = void 0;
    var parseDef_js_1 = require_parseDef();
    function parseDefaultDef(_def, refs) {
      return {
        ...(0, parseDef_js_1.parseDef)(_def.innerType._def, refs),
        default: _def.defaultValue()
      };
    }
    exports.parseDefaultDef = parseDefaultDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/effects.js
var require_effects = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/effects.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseEffectsDef = void 0;
    var parseDef_js_1 = require_parseDef();
    function parseEffectsDef(_def, refs) {
      return refs.effectStrategy === "input" ? (0, parseDef_js_1.parseDef)(_def.schema._def, refs) : {};
    }
    exports.parseEffectsDef = parseEffectsDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/enum.js
var require_enum = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/enum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseEnumDef = void 0;
    function parseEnumDef(def) {
      return {
        type: "string",
        enum: Array.from(def.values)
      };
    }
    exports.parseEnumDef = parseEnumDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/intersection.js
var require_intersection = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/intersection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseIntersectionDef = void 0;
    var parseDef_js_1 = require_parseDef();
    var isJsonSchema7AllOfType = (type) => {
      if ("type" in type && type.type === "string")
        return false;
      return "allOf" in type;
    };
    function parseIntersectionDef(def, refs) {
      const allOf = [
        (0, parseDef_js_1.parseDef)(def.left._def, {
          ...refs,
          currentPath: [...refs.currentPath, "allOf", "0"]
        }),
        (0, parseDef_js_1.parseDef)(def.right._def, {
          ...refs,
          currentPath: [...refs.currentPath, "allOf", "1"]
        })
      ].filter((x) => !!x);
      let unevaluatedProperties = refs.target === "jsonSchema2019-09" ? { unevaluatedProperties: false } : void 0;
      const mergedAllOf = [];
      allOf.forEach((schema) => {
        if (isJsonSchema7AllOfType(schema)) {
          mergedAllOf.push(...schema.allOf);
          if (schema.unevaluatedProperties === void 0) {
            unevaluatedProperties = void 0;
          }
        } else {
          let nestedSchema = schema;
          if ("additionalProperties" in schema && schema.additionalProperties === false) {
            const { additionalProperties, ...rest } = schema;
            nestedSchema = rest;
          } else {
            unevaluatedProperties = void 0;
          }
          mergedAllOf.push(nestedSchema);
        }
      });
      return mergedAllOf.length ? {
        allOf: mergedAllOf,
        ...unevaluatedProperties
      } : void 0;
    }
    exports.parseIntersectionDef = parseIntersectionDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/literal.js
var require_literal = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/literal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseLiteralDef = void 0;
    function parseLiteralDef(def, refs) {
      const parsedType = typeof def.value;
      if (parsedType !== "bigint" && parsedType !== "number" && parsedType !== "boolean" && parsedType !== "string") {
        return {
          type: Array.isArray(def.value) ? "array" : "object"
        };
      }
      if (refs.target === "openApi3") {
        return {
          type: parsedType === "bigint" ? "integer" : parsedType,
          enum: [def.value]
        };
      }
      return {
        type: parsedType === "bigint" ? "integer" : parsedType,
        const: def.value
      };
    }
    exports.parseLiteralDef = parseLiteralDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/string.js
var require_string = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/string.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseStringDef = exports.zodPatterns = void 0;
    var errorMessages_js_1 = require_errorMessages();
    var emojiRegex = void 0;
    exports.zodPatterns = {
      /**
       * `c` was changed to `[cC]` to replicate /i flag
       */
      cuid: /^[cC][^\s-]{8,}$/,
      cuid2: /^[0-9a-z]+$/,
      ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,
      /**
       * `a-z` was added to replicate /i flag
       */
      email: /^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,
      /**
       * Constructed a valid Unicode RegExp
       *
       * Lazily instantiate since this type of regex isn't supported
       * in all envs (e.g. React Native).
       *
       * See:
       * https://github.com/colinhacks/zod/issues/2433
       * Fix in Zod:
       * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b
       */
      emoji: () => {
        if (emojiRegex === void 0) {
          emojiRegex = RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u");
        }
        return emojiRegex;
      },
      /**
       * Unused
       */
      uuid: /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/,
      /**
       * Unused
       */
      ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,
      ipv4Cidr: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,
      /**
       * Unused
       */
      ipv6: /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,
      ipv6Cidr: /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,
      base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
      base64url: /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,
      nanoid: /^[a-zA-Z0-9_-]{21}$/,
      jwt: /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/
    };
    function parseStringDef(def, refs) {
      const res = {
        type: "string"
      };
      if (def.checks) {
        for (const check of def.checks) {
          switch (check.kind) {
            case "min":
              (0, errorMessages_js_1.setResponseValueAndErrors)(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check.value) : check.value, check.message, refs);
              break;
            case "max":
              (0, errorMessages_js_1.setResponseValueAndErrors)(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check.value) : check.value, check.message, refs);
              break;
            case "email":
              switch (refs.emailStrategy) {
                case "format:email":
                  addFormat(res, "email", check.message, refs);
                  break;
                case "format:idn-email":
                  addFormat(res, "idn-email", check.message, refs);
                  break;
                case "pattern:zod":
                  addPattern(res, exports.zodPatterns.email, check.message, refs);
                  break;
              }
              break;
            case "url":
              addFormat(res, "uri", check.message, refs);
              break;
            case "uuid":
              addFormat(res, "uuid", check.message, refs);
              break;
            case "regex":
              addPattern(res, check.regex, check.message, refs);
              break;
            case "cuid":
              addPattern(res, exports.zodPatterns.cuid, check.message, refs);
              break;
            case "cuid2":
              addPattern(res, exports.zodPatterns.cuid2, check.message, refs);
              break;
            case "startsWith":
              addPattern(res, RegExp(`^${escapeLiteralCheckValue(check.value, refs)}`), check.message, refs);
              break;
            case "endsWith":
              addPattern(res, RegExp(`${escapeLiteralCheckValue(check.value, refs)}$`), check.message, refs);
              break;
            case "datetime":
              addFormat(res, "date-time", check.message, refs);
              break;
            case "date":
              addFormat(res, "date", check.message, refs);
              break;
            case "time":
              addFormat(res, "time", check.message, refs);
              break;
            case "duration":
              addFormat(res, "duration", check.message, refs);
              break;
            case "length":
              (0, errorMessages_js_1.setResponseValueAndErrors)(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check.value) : check.value, check.message, refs);
              (0, errorMessages_js_1.setResponseValueAndErrors)(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check.value) : check.value, check.message, refs);
              break;
            case "includes": {
              addPattern(res, RegExp(escapeLiteralCheckValue(check.value, refs)), check.message, refs);
              break;
            }
            case "ip": {
              if (check.version !== "v6") {
                addFormat(res, "ipv4", check.message, refs);
              }
              if (check.version !== "v4") {
                addFormat(res, "ipv6", check.message, refs);
              }
              break;
            }
            case "base64url":
              addPattern(res, exports.zodPatterns.base64url, check.message, refs);
              break;
            case "jwt":
              addPattern(res, exports.zodPatterns.jwt, check.message, refs);
              break;
            case "cidr": {
              if (check.version !== "v6") {
                addPattern(res, exports.zodPatterns.ipv4Cidr, check.message, refs);
              }
              if (check.version !== "v4") {
                addPattern(res, exports.zodPatterns.ipv6Cidr, check.message, refs);
              }
              break;
            }
            case "emoji":
              addPattern(res, exports.zodPatterns.emoji(), check.message, refs);
              break;
            case "ulid": {
              addPattern(res, exports.zodPatterns.ulid, check.message, refs);
              break;
            }
            case "base64": {
              switch (refs.base64Strategy) {
                case "format:binary": {
                  addFormat(res, "binary", check.message, refs);
                  break;
                }
                case "contentEncoding:base64": {
                  (0, errorMessages_js_1.setResponseValueAndErrors)(res, "contentEncoding", "base64", check.message, refs);
                  break;
                }
                case "pattern:zod": {
                  addPattern(res, exports.zodPatterns.base64, check.message, refs);
                  break;
                }
              }
              break;
            }
            case "nanoid": {
              addPattern(res, exports.zodPatterns.nanoid, check.message, refs);
            }
            case "toLowerCase":
            case "toUpperCase":
            case "trim":
              break;
            default:
              ((_) => {
              })(check);
          }
        }
      }
      return res;
    }
    exports.parseStringDef = parseStringDef;
    function escapeLiteralCheckValue(literal, refs) {
      return refs.patternStrategy === "escape" ? escapeNonAlphaNumeric(literal) : literal;
    }
    var ALPHA_NUMERIC = new Set("ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz0123456789");
    function escapeNonAlphaNumeric(source) {
      let result = "";
      for (let i = 0; i < source.length; i++) {
        if (!ALPHA_NUMERIC.has(source[i])) {
          result += "\\";
        }
        result += source[i];
      }
      return result;
    }
    function addFormat(schema, value, message, refs) {
      var _a;
      if (schema.format || ((_a = schema.anyOf) == null ? void 0 : _a.some((x) => x.format))) {
        if (!schema.anyOf) {
          schema.anyOf = [];
        }
        if (schema.format) {
          schema.anyOf.push({
            format: schema.format,
            ...schema.errorMessage && refs.errorMessages && {
              errorMessage: { format: schema.errorMessage.format }
            }
          });
          delete schema.format;
          if (schema.errorMessage) {
            delete schema.errorMessage.format;
            if (Object.keys(schema.errorMessage).length === 0) {
              delete schema.errorMessage;
            }
          }
        }
        schema.anyOf.push({
          format: value,
          ...message && refs.errorMessages && { errorMessage: { format: message } }
        });
      } else {
        (0, errorMessages_js_1.setResponseValueAndErrors)(schema, "format", value, message, refs);
      }
    }
    function addPattern(schema, regex, message, refs) {
      var _a;
      if (schema.pattern || ((_a = schema.allOf) == null ? void 0 : _a.some((x) => x.pattern))) {
        if (!schema.allOf) {
          schema.allOf = [];
        }
        if (schema.pattern) {
          schema.allOf.push({
            pattern: schema.pattern,
            ...schema.errorMessage && refs.errorMessages && {
              errorMessage: { pattern: schema.errorMessage.pattern }
            }
          });
          delete schema.pattern;
          if (schema.errorMessage) {
            delete schema.errorMessage.pattern;
            if (Object.keys(schema.errorMessage).length === 0) {
              delete schema.errorMessage;
            }
          }
        }
        schema.allOf.push({
          pattern: stringifyRegExpWithFlags(regex, refs),
          ...message && refs.errorMessages && { errorMessage: { pattern: message } }
        });
      } else {
        (0, errorMessages_js_1.setResponseValueAndErrors)(schema, "pattern", stringifyRegExpWithFlags(regex, refs), message, refs);
      }
    }
    function stringifyRegExpWithFlags(regex, refs) {
      var _a;
      if (!refs.applyRegexFlags || !regex.flags) {
        return regex.source;
      }
      const flags = {
        i: regex.flags.includes("i"),
        m: regex.flags.includes("m"),
        s: regex.flags.includes("s")
        // `.` matches newlines
      };
      const source = flags.i ? regex.source.toLowerCase() : regex.source;
      let pattern = "";
      let isEscaped = false;
      let inCharGroup = false;
      let inCharRange = false;
      for (let i = 0; i < source.length; i++) {
        if (isEscaped) {
          pattern += source[i];
          isEscaped = false;
          continue;
        }
        if (flags.i) {
          if (inCharGroup) {
            if (source[i].match(/[a-z]/)) {
              if (inCharRange) {
                pattern += source[i];
                pattern += `${source[i - 2]}-${source[i]}`.toUpperCase();
                inCharRange = false;
              } else if (source[i + 1] === "-" && ((_a = source[i + 2]) == null ? void 0 : _a.match(/[a-z]/))) {
                pattern += source[i];
                inCharRange = true;
              } else {
                pattern += `${source[i]}${source[i].toUpperCase()}`;
              }
              continue;
            }
          } else if (source[i].match(/[a-z]/)) {
            pattern += `[${source[i]}${source[i].toUpperCase()}]`;
            continue;
          }
        }
        if (flags.m) {
          if (source[i] === "^") {
            pattern += `(^|(?<=[\r
]))`;
            continue;
          } else if (source[i] === "$") {
            pattern += `($|(?=[\r
]))`;
            continue;
          }
        }
        if (flags.s && source[i] === ".") {
          pattern += inCharGroup ? `${source[i]}\r
` : `[${source[i]}\r
]`;
          continue;
        }
        pattern += source[i];
        if (source[i] === "\\") {
          isEscaped = true;
        } else if (inCharGroup && source[i] === "]") {
          inCharGroup = false;
        } else if (!inCharGroup && source[i] === "[") {
          inCharGroup = true;
        }
      }
      try {
        new RegExp(pattern);
      } catch (e) {
        console.warn(`Could not convert regex pattern at ${refs.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`);
        return regex.source;
      }
      return pattern;
    }
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/record.js
var require_record = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/record.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseRecordDef = void 0;
    var zod_1 = require_lib();
    var parseDef_js_1 = require_parseDef();
    var string_js_1 = require_string();
    var branded_js_1 = require_branded();
    function parseRecordDef(def, refs) {
      var _a, _b, _c, _d, _e, _f, _g;
      if (refs.target === "openAi") {
        console.warn("Warning: OpenAI may not support records in schemas! Try an array of key-value pairs instead.");
      }
      if (refs.target === "openApi3" && ((_a = def.keyType) == null ? void 0 : _a._def.typeName) === zod_1.ZodFirstPartyTypeKind.ZodEnum) {
        return {
          type: "object",
          required: def.keyType._def.values,
          properties: def.keyType._def.values.reduce((acc, key) => {
            var _a2;
            return {
              ...acc,
              [key]: (_a2 = (0, parseDef_js_1.parseDef)(def.valueType._def, {
                ...refs,
                currentPath: [...refs.currentPath, "properties", key]
              })) != null ? _a2 : {}
            };
          }, {}),
          additionalProperties: refs.rejectedAdditionalProperties
        };
      }
      const schema = {
        type: "object",
        additionalProperties: (_b = (0, parseDef_js_1.parseDef)(def.valueType._def, {
          ...refs,
          currentPath: [...refs.currentPath, "additionalProperties"]
        })) != null ? _b : refs.allowedAdditionalProperties
      };
      if (refs.target === "openApi3") {
        return schema;
      }
      if (((_c = def.keyType) == null ? void 0 : _c._def.typeName) === zod_1.ZodFirstPartyTypeKind.ZodString && ((_d = def.keyType._def.checks) == null ? void 0 : _d.length)) {
        const { type, ...keyType } = (0, string_js_1.parseStringDef)(def.keyType._def, refs);
        return {
          ...schema,
          propertyNames: keyType
        };
      } else if (((_e = def.keyType) == null ? void 0 : _e._def.typeName) === zod_1.ZodFirstPartyTypeKind.ZodEnum) {
        return {
          ...schema,
          propertyNames: {
            enum: def.keyType._def.values
          }
        };
      } else if (((_f = def.keyType) == null ? void 0 : _f._def.typeName) === zod_1.ZodFirstPartyTypeKind.ZodBranded && def.keyType._def.type._def.typeName === zod_1.ZodFirstPartyTypeKind.ZodString && ((_g = def.keyType._def.type._def.checks) == null ? void 0 : _g.length)) {
        const { type, ...keyType } = (0, branded_js_1.parseBrandedDef)(def.keyType._def, refs);
        return {
          ...schema,
          propertyNames: keyType
        };
      }
      return schema;
    }
    exports.parseRecordDef = parseRecordDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/map.js
var require_map = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/map.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseMapDef = void 0;
    var parseDef_js_1 = require_parseDef();
    var record_js_1 = require_record();
    function parseMapDef(def, refs) {
      if (refs.mapStrategy === "record") {
        return (0, record_js_1.parseRecordDef)(def, refs);
      }
      const keys = (0, parseDef_js_1.parseDef)(def.keyType._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items", "items", "0"]
      }) || {};
      const values = (0, parseDef_js_1.parseDef)(def.valueType._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items", "items", "1"]
      }) || {};
      return {
        type: "array",
        maxItems: 125,
        items: {
          type: "array",
          items: [keys, values],
          minItems: 2,
          maxItems: 2
        }
      };
    }
    exports.parseMapDef = parseMapDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/nativeEnum.js
var require_nativeEnum = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/nativeEnum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseNativeEnumDef = void 0;
    function parseNativeEnumDef(def) {
      const object = def.values;
      const actualKeys = Object.keys(def.values).filter((key) => {
        return typeof object[object[key]] !== "number";
      });
      const actualValues = actualKeys.map((key) => object[key]);
      const parsedTypes = Array.from(new Set(actualValues.map((values) => typeof values)));
      return {
        type: parsedTypes.length === 1 ? parsedTypes[0] === "string" ? "string" : "number" : ["string", "number"],
        enum: actualValues
      };
    }
    exports.parseNativeEnumDef = parseNativeEnumDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/never.js
var require_never = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/never.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseNeverDef = void 0;
    function parseNeverDef() {
      return {
        not: {}
      };
    }
    exports.parseNeverDef = parseNeverDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/null.js
var require_null = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/null.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseNullDef = void 0;
    function parseNullDef(refs) {
      return refs.target === "openApi3" ? {
        enum: ["null"],
        nullable: true
      } : {
        type: "null"
      };
    }
    exports.parseNullDef = parseNullDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/union.js
var require_union = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/union.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseUnionDef = exports.primitiveMappings = void 0;
    var parseDef_js_1 = require_parseDef();
    exports.primitiveMappings = {
      ZodString: "string",
      ZodNumber: "number",
      ZodBigInt: "integer",
      ZodBoolean: "boolean",
      ZodNull: "null"
    };
    function parseUnionDef(def, refs) {
      if (refs.target === "openApi3")
        return asAnyOf(def, refs);
      const options = def.options instanceof Map ? Array.from(def.options.values()) : def.options;
      if (options.every((x) => x._def.typeName in exports.primitiveMappings && (!x._def.checks || !x._def.checks.length))) {
        const types = options.reduce((types2, x) => {
          const type = exports.primitiveMappings[x._def.typeName];
          return type && !types2.includes(type) ? [...types2, type] : types2;
        }, []);
        return {
          type: types.length > 1 ? types : types[0]
        };
      } else if (options.every((x) => x._def.typeName === "ZodLiteral" && !x.description)) {
        const types = options.reduce((acc, x) => {
          const type = typeof x._def.value;
          switch (type) {
            case "string":
            case "number":
            case "boolean":
              return [...acc, type];
            case "bigint":
              return [...acc, "integer"];
            case "object":
              if (x._def.value === null)
                return [...acc, "null"];
            case "symbol":
            case "undefined":
            case "function":
            default:
              return acc;
          }
        }, []);
        if (types.length === options.length) {
          const uniqueTypes = types.filter((x, i, a) => a.indexOf(x) === i);
          return {
            type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],
            enum: options.reduce((acc, x) => {
              return acc.includes(x._def.value) ? acc : [...acc, x._def.value];
            }, [])
          };
        }
      } else if (options.every((x) => x._def.typeName === "ZodEnum")) {
        return {
          type: "string",
          enum: options.reduce((acc, x) => [
            ...acc,
            ...x._def.values.filter((x2) => !acc.includes(x2))
          ], [])
        };
      }
      return asAnyOf(def, refs);
    }
    exports.parseUnionDef = parseUnionDef;
    var asAnyOf = (def, refs) => {
      const anyOf = (def.options instanceof Map ? Array.from(def.options.values()) : def.options).map((x, i) => (0, parseDef_js_1.parseDef)(x._def, {
        ...refs,
        currentPath: [...refs.currentPath, "anyOf", `${i}`]
      })).filter((x) => !!x && (!refs.strictUnions || typeof x === "object" && Object.keys(x).length > 0));
      return anyOf.length ? { anyOf } : void 0;
    };
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/nullable.js
var require_nullable = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/nullable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseNullableDef = void 0;
    var parseDef_js_1 = require_parseDef();
    var union_js_1 = require_union();
    function parseNullableDef(def, refs) {
      if (["ZodString", "ZodNumber", "ZodBigInt", "ZodBoolean", "ZodNull"].includes(def.innerType._def.typeName) && (!def.innerType._def.checks || !def.innerType._def.checks.length)) {
        if (refs.target === "openApi3") {
          return {
            type: union_js_1.primitiveMappings[def.innerType._def.typeName],
            nullable: true
          };
        }
        return {
          type: [
            union_js_1.primitiveMappings[def.innerType._def.typeName],
            "null"
          ]
        };
      }
      if (refs.target === "openApi3") {
        const base2 = (0, parseDef_js_1.parseDef)(def.innerType._def, {
          ...refs,
          currentPath: [...refs.currentPath]
        });
        if (base2 && "$ref" in base2)
          return { allOf: [base2], nullable: true };
        return base2 && { ...base2, nullable: true };
      }
      const base = (0, parseDef_js_1.parseDef)(def.innerType._def, {
        ...refs,
        currentPath: [...refs.currentPath, "anyOf", "0"]
      });
      return base && { anyOf: [base, { type: "null" }] };
    }
    exports.parseNullableDef = parseNullableDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/number.js
var require_number = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/number.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseNumberDef = void 0;
    var errorMessages_js_1 = require_errorMessages();
    function parseNumberDef(def, refs) {
      const res = {
        type: "number"
      };
      if (!def.checks)
        return res;
      for (const check of def.checks) {
        switch (check.kind) {
          case "int":
            res.type = "integer";
            (0, errorMessages_js_1.addErrorMessage)(res, "type", check.message, refs);
            break;
          case "min":
            if (refs.target === "jsonSchema7") {
              if (check.inclusive) {
                (0, errorMessages_js_1.setResponseValueAndErrors)(res, "minimum", check.value, check.message, refs);
              } else {
                (0, errorMessages_js_1.setResponseValueAndErrors)(res, "exclusiveMinimum", check.value, check.message, refs);
              }
            } else {
              if (!check.inclusive) {
                res.exclusiveMinimum = true;
              }
              (0, errorMessages_js_1.setResponseValueAndErrors)(res, "minimum", check.value, check.message, refs);
            }
            break;
          case "max":
            if (refs.target === "jsonSchema7") {
              if (check.inclusive) {
                (0, errorMessages_js_1.setResponseValueAndErrors)(res, "maximum", check.value, check.message, refs);
              } else {
                (0, errorMessages_js_1.setResponseValueAndErrors)(res, "exclusiveMaximum", check.value, check.message, refs);
              }
            } else {
              if (!check.inclusive) {
                res.exclusiveMaximum = true;
              }
              (0, errorMessages_js_1.setResponseValueAndErrors)(res, "maximum", check.value, check.message, refs);
            }
            break;
          case "multipleOf":
            (0, errorMessages_js_1.setResponseValueAndErrors)(res, "multipleOf", check.value, check.message, refs);
            break;
        }
      }
      return res;
    }
    exports.parseNumberDef = parseNumberDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/object.js
var require_object = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/object.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseObjectDef = void 0;
    var zod_1 = require_lib();
    var parseDef_js_1 = require_parseDef();
    function parseObjectDef(def, refs) {
      const forceOptionalIntoNullable = refs.target === "openAi";
      const result = {
        type: "object",
        properties: {}
      };
      const required = [];
      const shape = def.shape();
      for (const propName in shape) {
        let propDef = shape[propName];
        if (propDef === void 0 || propDef._def === void 0) {
          continue;
        }
        let propOptional = safeIsOptional(propDef);
        if (propOptional && forceOptionalIntoNullable) {
          if (propDef instanceof zod_1.ZodOptional) {
            propDef = propDef._def.innerType;
          }
          if (!propDef.isNullable()) {
            propDef = propDef.nullable();
          }
          propOptional = false;
        }
        const parsedDef = (0, parseDef_js_1.parseDef)(propDef._def, {
          ...refs,
          currentPath: [...refs.currentPath, "properties", propName],
          propertyPath: [...refs.currentPath, "properties", propName]
        });
        if (parsedDef === void 0) {
          continue;
        }
        result.properties[propName] = parsedDef;
        if (!propOptional) {
          required.push(propName);
        }
      }
      if (required.length) {
        result.required = required;
      }
      const additionalProperties = decideAdditionalProperties(def, refs);
      if (additionalProperties !== void 0) {
        result.additionalProperties = additionalProperties;
      }
      return result;
    }
    exports.parseObjectDef = parseObjectDef;
    function decideAdditionalProperties(def, refs) {
      if (def.catchall._def.typeName !== "ZodNever") {
        return (0, parseDef_js_1.parseDef)(def.catchall._def, {
          ...refs,
          currentPath: [...refs.currentPath, "additionalProperties"]
        });
      }
      switch (def.unknownKeys) {
        case "passthrough":
          return refs.allowedAdditionalProperties;
        case "strict":
          return refs.rejectedAdditionalProperties;
        case "strip":
          return refs.removeAdditionalStrategy === "strict" ? refs.allowedAdditionalProperties : refs.rejectedAdditionalProperties;
      }
    }
    function safeIsOptional(schema) {
      try {
        return schema.isOptional();
      } catch (e) {
        return true;
      }
    }
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/optional.js
var require_optional = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/optional.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseOptionalDef = void 0;
    var parseDef_js_1 = require_parseDef();
    var parseOptionalDef = (def, refs) => {
      var _a;
      if (refs.currentPath.toString() === ((_a = refs.propertyPath) == null ? void 0 : _a.toString())) {
        return (0, parseDef_js_1.parseDef)(def.innerType._def, refs);
      }
      const innerSchema = (0, parseDef_js_1.parseDef)(def.innerType._def, {
        ...refs,
        currentPath: [...refs.currentPath, "anyOf", "1"]
      });
      return innerSchema ? {
        anyOf: [
          {
            not: {}
          },
          innerSchema
        ]
      } : {};
    };
    exports.parseOptionalDef = parseOptionalDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/pipeline.js
var require_pipeline = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/pipeline.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parsePipelineDef = void 0;
    var parseDef_js_1 = require_parseDef();
    var parsePipelineDef = (def, refs) => {
      if (refs.pipeStrategy === "input") {
        return (0, parseDef_js_1.parseDef)(def.in._def, refs);
      } else if (refs.pipeStrategy === "output") {
        return (0, parseDef_js_1.parseDef)(def.out._def, refs);
      }
      const a = (0, parseDef_js_1.parseDef)(def.in._def, {
        ...refs,
        currentPath: [...refs.currentPath, "allOf", "0"]
      });
      const b = (0, parseDef_js_1.parseDef)(def.out._def, {
        ...refs,
        currentPath: [...refs.currentPath, "allOf", a ? "1" : "0"]
      });
      return {
        allOf: [a, b].filter((x) => x !== void 0)
      };
    };
    exports.parsePipelineDef = parsePipelineDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/promise.js
var require_promise = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/promise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parsePromiseDef = void 0;
    var parseDef_js_1 = require_parseDef();
    function parsePromiseDef(def, refs) {
      return (0, parseDef_js_1.parseDef)(def.type._def, refs);
    }
    exports.parsePromiseDef = parsePromiseDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/set.js
var require_set = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/set.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseSetDef = void 0;
    var errorMessages_js_1 = require_errorMessages();
    var parseDef_js_1 = require_parseDef();
    function parseSetDef(def, refs) {
      const items = (0, parseDef_js_1.parseDef)(def.valueType._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items"]
      });
      const schema = {
        type: "array",
        uniqueItems: true,
        items
      };
      if (def.minSize) {
        (0, errorMessages_js_1.setResponseValueAndErrors)(schema, "minItems", def.minSize.value, def.minSize.message, refs);
      }
      if (def.maxSize) {
        (0, errorMessages_js_1.setResponseValueAndErrors)(schema, "maxItems", def.maxSize.value, def.maxSize.message, refs);
      }
      return schema;
    }
    exports.parseSetDef = parseSetDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/tuple.js
var require_tuple = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/tuple.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseTupleDef = void 0;
    var parseDef_js_1 = require_parseDef();
    function parseTupleDef(def, refs) {
      if (def.rest) {
        return {
          type: "array",
          minItems: def.items.length,
          items: def.items.map((x, i) => (0, parseDef_js_1.parseDef)(x._def, {
            ...refs,
            currentPath: [...refs.currentPath, "items", `${i}`]
          })).reduce((acc, x) => x === void 0 ? acc : [...acc, x], []),
          additionalItems: (0, parseDef_js_1.parseDef)(def.rest._def, {
            ...refs,
            currentPath: [...refs.currentPath, "additionalItems"]
          })
        };
      } else {
        return {
          type: "array",
          minItems: def.items.length,
          maxItems: def.items.length,
          items: def.items.map((x, i) => (0, parseDef_js_1.parseDef)(x._def, {
            ...refs,
            currentPath: [...refs.currentPath, "items", `${i}`]
          })).reduce((acc, x) => x === void 0 ? acc : [...acc, x], [])
        };
      }
    }
    exports.parseTupleDef = parseTupleDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/undefined.js
var require_undefined = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/undefined.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseUndefinedDef = void 0;
    function parseUndefinedDef() {
      return {
        not: {}
      };
    }
    exports.parseUndefinedDef = parseUndefinedDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/unknown.js
var require_unknown = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/unknown.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseUnknownDef = void 0;
    function parseUnknownDef() {
      return {};
    }
    exports.parseUnknownDef = parseUnknownDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parsers/readonly.js
var require_readonly = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parsers/readonly.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseReadonlyDef = void 0;
    var parseDef_js_1 = require_parseDef();
    var parseReadonlyDef = (def, refs) => {
      return (0, parseDef_js_1.parseDef)(def.innerType._def, refs);
    };
    exports.parseReadonlyDef = parseReadonlyDef;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/selectParser.js
var require_selectParser = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/selectParser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.selectParser = void 0;
    var zod_1 = require_lib();
    var any_js_1 = require_any();
    var array_js_1 = require_array();
    var bigint_js_1 = require_bigint();
    var boolean_js_1 = require_boolean();
    var branded_js_1 = require_branded();
    var catch_js_1 = require_catch();
    var date_js_1 = require_date();
    var default_js_1 = require_default();
    var effects_js_1 = require_effects();
    var enum_js_1 = require_enum();
    var intersection_js_1 = require_intersection();
    var literal_js_1 = require_literal();
    var map_js_1 = require_map();
    var nativeEnum_js_1 = require_nativeEnum();
    var never_js_1 = require_never();
    var null_js_1 = require_null();
    var nullable_js_1 = require_nullable();
    var number_js_1 = require_number();
    var object_js_1 = require_object();
    var optional_js_1 = require_optional();
    var pipeline_js_1 = require_pipeline();
    var promise_js_1 = require_promise();
    var record_js_1 = require_record();
    var set_js_1 = require_set();
    var string_js_1 = require_string();
    var tuple_js_1 = require_tuple();
    var undefined_js_1 = require_undefined();
    var union_js_1 = require_union();
    var unknown_js_1 = require_unknown();
    var readonly_js_1 = require_readonly();
    var selectParser = (def, typeName, refs) => {
      switch (typeName) {
        case zod_1.ZodFirstPartyTypeKind.ZodString:
          return (0, string_js_1.parseStringDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodNumber:
          return (0, number_js_1.parseNumberDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodObject:
          return (0, object_js_1.parseObjectDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodBigInt:
          return (0, bigint_js_1.parseBigintDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodBoolean:
          return (0, boolean_js_1.parseBooleanDef)();
        case zod_1.ZodFirstPartyTypeKind.ZodDate:
          return (0, date_js_1.parseDateDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodUndefined:
          return (0, undefined_js_1.parseUndefinedDef)();
        case zod_1.ZodFirstPartyTypeKind.ZodNull:
          return (0, null_js_1.parseNullDef)(refs);
        case zod_1.ZodFirstPartyTypeKind.ZodArray:
          return (0, array_js_1.parseArrayDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodUnion:
        case zod_1.ZodFirstPartyTypeKind.ZodDiscriminatedUnion:
          return (0, union_js_1.parseUnionDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodIntersection:
          return (0, intersection_js_1.parseIntersectionDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodTuple:
          return (0, tuple_js_1.parseTupleDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodRecord:
          return (0, record_js_1.parseRecordDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodLiteral:
          return (0, literal_js_1.parseLiteralDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodEnum:
          return (0, enum_js_1.parseEnumDef)(def);
        case zod_1.ZodFirstPartyTypeKind.ZodNativeEnum:
          return (0, nativeEnum_js_1.parseNativeEnumDef)(def);
        case zod_1.ZodFirstPartyTypeKind.ZodNullable:
          return (0, nullable_js_1.parseNullableDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodOptional:
          return (0, optional_js_1.parseOptionalDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodMap:
          return (0, map_js_1.parseMapDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodSet:
          return (0, set_js_1.parseSetDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodLazy:
          return () => def.getter()._def;
        case zod_1.ZodFirstPartyTypeKind.ZodPromise:
          return (0, promise_js_1.parsePromiseDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodNaN:
        case zod_1.ZodFirstPartyTypeKind.ZodNever:
          return (0, never_js_1.parseNeverDef)();
        case zod_1.ZodFirstPartyTypeKind.ZodEffects:
          return (0, effects_js_1.parseEffectsDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodAny:
          return (0, any_js_1.parseAnyDef)();
        case zod_1.ZodFirstPartyTypeKind.ZodUnknown:
          return (0, unknown_js_1.parseUnknownDef)();
        case zod_1.ZodFirstPartyTypeKind.ZodDefault:
          return (0, default_js_1.parseDefaultDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodBranded:
          return (0, branded_js_1.parseBrandedDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodReadonly:
          return (0, readonly_js_1.parseReadonlyDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodCatch:
          return (0, catch_js_1.parseCatchDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodPipeline:
          return (0, pipeline_js_1.parsePipelineDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodFunction:
        case zod_1.ZodFirstPartyTypeKind.ZodVoid:
        case zod_1.ZodFirstPartyTypeKind.ZodSymbol:
          return void 0;
        default:
          return ((_) => void 0)(typeName);
      }
    };
    exports.selectParser = selectParser;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parseDef.js
var require_parseDef = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parseDef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseDef = void 0;
    var Options_js_1 = require_Options();
    var selectParser_js_1 = require_selectParser();
    function parseDef(def, refs, forceResolution = false) {
      var _a;
      const seenItem = refs.seen.get(def);
      if (refs.override) {
        const overrideResult = (_a = refs.override) == null ? void 0 : _a.call(refs, def, refs, seenItem, forceResolution);
        if (overrideResult !== Options_js_1.ignoreOverride) {
          return overrideResult;
        }
      }
      if (seenItem && !forceResolution) {
        const seenSchema = get$ref(seenItem, refs);
        if (seenSchema !== void 0) {
          return seenSchema;
        }
      }
      const newItem = { def, path: refs.currentPath, jsonSchema: void 0 };
      refs.seen.set(def, newItem);
      const jsonSchemaOrGetter = (0, selectParser_js_1.selectParser)(def, def.typeName, refs);
      const jsonSchema = typeof jsonSchemaOrGetter === "function" ? parseDef(jsonSchemaOrGetter(), refs) : jsonSchemaOrGetter;
      if (jsonSchema) {
        addMeta(def, refs, jsonSchema);
      }
      if (refs.postProcess) {
        const postProcessResult = refs.postProcess(jsonSchema, def, refs);
        newItem.jsonSchema = jsonSchema;
        return postProcessResult;
      }
      newItem.jsonSchema = jsonSchema;
      return jsonSchema;
    }
    exports.parseDef = parseDef;
    var get$ref = (item, refs) => {
      switch (refs.$refStrategy) {
        case "root":
          return { $ref: item.path.join("/") };
        case "relative":
          return { $ref: getRelativePath(refs.currentPath, item.path) };
        case "none":
        case "seen": {
          if (item.path.length < refs.currentPath.length && item.path.every((value, index) => refs.currentPath[index] === value)) {
            console.warn(`Recursive reference detected at ${refs.currentPath.join("/")}! Defaulting to any`);
            return {};
          }
          return refs.$refStrategy === "seen" ? {} : void 0;
        }
      }
    };
    var getRelativePath = (pathA, pathB) => {
      let i = 0;
      for (; i < pathA.length && i < pathB.length; i++) {
        if (pathA[i] !== pathB[i])
          break;
      }
      return [(pathA.length - i).toString(), ...pathB.slice(i)].join("/");
    };
    var addMeta = (def, refs, jsonSchema) => {
      if (def.description) {
        jsonSchema.description = def.description;
        if (refs.markdownDescription) {
          jsonSchema.markdownDescription = def.description;
        }
      }
      return jsonSchema;
    };
  }
});

// node_modules/zod-to-json-schema/dist/cjs/parseTypes.js
var require_parseTypes = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/parseTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/zod-to-json-schema/dist/cjs/zodToJsonSchema.js
var require_zodToJsonSchema = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/zodToJsonSchema.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.zodToJsonSchema = void 0;
    var parseDef_js_1 = require_parseDef();
    var Refs_js_1 = require_Refs();
    var zodToJsonSchema = (schema, options) => {
      var _a;
      const refs = (0, Refs_js_1.getRefs)(options);
      const definitions = typeof options === "object" && options.definitions ? Object.entries(options.definitions).reduce((acc, [name2, schema2]) => {
        var _a2;
        return {
          ...acc,
          [name2]: (_a2 = (0, parseDef_js_1.parseDef)(schema2._def, {
            ...refs,
            currentPath: [...refs.basePath, refs.definitionPath, name2]
          }, true)) != null ? _a2 : {}
        };
      }, {}) : void 0;
      const name = typeof options === "string" ? options : (options == null ? void 0 : options.nameStrategy) === "title" ? void 0 : options == null ? void 0 : options.name;
      const main = (_a = (0, parseDef_js_1.parseDef)(schema._def, name === void 0 ? refs : {
        ...refs,
        currentPath: [...refs.basePath, refs.definitionPath, name]
      }, false)) != null ? _a : {};
      const title = typeof options === "object" && options.name !== void 0 && options.nameStrategy === "title" ? options.name : void 0;
      if (title !== void 0) {
        main.title = title;
      }
      const combined = name === void 0 ? definitions ? {
        ...main,
        [refs.definitionPath]: definitions
      } : main : {
        $ref: [
          ...refs.$refStrategy === "relative" ? [] : refs.basePath,
          refs.definitionPath,
          name
        ].join("/"),
        [refs.definitionPath]: {
          ...definitions,
          [name]: main
        }
      };
      if (refs.target === "jsonSchema7") {
        combined.$schema = "http://json-schema.org/draft-07/schema#";
      } else if (refs.target === "jsonSchema2019-09" || refs.target === "openAi") {
        combined.$schema = "https://json-schema.org/draft/2019-09/schema#";
      }
      if (refs.target === "openAi" && ("anyOf" in combined || "oneOf" in combined || "allOf" in combined || "type" in combined && Array.isArray(combined.type))) {
        console.warn("Warning: OpenAI may not support schemas with unions as roots! Try wrapping it in an object property.");
      }
      return combined;
    };
    exports.zodToJsonSchema = zodToJsonSchema;
  }
});

// node_modules/zod-to-json-schema/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/zod-to-json-schema/dist/cjs/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Options(), exports);
    __exportStar(require_Refs(), exports);
    __exportStar(require_errorMessages(), exports);
    __exportStar(require_parseDef(), exports);
    __exportStar(require_parseTypes(), exports);
    __exportStar(require_any(), exports);
    __exportStar(require_array(), exports);
    __exportStar(require_bigint(), exports);
    __exportStar(require_boolean(), exports);
    __exportStar(require_branded(), exports);
    __exportStar(require_catch(), exports);
    __exportStar(require_date(), exports);
    __exportStar(require_default(), exports);
    __exportStar(require_effects(), exports);
    __exportStar(require_enum(), exports);
    __exportStar(require_intersection(), exports);
    __exportStar(require_literal(), exports);
    __exportStar(require_map(), exports);
    __exportStar(require_nativeEnum(), exports);
    __exportStar(require_never(), exports);
    __exportStar(require_null(), exports);
    __exportStar(require_nullable(), exports);
    __exportStar(require_number(), exports);
    __exportStar(require_object(), exports);
    __exportStar(require_optional(), exports);
    __exportStar(require_pipeline(), exports);
    __exportStar(require_promise(), exports);
    __exportStar(require_readonly(), exports);
    __exportStar(require_record(), exports);
    __exportStar(require_set(), exports);
    __exportStar(require_string(), exports);
    __exportStar(require_tuple(), exports);
    __exportStar(require_undefined(), exports);
    __exportStar(require_union(), exports);
    __exportStar(require_unknown(), exports);
    __exportStar(require_selectParser(), exports);
    __exportStar(require_zodToJsonSchema(), exports);
    var zodToJsonSchema_js_1 = require_zodToJsonSchema();
    exports.default = zodToJsonSchema_js_1.zodToJsonSchema;
  }
});

// node_modules/@mistralai/mistralai/extra/structChat.js
var require_structChat = __commonJS({
  "node_modules/@mistralai/mistralai/extra/structChat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.transformToChatCompletionRequest = transformToChatCompletionRequest;
    exports.convertToParsedChatCompletionResponse = convertToParsedChatCompletionResponse;
    exports.responseFormatFromZodObject = responseFormatFromZodObject;
    var zod_to_json_schema_1 = require_cjs();
    function transformToChatCompletionRequest(parsedRequest) {
      const { responseFormat, ...rest } = parsedRequest;
      const transformedResponseFormat = responseFormatFromZodObject(responseFormat);
      return {
        ...rest,
        responseFormat: transformedResponseFormat
      };
    }
    function convertToParsedChatCompletionResponse(response, responseFormat) {
      if (response.choices === void 0 || response.choices.length === 0) {
        return {
          ...response,
          choices: response.choices === void 0 ? void 0 : []
        };
      }
      const parsedChoices = [];
      for (const _choice of response.choices) {
        if (_choice.message === null || typeof _choice.message === "undefined") {
          parsedChoices.push({ ..._choice, message: void 0 });
        } else {
          if (_choice.message.content !== null && typeof _choice.message.content !== "undefined" && !Array.isArray(_choice.message.content)) {
            parsedChoices.push({
              ..._choice,
              message: {
                ..._choice.message,
                parsed: responseFormat.safeParse(JSON.parse(_choice.message.content)).data
              }
            });
          }
        }
      }
      return {
        ...response,
        choices: parsedChoices
      };
    }
    function responseFormatFromZodObject(responseFormat) {
      const responseJsonSchema = (0, zod_to_json_schema_1.zodToJsonSchema)(responseFormat);
      const placeholderName = "placeholderName";
      return {
        type: "json_schema",
        jsonSchema: {
          name: placeholderName,
          schemaDefinition: responseJsonSchema,
          strict: true
        }
      };
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/chat.js
var require_chat = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/chat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Chat = void 0;
    var chatComplete_js_1 = require_chatComplete();
    var chatStream_js_1 = require_chatStream();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var structChat_js_1 = require_structChat();
    var Chat = class extends sdks_js_1.ClientSDK {
      // #region sdk-class-body
      /**
       * Chat Completion with the response parsed in the same format as the input requestFormat.
       *
       * @remarks
       * The response will be parsed back to the initial Zod object passed in the requestFormat field.
       */
      async parse(request, options) {
        const ccr_request = (0, structChat_js_1.transformToChatCompletionRequest)(request);
        const response = await (0, fp_js_1.unwrapAsync)((0, chatComplete_js_1.chatComplete)(this, ccr_request, options));
        const parsed_response = (0, structChat_js_1.convertToParsedChatCompletionResponse)(response, request.responseFormat);
        return parsed_response;
      }
      /**
       * Stream chat completion with a parsed request input.
       *
       * @remarks
       * Unlike the .parse method, this method will return a stream of events containing the JSON response. It will not be parsed back to the initial Zod object.
       * If you need to parse the stream, see the examples/src/async_structured_outputs.ts file.
       */
      async parseStream(request, options) {
        const ccr_request = (0, structChat_js_1.transformToChatCompletionRequest)(request);
        return (0, fp_js_1.unwrapAsync)((0, chatStream_js_1.chatStream)(this, ccr_request, options));
      }
      // #endregion sdk-class-body
      /**
       * Chat Completion
       */
      async complete(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, chatComplete_js_1.chatComplete)(this, request, options));
      }
      /**
       * Stream chat completion
       *
       * @remarks
       * Mistral AI provides the ability to stream responses back to a client in order to allow partial results for certain requests. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
       */
      async stream(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, chatStream_js_1.chatStream)(this, request, options));
      }
    };
    exports.Chat = Chat;
  }
});

// node_modules/@mistralai/mistralai/funcs/classifiersModerate.js
var require_classifiersModerate = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/classifiersModerate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.classifiersModerate = classifiersModerate;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    var async_js_1 = require_async();
    function classifiersModerate(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.ClassificationRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/moderations")();
      const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "moderations_v1_moderations_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.ClassificationResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/classifiersModerateChat.js
var require_classifiersModerateChat = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/classifiersModerateChat.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.classifiersModerateChat = classifiersModerateChat;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    var async_js_1 = require_async();
    function classifiersModerateChat(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.ChatModerationRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/chat/moderations")();
      const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "moderations_chat_v1_chat_moderations_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.ClassificationResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/classifiers.js
var require_classifiers = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/classifiers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Classifiers = void 0;
    var classifiersModerate_js_1 = require_classifiersModerate();
    var classifiersModerateChat_js_1 = require_classifiersModerateChat();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var Classifiers = class extends sdks_js_1.ClientSDK {
      /**
       * Moderations
       */
      async moderate(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, classifiersModerate_js_1.classifiersModerate)(this, request, options));
      }
      /**
       * Moderations Chat
       */
      async moderateChat(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, classifiersModerateChat_js_1.classifiersModerateChat)(this, request, options));
      }
    };
    exports.Classifiers = Classifiers;
  }
});

// node_modules/@mistralai/mistralai/funcs/embeddingsCreate.js
var require_embeddingsCreate = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/embeddingsCreate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.embeddingsCreate = embeddingsCreate;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    var async_js_1 = require_async();
    function embeddingsCreate(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.EmbeddingRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/embeddings")();
      const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "embeddings_v1_embeddings_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.EmbeddingResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/embeddings.js
var require_embeddings = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/embeddings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Embeddings = void 0;
    var embeddingsCreate_js_1 = require_embeddingsCreate();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var Embeddings = class extends sdks_js_1.ClientSDK {
      /**
       * Embeddings
       *
       * @remarks
       * Embeddings
       */
      async create(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, embeddingsCreate_js_1.embeddingsCreate)(this, request, options));
      }
    };
    exports.Embeddings = Embeddings;
  }
});

// node_modules/@mistralai/mistralai/funcs/filesDelete.js
var require_filesDelete = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/filesDelete.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filesDelete = filesDelete;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function filesDelete(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.FilesApiRoutesDeleteFileRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        file_id: (0, encodings_js_1.encodeSimple)("file_id", payload.file_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/files/{file_id}")(pathParams);
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "files_api_routes_delete_file",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "DELETE",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.DeleteFileOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/filesDownload.js
var require_filesDownload = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/filesDownload.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filesDownload = filesDownload;
    var z = __importStar(require_lib());
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function filesDownload(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.FilesApiRoutesDownloadFileRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        file_id: (0, encodings_js_1.encodeSimple)("file_id", payload.file_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/files/{file_id}/content")(pathParams);
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/octet-stream"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "files_api_routes_download_file",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.stream(200, z.instanceof(ReadableStream)), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/filesGetSignedUrl.js
var require_filesGetSignedUrl = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/filesGetSignedUrl.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filesGetSignedUrl = filesGetSignedUrl;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function filesGetSignedUrl(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.FilesApiRoutesGetSignedUrlRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        file_id: (0, encodings_js_1.encodeSimple)("file_id", payload.file_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/files/{file_id}/url")(pathParams);
      const query = (0, encodings_js_1.encodeFormQuery)({
        "expiry": payload.expiry
      });
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "files_api_routes_get_signed_url",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        query,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.FileSignedURL$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/filesList.js
var require_filesList = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/filesList.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filesList = filesList;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function filesList(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.FilesApiRoutesListFilesRequest$outboundSchema.optional().parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = null;
      const path = (0, url_js_1.pathToFunc)("/v1/files")();
      const query = (0, encodings_js_1.encodeFormQuery)({
        "page": payload == null ? void 0 : payload.page,
        "page_size": payload == null ? void 0 : payload.page_size,
        "purpose": payload == null ? void 0 : payload.purpose,
        "sample_type": payload == null ? void 0 : payload.sample_type,
        "search": payload == null ? void 0 : payload.search,
        "source": payload == null ? void 0 : payload.source
      });
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "files_api_routes_list_files",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        query,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.ListFilesOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/filesRetrieve.js
var require_filesRetrieve = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/filesRetrieve.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filesRetrieve = filesRetrieve;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function filesRetrieve(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.FilesApiRoutesRetrieveFileRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        file_id: (0, encodings_js_1.encodeSimple)("file_id", payload.file_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/files/{file_id}")(pathParams);
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "files_api_routes_retrieve_file",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.RetrieveFileOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/types/streams.js
var require_streams = __commonJS({
  "node_modules/@mistralai/mistralai/types/streams.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isReadableStream = isReadableStream;
    function isReadableStream(val) {
      if (typeof val !== "object" || val === null) {
        return false;
      }
      const stream = val;
      return typeof stream.getReader === "function" && typeof stream.cancel === "function" && typeof stream.tee === "function";
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/filesUpload.js
var require_filesUpload = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/filesUpload.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filesUpload = filesUpload;
    var encodings_js_1 = require_encodings();
    var files_js_1 = require_files();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    var blobs_js_1 = require_blobs();
    var streams_js_1 = require_streams();
    function filesUpload(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.FilesApiRoutesUploadFileMultiPartBodyParams$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = new FormData();
      if ((0, blobs_js_1.isBlobLike)(payload.file)) {
        (0, encodings_js_1.appendForm)(body, "file", payload.file);
      } else if ((0, streams_js_1.isReadableStream)(payload.file.content)) {
        const buffer = await (0, files_js_1.readableStreamToArrayBuffer)(payload.file.content);
        const blob = new Blob([buffer], { type: "application/octet-stream" });
        (0, encodings_js_1.appendForm)(body, "file", blob);
      } else {
        (0, encodings_js_1.appendForm)(body, "file", new Blob([payload.file.content], { type: "application/octet-stream" }), payload.file.fileName);
      }
      if (payload.purpose !== void 0) {
        (0, encodings_js_1.appendForm)(body, "purpose", payload.purpose);
      }
      const path = (0, url_js_1.pathToFunc)("/v1/files")();
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "files_api_routes_upload_file",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.UploadFileOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/files.js
var require_files2 = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/files.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Files = void 0;
    var filesDelete_js_1 = require_filesDelete();
    var filesDownload_js_1 = require_filesDownload();
    var filesGetSignedUrl_js_1 = require_filesGetSignedUrl();
    var filesList_js_1 = require_filesList();
    var filesRetrieve_js_1 = require_filesRetrieve();
    var filesUpload_js_1 = require_filesUpload();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var Files = class extends sdks_js_1.ClientSDK {
      /**
       * Upload File
       *
       * @remarks
       * Upload a file that can be used across various endpoints.
       *
       * The size of individual files can be a maximum of 512 MB. The Fine-tuning API only supports .jsonl files.
       *
       * Please contact us if you need to increase these storage limits.
       */
      async upload(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, filesUpload_js_1.filesUpload)(this, request, options));
      }
      /**
       * List Files
       *
       * @remarks
       * Returns a list of files that belong to the user's organization.
       */
      async list(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, filesList_js_1.filesList)(this, request, options));
      }
      /**
       * Retrieve File
       *
       * @remarks
       * Returns information about a specific file.
       */
      async retrieve(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, filesRetrieve_js_1.filesRetrieve)(this, request, options));
      }
      /**
       * Delete File
       *
       * @remarks
       * Delete a file.
       */
      async delete(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, filesDelete_js_1.filesDelete)(this, request, options));
      }
      /**
       * Download File
       *
       * @remarks
       * Download a file
       */
      async download(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, filesDownload_js_1.filesDownload)(this, request, options));
      }
      /**
       * Get Signed Url
       */
      async getSignedUrl(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, filesGetSignedUrl_js_1.filesGetSignedUrl)(this, request, options));
      }
    };
    exports.Files = Files;
  }
});

// node_modules/@mistralai/mistralai/funcs/fimComplete.js
var require_fimComplete = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/fimComplete.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fimComplete = fimComplete;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    var async_js_1 = require_async();
    function fimComplete(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.FIMCompletionRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/fim/completions")();
      const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "fim_completion_v1_fim_completions_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.FIMCompletionResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/fimStream.js
var require_fimStream = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/fimStream.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fimStream = fimStream;
    var z = __importStar(require_lib());
    var encodings_js_1 = require_encodings();
    var event_streams_js_1 = require_event_streams();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    var async_js_1 = require_async();
    function fimStream(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.FIMCompletionStreamRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/fim/completions#stream")();
      const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "text/event-stream"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "stream_fim",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.sse(200, z.instanceof(ReadableStream).transform((stream) => {
        return new event_streams_js_1.EventStream({
          stream,
          decoder(rawEvent) {
            const schema = components.CompletionEvent$inboundSchema;
            return schema.parse(rawEvent);
          }
        });
      }), { sseSentinel: "[DONE]" }), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/fim.js
var require_fim = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/fim.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Fim = void 0;
    var fimComplete_js_1 = require_fimComplete();
    var fimStream_js_1 = require_fimStream();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var Fim = class extends sdks_js_1.ClientSDK {
      /**
       * Fim Completion
       *
       * @remarks
       * FIM completion.
       */
      async complete(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, fimComplete_js_1.fimComplete)(this, request, options));
      }
      /**
       * Stream fim completion
       *
       * @remarks
       * Mistral AI provides the ability to stream responses back to a client in order to allow partial results for certain requests. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
       */
      async stream(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, fimStream_js_1.fimStream)(this, request, options));
      }
    };
    exports.Fim = Fim;
  }
});

// node_modules/@mistralai/mistralai/funcs/fineTuningJobsCancel.js
var require_fineTuningJobsCancel = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/fineTuningJobsCancel.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fineTuningJobsCancel = fineTuningJobsCancel;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function fineTuningJobsCancel(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesFineTuningCancelFineTuningJobRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        job_id: (0, encodings_js_1.encodeSimple)("job_id", payload.job_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/jobs/{job_id}/cancel")(pathParams);
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "jobs_api_routes_fine_tuning_cancel_fine_tuning_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.DetailedJobOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/fineTuningJobsCreate.js
var require_fineTuningJobsCreate = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/fineTuningJobsCreate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fineTuningJobsCreate = fineTuningJobsCreate;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function fineTuningJobsCreate(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.JobIn$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/jobs")();
      const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "jobs_api_routes_fine_tuning_create_fine_tuning_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, operations.JobsApiRoutesFineTuningCreateFineTuningJobResponse$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/fineTuningJobsGet.js
var require_fineTuningJobsGet = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/fineTuningJobsGet.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fineTuningJobsGet = fineTuningJobsGet;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function fineTuningJobsGet(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesFineTuningGetFineTuningJobRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        job_id: (0, encodings_js_1.encodeSimple)("job_id", payload.job_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/jobs/{job_id}")(pathParams);
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "jobs_api_routes_fine_tuning_get_fine_tuning_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.DetailedJobOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/fineTuningJobsList.js
var require_fineTuningJobsList = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/fineTuningJobsList.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fineTuningJobsList = fineTuningJobsList;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function fineTuningJobsList(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesFineTuningGetFineTuningJobsRequest$outboundSchema.optional().parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = null;
      const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/jobs")();
      const query = (0, encodings_js_1.encodeFormQuery)({
        "created_after": payload == null ? void 0 : payload.created_after,
        "created_by_me": payload == null ? void 0 : payload.created_by_me,
        "model": payload == null ? void 0 : payload.model,
        "page": payload == null ? void 0 : payload.page,
        "page_size": payload == null ? void 0 : payload.page_size,
        "status": payload == null ? void 0 : payload.status,
        "suffix": payload == null ? void 0 : payload.suffix,
        "wandb_name": payload == null ? void 0 : payload.wandb_name,
        "wandb_project": payload == null ? void 0 : payload.wandb_project
      });
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "jobs_api_routes_fine_tuning_get_fine_tuning_jobs",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        query,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.JobsOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/fineTuningJobsStart.js
var require_fineTuningJobsStart = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/fineTuningJobsStart.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fineTuningJobsStart = fineTuningJobsStart;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function fineTuningJobsStart(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesFineTuningStartFineTuningJobRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        job_id: (0, encodings_js_1.encodeSimple)("job_id", payload.job_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/jobs/{job_id}/start")(pathParams);
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "jobs_api_routes_fine_tuning_start_fine_tuning_job",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.DetailedJobOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/jobs.js
var require_jobs = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/jobs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Jobs = void 0;
    var fineTuningJobsCancel_js_1 = require_fineTuningJobsCancel();
    var fineTuningJobsCreate_js_1 = require_fineTuningJobsCreate();
    var fineTuningJobsGet_js_1 = require_fineTuningJobsGet();
    var fineTuningJobsList_js_1 = require_fineTuningJobsList();
    var fineTuningJobsStart_js_1 = require_fineTuningJobsStart();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var Jobs = class extends sdks_js_1.ClientSDK {
      /**
       * Get Fine Tuning Jobs
       *
       * @remarks
       * Get a list of fine-tuning jobs for your organization and user.
       */
      async list(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, fineTuningJobsList_js_1.fineTuningJobsList)(this, request, options));
      }
      /**
       * Create Fine Tuning Job
       *
       * @remarks
       * Create a new fine-tuning job, it will be queued for processing.
       */
      async create(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, fineTuningJobsCreate_js_1.fineTuningJobsCreate)(this, request, options));
      }
      /**
       * Get Fine Tuning Job
       *
       * @remarks
       * Get a fine-tuned job details by its UUID.
       */
      async get(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, fineTuningJobsGet_js_1.fineTuningJobsGet)(this, request, options));
      }
      /**
       * Cancel Fine Tuning Job
       *
       * @remarks
       * Request the cancellation of a fine tuning job.
       */
      async cancel(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, fineTuningJobsCancel_js_1.fineTuningJobsCancel)(this, request, options));
      }
      /**
       * Start Fine Tuning Job
       *
       * @remarks
       * Request the start of a validated fine tuning job.
       */
      async start(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, fineTuningJobsStart_js_1.fineTuningJobsStart)(this, request, options));
      }
    };
    exports.Jobs = Jobs;
  }
});

// node_modules/@mistralai/mistralai/sdk/finetuning.js
var require_finetuning = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/finetuning.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FineTuning = void 0;
    var sdks_js_1 = require_sdks();
    var jobs_js_1 = require_jobs();
    var FineTuning = class extends sdks_js_1.ClientSDK {
      get jobs() {
        var _a;
        return (_a = this._jobs) != null ? _a : this._jobs = new jobs_js_1.Jobs(this._options);
      }
    };
    exports.FineTuning = FineTuning;
  }
});

// node_modules/@mistralai/mistralai/funcs/modelsArchive.js
var require_modelsArchive = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/modelsArchive.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.modelsArchive = modelsArchive;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function modelsArchive(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesFineTuningArchiveFineTunedModelRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        model_id: (0, encodings_js_1.encodeSimple)("model_id", payload.model_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/models/{model_id}/archive")(pathParams);
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "jobs_api_routes_fine_tuning_archive_fine_tuned_model",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.ArchiveFTModelOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/modelsDelete.js
var require_modelsDelete = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/modelsDelete.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.modelsDelete = modelsDelete;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function modelsDelete(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.DeleteModelV1ModelsModelIdDeleteRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        model_id: (0, encodings_js_1.encodeSimple)("model_id", payload.model_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/models/{model_id}")(pathParams);
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "delete_model_v1_models__model_id__delete",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "DELETE",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.DeleteModelOut$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/modelsList.js
var require_modelsList = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/modelsList.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.modelsList = modelsList;
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    var async_js_1 = require_async();
    function modelsList(client, options) {
      return new async_js_1.APIPromise($do(client, options));
    }
    async function $do(client, options) {
      var _a, _b;
      const path = (0, url_js_1.pathToFunc)("/v1/models")();
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "list_models_v1_models_get",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.ModelList$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/modelsRetrieve.js
var require_modelsRetrieve = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/modelsRetrieve.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.modelsRetrieve = modelsRetrieve;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var errors = __importStar(require_errors2());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function modelsRetrieve(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.RetrieveModelV1ModelsModelIdGetRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        model_id: (0, encodings_js_1.encodeSimple)("model_id", payload.model_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/models/{model_id}")(pathParams);
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "retrieve_model_v1_models__model_id__get",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, operations.RetrieveModelV1ModelsModelIdGetResponseRetrieveModelV1ModelsModelIdGet$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/modelsUnarchive.js
var require_modelsUnarchive = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/modelsUnarchive.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.modelsUnarchive = modelsUnarchive;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function modelsUnarchive(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesFineTuningUnarchiveFineTunedModelRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = null;
      const pathParams = {
        model_id: (0, encodings_js_1.encodeSimple)("model_id", payload.model_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/models/{model_id}/archive")(pathParams);
      const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "jobs_api_routes_fine_tuning_unarchive_fine_tuned_model",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "DELETE",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.UnarchiveFTModelOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/funcs/modelsUpdate.js
var require_modelsUpdate = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/modelsUpdate.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.modelsUpdate = modelsUpdate;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var operations = __importStar(require_operations());
    var async_js_1 = require_async();
    function modelsUpdate(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.JobsApiRoutesFineTuningUpdateFineTunedModelRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload.UpdateFTModelIn, { explode: true });
      const pathParams = {
        model_id: (0, encodings_js_1.encodeSimple)("model_id", payload.model_id, {
          explode: false,
          charEncoding: "percent"
        })
      };
      const path = (0, url_js_1.pathToFunc)("/v1/fine_tuning/models/{model_id}")(pathParams);
      const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "jobs_api_routes_fine_tuning_update_fine_tuned_model",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "PATCH",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const [result] = await M.match(M.json(200, components.FTModelOut$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response);
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/models.js
var require_models = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/models.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Models = void 0;
    var modelsArchive_js_1 = require_modelsArchive();
    var modelsDelete_js_1 = require_modelsDelete();
    var modelsList_js_1 = require_modelsList();
    var modelsRetrieve_js_1 = require_modelsRetrieve();
    var modelsUnarchive_js_1 = require_modelsUnarchive();
    var modelsUpdate_js_1 = require_modelsUpdate();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var Models = class extends sdks_js_1.ClientSDK {
      /**
       * List Models
       *
       * @remarks
       * List all models available to the user.
       */
      async list(options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsList_js_1.modelsList)(this, options));
      }
      /**
       * Retrieve Model
       *
       * @remarks
       * Retrieve a model information.
       */
      async retrieve(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsRetrieve_js_1.modelsRetrieve)(this, request, options));
      }
      /**
       * Delete Model
       *
       * @remarks
       * Delete a fine-tuned model.
       */
      async delete(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsDelete_js_1.modelsDelete)(this, request, options));
      }
      /**
       * Update Fine Tuned Model
       *
       * @remarks
       * Update a model name or description.
       */
      async update(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsUpdate_js_1.modelsUpdate)(this, request, options));
      }
      /**
       * Archive Fine Tuned Model
       *
       * @remarks
       * Archive a fine-tuned model.
       */
      async archive(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsArchive_js_1.modelsArchive)(this, request, options));
      }
      /**
       * Unarchive Fine Tuned Model
       *
       * @remarks
       * Un-archive a fine-tuned model.
       */
      async unarchive(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, modelsUnarchive_js_1.modelsUnarchive)(this, request, options));
      }
    };
    exports.Models = Models;
  }
});

// node_modules/@mistralai/mistralai/funcs/ocrProcess.js
var require_ocrProcess = __commonJS({
  "node_modules/@mistralai/mistralai/funcs/ocrProcess.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ocrProcess = ocrProcess;
    var encodings_js_1 = require_encodings();
    var M = __importStar(require_matchers());
    var primitives_js_1 = require_primitives();
    var schemas_js_1 = require_schemas();
    var security_js_1 = require_security();
    var url_js_1 = require_url();
    var components = __importStar(require_components());
    var errors = __importStar(require_errors2());
    var async_js_1 = require_async();
    function ocrProcess(client, request, options) {
      return new async_js_1.APIPromise($do(client, request, options));
    }
    async function $do(client, request, options) {
      var _a, _b;
      const parsed = (0, schemas_js_1.safeParse)(request, (value) => components.OCRRequest$outboundSchema.parse(value), "Input validation failed");
      if (!parsed.ok) {
        return [parsed, { status: "invalid" }];
      }
      const payload = parsed.value;
      const body = (0, encodings_js_1.encodeJSON)("body", payload, { explode: true });
      const path = (0, url_js_1.pathToFunc)("/v1/ocr")();
      const headers = new Headers((0, primitives_js_1.compactMap)({
        "Content-Type": "application/json",
        Accept: "application/json"
      }));
      const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKey);
      const securityInput = secConfig == null ? {} : { apiKey: secConfig };
      const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
      const context = {
        baseURL: (_b = (_a = options == null ? void 0 : options.serverURL) != null ? _a : client._baseURL) != null ? _b : "",
        operationID: "ocr_v1_ocr_post",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKey,
        retryConfig: (options == null ? void 0 : options.retries) || client._options.retryConfig || { strategy: "none" },
        retryCodes: (options == null ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"]
      };
      const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "POST",
        baseURL: options == null ? void 0 : options.serverURL,
        path,
        headers,
        body,
        timeoutMs: (options == null ? void 0 : options.timeoutMs) || client._options.timeoutMs || -1
      }, options);
      if (!requestRes.ok) {
        return [requestRes, { status: "invalid" }];
      }
      const req = requestRes.value;
      const doResult = await client._do(req, {
        context,
        errorCodes: ["422", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes
      });
      if (!doResult.ok) {
        return [doResult, { status: "request-error", request: req }];
      }
      const response = doResult.value;
      const responseFields = {
        HttpMeta: { Response: response, Request: req }
      };
      const [result] = await M.match(M.json(200, components.OCRResponse$inboundSchema), M.jsonErr(422, errors.HTTPValidationError$inboundSchema), M.fail("4XX"), M.fail("5XX"))(response, { extraFields: responseFields });
      if (!result.ok) {
        return [result, { status: "complete", request: req, response }];
      }
      return [result, { status: "complete", request: req, response }];
    }
  }
});

// node_modules/@mistralai/mistralai/sdk/ocr.js
var require_ocr = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/ocr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Ocr = void 0;
    var ocrProcess_js_1 = require_ocrProcess();
    var sdks_js_1 = require_sdks();
    var fp_js_1 = require_fp();
    var Ocr = class extends sdks_js_1.ClientSDK {
      /**
       * OCR
       */
      async process(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, ocrProcess_js_1.ocrProcess)(this, request, options));
      }
    };
    exports.Ocr = Ocr;
  }
});

// node_modules/@mistralai/mistralai/sdk/sdk.js
var require_sdk = __commonJS({
  "node_modules/@mistralai/mistralai/sdk/sdk.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Mistral = void 0;
    var sdks_js_1 = require_sdks();
    var agents_js_1 = require_agents();
    var batch_js_1 = require_batch();
    var chat_js_1 = require_chat();
    var classifiers_js_1 = require_classifiers();
    var embeddings_js_1 = require_embeddings();
    var files_js_1 = require_files2();
    var fim_js_1 = require_fim();
    var finetuning_js_1 = require_finetuning();
    var models_js_1 = require_models();
    var ocr_js_1 = require_ocr();
    var Mistral2 = class extends sdks_js_1.ClientSDK {
      get models() {
        var _a;
        return (_a = this._models) != null ? _a : this._models = new models_js_1.Models(this._options);
      }
      get files() {
        var _a;
        return (_a = this._files) != null ? _a : this._files = new files_js_1.Files(this._options);
      }
      get fineTuning() {
        var _a;
        return (_a = this._fineTuning) != null ? _a : this._fineTuning = new finetuning_js_1.FineTuning(this._options);
      }
      get batch() {
        var _a;
        return (_a = this._batch) != null ? _a : this._batch = new batch_js_1.Batch(this._options);
      }
      get chat() {
        var _a;
        return (_a = this._chat) != null ? _a : this._chat = new chat_js_1.Chat(this._options);
      }
      get fim() {
        var _a;
        return (_a = this._fim) != null ? _a : this._fim = new fim_js_1.Fim(this._options);
      }
      get agents() {
        var _a;
        return (_a = this._agents) != null ? _a : this._agents = new agents_js_1.Agents(this._options);
      }
      get embeddings() {
        var _a;
        return (_a = this._embeddings) != null ? _a : this._embeddings = new embeddings_js_1.Embeddings(this._options);
      }
      get classifiers() {
        var _a;
        return (_a = this._classifiers) != null ? _a : this._classifiers = new classifiers_js_1.Classifiers(this._options);
      }
      get ocr() {
        var _a;
        return (_a = this._ocr) != null ? _a : this._ocr = new ocr_js_1.Ocr(this._options);
      }
    };
    exports.Mistral = Mistral2;
  }
});

// node_modules/@mistralai/mistralai/index.js
var require_mistralai = __commonJS({
  "node_modules/@mistralai/mistralai/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.files = void 0;
    __exportStar(require_config(), exports);
    exports.files = __importStar(require_files());
    __exportStar(require_sdk(), exports);
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Marker
});
module.exports = __toCommonJS(main_exports);
var import_obsidian11 = require("obsidian");

// src/settings.ts
var import_obsidian2 = require("obsidian");

// src/utils/converterSettingsUtils.ts
var import_obsidian = require("obsidian");
function createConverterSetting(containerEl, app, definition, settings, saveSettings) {
  const setting = new import_obsidian.Setting(containerEl).setName(definition.name).setDesc(definition.description);
  switch (definition.type) {
    case "text":
      setting.addText((text) => {
        var _a;
        text.setPlaceholder(definition.placeholder || "").setValue(
          ((_a = settings[definition.id]) == null ? void 0 : _a.toString()) || ""
        ).onChange(async (value) => {
          settings[definition.id] = value;
          if (definition.onChange) {
            await definition.onChange(value, settings);
          }
          await saveSettings();
        });
      });
      break;
    case "toggle":
      setting.addToggle((toggle) => {
        toggle.setValue(!!settings[definition.id]).onChange(async (value) => {
          settings[definition.id] = value;
          if (definition.onChange) {
            await definition.onChange(value, settings);
          }
          await saveSettings();
        });
      });
      break;
    case "dropdown":
      setting.addDropdown((dropdown) => {
        var _a;
        if (definition.options) {
          definition.options.forEach((option) => {
            dropdown.addOption(option.value, option.label);
          });
        }
        dropdown.setValue(
          ((_a = settings[definition.id]) == null ? void 0 : _a.toString()) || definition.defaultValue
        ).onChange(async (value) => {
          settings[definition.id] = value;
          if (definition.onChange) {
            await definition.onChange(value, settings);
          }
          await saveSettings();
        });
      });
      break;
  }
  if (definition.buttonText && definition.buttonAction) {
    setting.addButton((button) => {
      button.setButtonText(definition.buttonText || "").onClick(() => {
        if (definition.buttonAction) {
          definition.buttonAction(app, settings);
        }
      });
    });
  }
  return setting;
}
function renderConverterSettings(containerEl, app, converter, settings, saveSettings) {
  const settingDefinitions = converter.getConverterSettings();
  settingDefinitions.forEach((definition) => {
    createConverterSetting(
      containerEl,
      app,
      definition,
      settings,
      saveSettings
    );
  });
}

// src/settings.ts
var DEFAULT_SETTINGS = {
  markerEndpoint: "localhost:8000",
  pythonEndpoint: "localhost:8001",
  createFolder: true,
  deleteOriginal: false,
  extractContent: "all",
  writeMetadata: false,
  movePDFtoFolder: false,
  createAssetSubfolder: true,
  apiEndpoint: "selfhosted",
  apiKey: "",
  datalabApiKey: "",
  mistralaiApiKey: "",
  langs: "en",
  forceOCR: false,
  paginate: false,
  // Default values for new parameters
  maxPages: void 0,
  stripExistingOCR: false,
  useLLM: false,
  skipCache: false,
  imageLimit: 0,
  imageMinSize: 0
  // Default to 0 (no minimum size)
};
var MarkerSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("API endpoint").setDesc("Select the API endpoint to use").addDropdown(
      (dropdown) => dropdown.addOption("datalab", "Datalab").addOption("selfhosted", "Selfhosted").addOption("python-api", "Python API").addOption("mistralai", "MistralAI").setValue(this.plugin.settings.apiEndpoint).onChange(async (value) => {
        this.plugin.settings.apiEndpoint = value;
        await this.plugin.saveSettings();
        this.display();
      })
    );
    containerEl.createEl("h3", { text: "Converter Settings" });
    if (this.plugin.converter) {
      renderConverterSettings(
        containerEl,
        this.app,
        this.plugin.converter,
        this.plugin.settings,
        async () => await this.plugin.saveSettings()
      );
    }
    containerEl.createEl("h3", { text: "General Settings" });
    const movePDFToggle = new import_obsidian2.Setting(containerEl).setName("Move PDF to folder").setDesc("Move the PDF to the folder after conversion").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.movePDFtoFolder).onChange(async (value) => {
        this.plugin.settings.movePDFtoFolder = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Create asset subfolder").setDesc("Create an asset subfolder for images").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.createAssetSubfolder).onChange(async (value) => {
        this.plugin.settings.createAssetSubfolder = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Extract content").setDesc("Select the content to extract from the PDF").addDropdown(
      (dropdown) => dropdown.addOption("all", "Extract everything").addOption("text", "Text Only").addOption("images", "Images Only").setValue(this.plugin.settings.extractContent).onChange(async (value) => {
        this.plugin.settings.extractContent = value;
        await this.plugin.saveSettings();
        updateWriteMetadataSetting(value);
      })
    );
    const writeMetadataToggle = new import_obsidian2.Setting(containerEl).setName("Write metadata").setDesc("Write metadata as frontmatter in the markdown file").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.writeMetadata).onChange(async (value) => {
        this.plugin.settings.writeMetadata = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Delete original PDF").setDesc("Delete the original PDF after conversion.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.deleteOriginal).onChange(async (value) => {
        this.plugin.settings.deleteOriginal = value;
        await this.plugin.saveSettings();
      })
    );
    const updateMovePDFSetting = (createFolderEnabled) => {
      this.plugin.settings.movePDFtoFolder = this.plugin.settings.movePDFtoFolder && createFolderEnabled;
      movePDFToggle.settingEl.toggle(createFolderEnabled);
    };
    const updateWriteMetadataSetting = (extractContent) => {
      const canWriteMetadata = extractContent === "all" || extractContent === "text";
      this.plugin.settings.writeMetadata = this.plugin.settings.writeMetadata && canWriteMetadata;
      writeMetadataToggle.settingEl.toggle(canWriteMetadata);
    };
    updateMovePDFSetting(this.plugin.settings.createFolder);
    updateWriteMetadataSetting(this.plugin.settings.extractContent);
  }
};

// src/converters/datalabConverter.ts
var import_obsidian7 = require("obsidian");

// src/converter.ts
var import_obsidian6 = require("obsidian");

// src/utils/fileUtils.ts
var import_obsidian4 = require("obsidian");

// src/modals.ts
var import_obsidian3 = require("obsidian");
var MarkerOkayCancelDialog = class extends import_obsidian3.Modal {
  constructor(app, title, message, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
    this.title = title;
    this.message = message;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.title });
    contentEl.createEl("p", {
      text: this.message
    });
    const buttonContainer = contentEl.createEl("div", {
      attr: { class: "modal-button-container" }
    });
    const yesButton = buttonContainer.createEl("button", {
      text: "Okay",
      attr: { class: "mod-cta" }
    });
    yesButton.addEventListener("click", () => {
      this.result = true;
      this.onSubmit(true);
      this.close();
    });
    const noButton = buttonContainer.createEl("button", {
      text: "Cancel"
    });
    noButton.addEventListener("click", () => {
      this.result = false;
      this.onSubmit(false);
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var MarkerSupportedLangsDialog = class extends import_obsidian3.Modal {
  constructor(app) {
    super(app);
    this.title = "Supported Languages";
    this.message = "To see the supported languages, please visit the following link:";
    this.link = "https://github.com/VikParuchuri/surya/blob/master/surya/languages.py";
    this.linkText = "Supported Languages (VikParuchuri/surya)";
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.title });
    contentEl.createEl("p", {
      text: this.message
    });
    contentEl.createEl("a", {
      text: this.linkText,
      attr: { href: this.link }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/utils/fileUtils.ts
async function getConversionFolderPath(file, existingPath) {
  const folderPath = existingPath || calculateFolderPath(file);
  return folderPath;
}
function calculateFolderPath(file) {
  var _a;
  const folderName = (_a = file.path.replace(/\.pdf(?=[^.]*$)/, "").split("/").pop()) == null ? void 0 : _a.replace(/\./g, "-");
  if (!folderName) {
    return "";
  }
  const folderPath = file.path.replace(/\.pdf(?=[^.]*$)/, "/").split("/").slice(0, -1).join("/") + "/";
  return folderPath;
}
async function createConversionFolder(app, folderPath) {
  const folder = app.vault.getAbstractFileByPath(folderPath);
  if (!(folder instanceof import_obsidian4.TFolder)) {
    await app.vault.createFolder(folderPath);
  }
  return folderPath;
}
async function checkForExistingFiles(app, folderPath) {
  const existingFiles = app.vault.getFiles().filter((file) => file.path.startsWith(folderPath));
  if (existingFiles.length > 0) {
    return new Promise((resolve) => {
      new MarkerOkayCancelDialog(
        app,
        "Existing files found",
        "Some files already exist in the target folder. Do you want to overwrite them / integrate the new files into this folder?",
        resolve
      ).open();
    });
  }
  return true;
}
async function createImageFiles(app, settings, images, folderPath, originalFile) {
  const totalImages = Object.keys(images).length;
  let processedImages = 0;
  for (const [imageName, imageBase64] of Object.entries(images)) {
    try {
      let newImageName = imageName;
      if (settings.createAssetSubfolder) {
        newImageName = originalFile.name.replace(/\.pdf(?=[^.]*$)/, "_") + imageName;
      }
      const imageArrayBuffer = (0, import_obsidian4.base64ToArrayBuffer)(imageBase64);
      if (app.vault.getAbstractFileByPath(folderPath + newImageName) instanceof import_obsidian4.TFile) {
        const file = app.vault.getAbstractFileByPath(folderPath + newImageName);
        if (!(file instanceof import_obsidian4.TFile)) {
          console.error(
            `Invalid file reference for image: ${newImageName}`,
            file
          );
          continue;
        }
        await app.vault.modifyBinary(file, imageArrayBuffer);
      } else {
        await app.vault.createBinary(
          folderPath + newImageName,
          imageArrayBuffer
        );
      }
      processedImages++;
    } catch (error) {
      console.error(
        `Failed to process image ${imageName}:`,
        error.message,
        error.stack
      );
    }
  }
  if (processedImages === totalImages) {
    new import_obsidian4.Notice(`${totalImages} image files created successfully`);
  } else {
    new import_obsidian4.Notice(
      `${processedImages} of ${totalImages} image files created (some failed)`
    );
  }
}
async function createMarkdownFile(app, settings, markdown, folderPath, originalFile) {
  const fileName = originalFile.name.split(".")[0] + ".md";
  const filePath = folderPath + fileName;
  let file;
  if (settings.createAssetSubfolder) {
    const cleanImagePath = originalFile.name.replace(/\.pdf(?=[^.]*$)/, "_").replace(/\s+/g, "%20");
    markdown = markdown.replace(
      /!\[.*\]\((.*)\)/g,
      `![$1](assets/${cleanImagePath}$1)`
    );
  }
  if (settings.extractContent === "text") {
    markdown = markdown.replace(/!\[.*\]\(.*\)/g, "");
  }
  const existingFile = app.vault.getAbstractFileByPath(filePath);
  if (existingFile instanceof import_obsidian4.TFile) {
    file = existingFile;
    await app.vault.modify(file, markdown);
  } else {
    file = await app.vault.create(filePath, markdown);
  }
  new import_obsidian4.Notice(`Markdown file created: ${fileName}`);
  app.workspace.openLinkText(file.path, "", true);
}
async function addMetadataToMarkdownFile(app, metadata, folderPath, originalFile) {
  const fileName = originalFile.name.split(".")[0] + ".md";
  const filePath = folderPath + fileName;
  const file = app.vault.getAbstractFileByPath(filePath);
  if (file instanceof import_obsidian4.TFile) {
    const frontmatter = generateFrontmatter(metadata);
    await app.fileManager.processFrontMatter(file, (fm) => {
      return frontmatter + fm;
    }).catch((error) => {
      console.error("Error adding metadata to markdown file:", error);
    });
  }
}
function generateFrontmatter(metadata) {
  let frontmatter = "---\n";
  const frontmatterKeys = ["languages", "filetype", "ocr_stats", "block_stats"];
  for (const [key, value] of Object.entries(metadata)) {
    if (frontmatterKeys.includes(key)) {
      if (key === "ocr_stats" || key === "block_stats") {
        for (const [k, v] of Object.entries(value)) {
          frontmatter += `${k}: ${k === "equations" ? JSON.stringify(v).slice(1, -1).replace(/"/g, "") : v}
`;
        }
      } else {
        frontmatter += `${key}: ${value}
`;
      }
    }
  }
  frontmatter += "---\n";
  return frontmatter;
}
async function deleteOriginalFile(app, file) {
  try {
    await app.fileManager.trashFile(file);
    new import_obsidian4.Notice("Original PDF file deleted");
  } catch (error) {
    console.error("Error deleting original file:", error);
  }
}

// src/utils/settingsUtils.ts
var import_obsidian5 = require("obsidian");
function checkSettings(settings) {
  if (settings.extractContent !== "text" && settings.extractContent !== "images" && settings.extractContent !== "all") {
    new import_obsidian5.Notice(
      "Err: Invalid content extraction setting for Marker, check settings"
    );
    return false;
  }
  return true;
}

// src/converter.ts
var BaseConverter = class {
  async prepareConversion(settings, file) {
    if (!checkSettings(settings)) {
      return null;
    }
    const connectionResult = await this.testConnection(settings, true);
    if (!connectionResult) {
      return null;
    }
    return getConversionFolderPath(file);
  }
  async processConversionResult(app, settings, data, folderPath, originalFile) {
    try {
      if (!data || !data.success) {
        new import_obsidian6.Notice(`Conversion failed: ${(data == null ? void 0 : data.error) || "Unknown error"}`);
        return;
      }
      await createConversionFolder(app, folderPath);
      if (settings.extractContent !== "images" && data.markdown) {
        await createMarkdownFile(
          app,
          settings,
          data.markdown,
          folderPath,
          originalFile
        );
      }
      if (settings.extractContent !== "text" && data.images && Object.keys(data.images).length > 0) {
        let imageFolderPath = folderPath;
        if (settings.createAssetSubfolder) {
          if (!(app.vault.getAbstractFileByPath(folderPath + "assets") instanceof import_obsidian6.TFolder)) {
            await app.vault.createFolder(folderPath + "assets/");
          }
          imageFolderPath += "assets/";
        }
        await createImageFiles(
          app,
          settings,
          data.images,
          imageFolderPath,
          originalFile
        );
      }
      if (settings.writeMetadata && data.metadata) {
        await addMetadataToMarkdownFile(
          app,
          data.metadata,
          folderPath,
          originalFile
        );
      }
      if (settings.movePDFtoFolder) {
        try {
          const newFilePath = folderPath + originalFile.name;
          await app.vault.rename(originalFile, newFilePath);
        } catch (error) {
          console.error(
            `Failed to move original file to folder: ${error.message}`,
            error
          );
          new import_obsidian6.Notice("Error: Failed to move original file to target folder");
        }
      }
      if (settings.deleteOriginal) {
        await deleteOriginalFile(app, originalFile);
      }
    } catch (error) {
      console.error(
        "Failed to process conversion result:",
        error.message,
        error.stack
      );
      new import_obsidian6.Notice(
        `Error: Failed to process conversion result - ${error.message || "Unknown error"}`
      );
    }
  }
};

// src/converters/datalabConverter.ts
var DatalabConverter = class extends BaseConverter {
  async convert(app, settings, file) {
    const folderPath = await this.prepareConversion(settings, file);
    if (!folderPath)
      return false;
    if ((settings.extractContent === "images" || settings.extractContent === "all") && !await checkForExistingFiles(app, folderPath)) {
      return true;
    }
    if (!settings.datalabApiKey) {
      new import_obsidian7.Notice("Error: Datalab API key is not configured");
      console.error("Missing Datalab API key in settings");
      return false;
    }
    new import_obsidian7.Notice(
      "Converting file to Markdown, this can take a few seconds...",
      1e4
    );
    try {
      const conversionResponse = await this.submitConversionRequest(
        app,
        settings,
        file
      );
      if (!conversionResponse.success)
        return false;
      if (conversionResponse.requestCheckUrl) {
        return await this.handleConversionResponse(
          app,
          settings,
          folderPath,
          file,
          conversionResponse.requestCheckUrl
        );
      } else {
        new import_obsidian7.Notice("Error: Missing request check URL in conversion response");
        return false;
      }
    } catch (error) {
      console.error("Datalab conversion error:", error.message, error.stack);
      new import_obsidian7.Notice(
        `Datalab conversion failed: ${error.message || "Network or server error"}`
      );
      return false;
    }
  }
  /**
   * Submits the initial conversion request to the Datalab API
   */
  async submitConversionRequest(app, settings, file) {
    var _a;
    try {
      let fileContent;
      try {
        fileContent = await app.vault.readBinary(file);
      } catch (readError) {
        console.error(
          `Failed to read file content: ${readError.message}`,
          readError
        );
        new import_obsidian7.Notice(
          `Error reading file: ${readError.message || "Access denied"}`
        );
        return { success: false };
      }
      const formData = await this.createMultipartFormData(
        file,
        fileContent,
        settings
      );
      const requestParams = {
        url: `https://www.datalab.to/api/v1/marker`,
        method: "POST",
        body: formData.body,
        headers: {
          "Content-Type": `multipart/form-data; boundary=${formData.boundary}`,
          "X-Api-Key": (_a = settings.datalabApiKey) != null ? _a : ""
        },
        throw: false
      };
      const response = await (0, import_obsidian7.requestUrl)(requestParams);
      let data;
      try {
        data = response.json;
      } catch (jsonError) {
        console.error("Failed to parse Datalab API response", jsonError);
        new import_obsidian7.Notice("Error: Invalid response from Datalab API");
        return { success: false };
      }
      if (response.status === 200) {
        if (!data.request_check_url) {
          console.error("Missing request_check_url in Datalab response:", data);
          new import_obsidian7.Notice("Error: Invalid response from Datalab API");
          return { success: false };
        }
        return { success: true, requestCheckUrl: data.request_check_url };
      } else {
        const errorDetail = data.error || `HTTP ${response.status}`;
        console.error("Datalab API error:", errorDetail, data);
        new import_obsidian7.Notice(`Datalab conversion failed: ${errorDetail}`);
        return { success: false };
      }
    } catch (error) {
      console.error("Error submitting conversion request:", error);
      new import_obsidian7.Notice(`Submission error: ${error.message || "Unknown error"}`);
      return { success: false };
    }
  }
  /**
   * Handles the conversion response and processes the result
   */
  async handleConversionResponse(app, settings, folderPath, file, requestCheckUrl) {
    try {
      const apiResponse = await this.pollForConversionResult(
        settings,
        requestCheckUrl
      );
      const conversionResult = {
        success: apiResponse.status === "complete",
        error: apiResponse.error || (apiResponse.status !== "complete" ? "Conversion failed or timed out" : void 0)
      };
      if (conversionResult.success) {
        conversionResult.markdown = apiResponse.markdown || "";
        conversionResult.images = apiResponse.images || {};
        conversionResult.metadata = apiResponse.metadata || {};
      } else {
        console.error("Datalab conversion failed:", apiResponse);
        new import_obsidian7.Notice(
          `Datalab conversion failed: ${conversionResult.error || "Unknown error"}`
        );
        return false;
      }
      await this.processConversionResult(
        app,
        settings,
        conversionResult,
        folderPath,
        file
      );
      new import_obsidian7.Notice("Datalab conversion completed successfully");
      return true;
    } catch (pollError) {
      console.error(
        "Error during Datalab conversion polling:",
        pollError.message,
        pollError.stack
      );
      new import_obsidian7.Notice(
        `Datalab conversion failed: ${pollError.message || "Polling error"}`
      );
      return false;
    }
  }
  /**
   * Creates multipart form data for the API request
   */
  async createMultipartFormData(file, fileContent, settings) {
    var _a;
    const boundary = "----WebKitFormBoundary" + Math.random().toString(36).substring(2);
    const fields = [
      { name: "langs", value: (_a = settings.langs) != null ? _a : "en" },
      { name: "force_ocr", value: settings.forceOCR || false },
      { name: "paginate", value: settings.paginate || false },
      {
        name: "disable_image_extraction",
        value: settings.extractContent === "text"
      },
      { name: "output_format", value: "markdown" }
      // Always use markdown for this plugin
    ];
    if (settings.maxPages) {
      fields.push({ name: "max_pages", value: settings.maxPages });
    }
    if (settings.stripExistingOCR !== void 0) {
      fields.push({
        name: "strip_existing_ocr",
        value: settings.stripExistingOCR
      });
    }
    if (settings.useLLM !== void 0) {
      fields.push({ name: "use_llm", value: settings.useLLM });
    }
    if (settings.skipCache !== void 0) {
      fields.push({ name: "skip_cache", value: settings.skipCache });
    }
    return this.buildMultipartRequest(boundary, file, fileContent, fields);
  }
  /**
   * Builds the multipart request body
   */
  buildMultipartRequest(boundary, file, fileContent, fields) {
    const parts = [];
    const contentType = this.getContentTypeForFile(file);
    parts.push(
      `--${boundary}\r
Content-Disposition: form-data; name="file"; filename="${file.name}"\r
Content-Type: ${contentType}\r
\r
`
    );
    parts.push(new Uint8Array(fileContent));
    parts.push("\r\n");
    for (const field of fields) {
      if (field.value !== null && field.value !== void 0) {
        parts.push(
          `--${boundary}\r
Content-Disposition: form-data; name="${field.name}"\r
\r
${field.value}\r
`
        );
      }
    }
    parts.push(`--${boundary}--\r
`);
    return {
      body: this.combinePartsToArrayBuffer(parts),
      boundary
    };
  }
  /**
   * Determines the content type for a file based on its extension
   */
  getContentTypeForFile(file) {
    switch (file.extension) {
      case "pdf":
        return "application/pdf";
      case "docx":
      case "doc":
        return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
      case "pptx":
      case "ppt":
        return "application/vnd.openxmlformats-officedocument.presentationml.presentation";
      case "jpg":
      case "jpeg":
        return "image/jpeg";
      case "png":
        return "image/png";
      case "webp":
        return "image/webp";
      default:
        console.error(
          `Unrecognized file extension: ${file.extension}, using generic content type`
        );
        return "application/octet-stream";
    }
  }
  /**
   * Combines parts into a single ArrayBuffer
   */
  combinePartsToArrayBuffer(parts) {
    const bodyParts = parts.map(
      (part) => typeof part === "string" ? new TextEncoder().encode(part) : part
    );
    const bodyLength = bodyParts.reduce(
      (acc, part) => acc + part.byteLength,
      0
    );
    const body = new Uint8Array(bodyLength);
    let offset = 0;
    for (const part of bodyParts) {
      body.set(part, offset);
      offset += part.byteLength;
    }
    return body.buffer;
  }
  async testConnection(settings, silent) {
    if (!settings.datalabApiKey) {
      new import_obsidian7.Notice("Err: Datalab API key not set");
      return false;
    }
    try {
      const response = await (0, import_obsidian7.requestUrl)({
        url: "https://www.datalab.to/api/v1/user_health",
        method: "GET",
        headers: {
          "X-Api-Key": settings.datalabApiKey
        }
      });
      if (response.status !== 200) {
        new import_obsidian7.Notice(
          `Error connecting to Datalab Marker API: ${response.status}`
        );
        console.error(
          "Error connecting to Datalab Marker API:",
          response.status
        );
        return false;
      }
      const data = response.json;
      if (data.status === "ok") {
        if (!silent)
          new import_obsidian7.Notice("Connection successful!");
        return true;
      } else {
        new import_obsidian7.Notice("Error connecting to Datalab Marker API");
        console.error("Error connecting to Datalab Marker API:", data);
        return false;
      }
    } catch (error) {
      new import_obsidian7.Notice("Error connecting to Datalab Marker API");
      console.error("Error connecting to Datalab Marker API:", error);
      return false;
    }
  }
  async pollForConversionResult(settings, requestCheckUrl) {
    var _a, _b;
    try {
      let response = await (0, import_obsidian7.requestUrl)({
        url: requestCheckUrl,
        method: "GET",
        headers: {
          "X-Api-Key": (_a = settings.datalabApiKey) != null ? _a : ""
        },
        throw: false
      });
      let data;
      try {
        data = await response.json;
      } catch (jsonError) {
        console.error("Failed to parse polling response", jsonError);
        throw new Error("Invalid response format from Datalab API");
      }
      if (response.status >= 400) {
        console.error(
          `Polling error: HTTP ${response.status}`,
          (data == null ? void 0 : data.error) || "No error details"
        );
      }
      let maxRetries = 300;
      while (data.status !== "complete" && maxRetries > 0) {
        maxRetries--;
        await new Promise((resolve) => setTimeout(resolve, 2e3));
        try {
          response = await (0, import_obsidian7.requestUrl)({
            url: requestCheckUrl,
            method: "GET",
            headers: {
              "X-Api-Key": (_b = settings.datalabApiKey) != null ? _b : ""
            },
            throw: false
          });
          try {
            data = await response.json;
          } catch (jsonError) {
            console.error("Failed to parse polling response", jsonError);
            continue;
          }
          if (maxRetries % 10 === 0) {
            new import_obsidian7.Notice(`Converting... (${300 - maxRetries}/300)`);
          }
          if (response.status >= 400) {
            console.error(
              `Polling error: HTTP ${response.status}`,
              (data == null ? void 0 : data.error) || "No error details"
            );
          }
          if (data.error) {
            throw new Error(`API reported error: ${data.error}`);
          }
        } catch (requestError) {
          console.error("Request error during polling:", requestError);
          await new Promise((resolve) => setTimeout(resolve, 5e3));
        }
      }
      if (maxRetries <= 0) {
        console.error("Conversion timed out after maximum polling attempts");
        throw new Error("Conversion timed out. Please try again later.");
      }
      return data;
    } catch (error) {
      console.error(
        "Error during conversion polling:",
        error.message,
        error.stack
      );
      throw error;
    }
  }
  getConverterSettings() {
    return [
      {
        id: "datalabApiKey",
        name: "API Key",
        description: "Enter your Datalab API key",
        type: "text",
        placeholder: "API Key",
        defaultValue: "",
        buttonText: "Test connection",
        buttonAction: async (app, settings) => {
          await this.testConnection(settings, false);
        }
      },
      {
        id: "langs",
        name: "Languages",
        description: "The languages to use if OCR is needed, separated by commas",
        type: "text",
        placeholder: "en",
        defaultValue: "en",
        buttonText: "See supported languages",
        buttonAction: (app) => {
          new MarkerSupportedLangsDialog(app).open();
        }
      },
      {
        id: "forceOCR",
        name: "Force OCR",
        description: "Force OCR (Activate this when auto-detect often fails, make sure to set the correct languages)",
        type: "toggle",
        defaultValue: false
      },
      {
        id: "paginate",
        name: "Paginate",
        description: "Add horizontal rules between each page",
        type: "toggle",
        defaultValue: false
      },
      {
        id: "maxPages",
        name: "Maximum pages",
        description: "Limit the number of pages to convert (leave empty for all pages)",
        type: "text",
        placeholder: "All pages",
        defaultValue: void 0,
        onChange: async (value, settings) => {
          const numValue = value ? parseInt(value) : void 0;
          settings.maxPages = isNaN(numValue) ? void 0 : numValue;
        }
      },
      {
        id: "stripExistingOCR",
        name: "Strip existing OCR",
        description: "Remove existing OCR text and re-run OCR (ignored if Force OCR is enabled)",
        type: "toggle",
        defaultValue: false
      },
      {
        id: "useLLM",
        name: "Use LLM enhancement",
        description: "Beta: Use AI to enhance tables, forms, math, and layout detection (doubles cost)",
        type: "toggle",
        defaultValue: false
      },
      {
        id: "skipCache",
        name: "Skip cache",
        description: "Force re-conversion and skip using cached results",
        type: "toggle",
        defaultValue: false
      }
    ];
  }
};

// src/converters/markerApiDocker.ts
var import_obsidian8 = require("obsidian");
var MarkerApiDockerConverter = class extends BaseConverter {
  async convert(app, settings, file) {
    const folderPath = await this.prepareConversion(settings, file);
    if (!folderPath)
      return false;
    if ((settings.extractContent === "images" || settings.extractContent === "all") && !await checkForExistingFiles(app, folderPath)) {
      return true;
    }
    new import_obsidian8.Notice(
      "Converting PDF to Markdown, this can take a few seconds...",
      1e4
    );
    try {
      const pdfContent = await app.vault.readBinary(file);
      const response = await this.convertPDFContent(settings, pdfContent);
      const conversionResult = this.processApiResponse(response);
      if (!conversionResult.success) {
        new import_obsidian8.Notice(`Conversion failed: ${conversionResult.error}`);
        return false;
      }
      await this.processConversionResult(
        app,
        settings,
        conversionResult,
        folderPath,
        file
      );
      new import_obsidian8.Notice("PDF conversion completed successfully");
      return true;
    } catch (conversionError) {
      console.error(
        "Docker API conversion failed:",
        conversionError.message,
        conversionError.stack
      );
      new import_obsidian8.Notice(
        `PDF conversion failed: ${conversionError.message || "Server error"}`
      );
      return false;
    }
  }
  /**
   * Process the API response according to the OpenAPI spec
   */
  processApiResponse(response) {
    if (response.status === "Success" && response.result) {
      return {
        success: true,
        markdown: response.result.markdown || "",
        images: response.result.images || {},
        metadata: response.result.metadata || {}
      };
    }
    return {
      success: false,
      error: `Conversion failed with status: ${response.status || "Unknown"}`
    };
  }
  catch(fileError) {
    console.error(
      "Failed to read PDF file:",
      fileError.message,
      fileError.stack
    );
    new import_obsidian8.Notice(
      `Error reading PDF file: ${fileError.message || "File access error"}`
    );
    return false;
  }
  async testConnection(settings, silent) {
    if (!settings.markerEndpoint) {
      new import_obsidian8.Notice("Error: Docker API endpoint not configured");
      console.error("Missing Docker API endpoint configuration");
      return false;
    }
    try {
      const requestParams = {
        url: `http://${settings.markerEndpoint}/health`,
        method: "GET",
        throw: false
      };
      const response = await (0, import_obsidian8.requestUrl)(requestParams);
      if (response.status !== 200) {
        new import_obsidian8.Notice(`Docker API connection failed: HTTP ${response.status}`);
        console.error(
          `Docker API connection failed: HTTP ${response.status}`,
          response
        );
        return false;
      } else {
        if (!silent)
          new import_obsidian8.Notice("Connection successful!");
        return true;
      }
    } catch (error) {
      new import_obsidian8.Notice(
        `Docker API connection failed: ${error.message || "Network error"}`
      );
      console.error(`Docker API connection error:`, error.message, error.stack);
      return false;
    }
  }
  async convertPDFContent(settings, pdfContent) {
    try {
      return await this.attemptConversion(settings, pdfContent, "pdf_file");
    } catch (error) {
      if (error.message && error.message.includes("missing") && error.message.includes("document_file")) {
        try {
          return await this.attemptConversion(
            settings,
            pdfContent,
            "document_file"
          );
        } catch (retryError) {
          console.error(
            "Second PDF conversion attempt failed:",
            retryError.message
          );
          throw retryError;
        }
      } else {
        throw error;
      }
    }
  }
  async attemptConversion(settings, pdfContent, fieldName) {
    const boundary = "----WebKitFormBoundary" + Math.random().toString(36).substring(2);
    const parts = [];
    parts.push(
      `--${boundary}\r
Content-Disposition: form-data; name="${fieldName}"; filename="document.pdf"\r
Content-Type: application/pdf\r
\r
`
    );
    parts.push(new Uint8Array(pdfContent));
    parts.push("\r\n");
    parts.push(
      `--${boundary}\r
Content-Disposition: form-data; name="extract_images"\r
\r
${settings.extractContent !== "text" ? "true" : "false"}\r
`
    );
    parts.push(`--${boundary}--\r
`);
    const bodyParts = parts.map(
      (part) => typeof part === "string" ? new TextEncoder().encode(part) : part
    );
    const bodyLength = bodyParts.reduce(
      (acc, part) => acc + part.byteLength,
      0
    );
    const body = new Uint8Array(bodyLength);
    let offset = 0;
    for (const part of bodyParts) {
      body.set(part, offset);
      offset += part.byteLength;
    }
    const requestParams = {
      url: `http://${settings.markerEndpoint}/convert`,
      method: "POST",
      body: body.buffer,
      headers: {
        "Content-Type": `multipart/form-data; boundary=${boundary}`
      },
      throw: false
    };
    const response = await (0, import_obsidian8.requestUrl)(requestParams);
    if (response.status >= 400) {
      try {
        const errorData = response.json;
        const errorMessages = errorData.detail.map((err) => `${err.type} at ${err.loc.join(".")} - ${err.msg}`).join("; ");
        console.error(`Marker API validation error: ${errorMessages}`);
        throw new Error(`Validation error: ${errorMessages}`);
      } catch (parseError) {
        const errorMessage = response.text || `HTTP ${response.status}`;
        console.error(`Marker API error: ${errorMessage}`);
        throw new Error(`Server returned error: ${errorMessage}`);
      }
    }
    if (!response.json || Object.keys(response.json).length === 0) {
      console.error("Empty response received from Marker API");
      throw new Error("No data returned from Marker API");
    }
    return response.json;
  }
  getConverterSettings() {
    return [
      {
        id: "markerEndpoint",
        name: "Marker API endpoint",
        description: "The endpoint to use for the Marker API.",
        type: "text",
        placeholder: "localhost:8000",
        defaultValue: "localhost:8000",
        buttonText: "Test connection",
        buttonAction: async (app, settings) => {
          await this.testConnection(settings, false);
        }
      }
    ];
  }
};

// src/converters/markerPythonApi.ts
var import_obsidian9 = require("obsidian");
var PythonAPIConverter = class extends BaseConverter {
  async convert(app, settings, file) {
    var _a, _b, _c;
    const folderPath = await this.prepareConversion(settings, file);
    if (!folderPath)
      return false;
    new import_obsidian9.Notice("Converting file with Python API...", 1e4);
    try {
      const adapter = app.vault.adapter;
      let realFilePath = file.path;
      if (adapter instanceof import_obsidian9.FileSystemAdapter) {
        realFilePath = adapter.getFullPath(file.path);
      } else {
        console.warn(
          "Not using FileSystemAdapter - path may not be correctly resolved"
        );
      }
      const requestParams = {
        url: `http://${settings.pythonEndpoint}/marker`,
        method: "POST",
        throw: false,
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          filepath: realFilePath,
          page_range: "",
          // or parse from user if needed
          languages: (_a = settings.langs) != null ? _a : "en",
          force_ocr: (_b = settings.forceOCR) != null ? _b : false,
          paginate_output: (_c = settings.paginate) != null ? _c : false,
          output_format: "markdown"
        })
      };
      const response = await (0, import_obsidian9.requestUrl)(requestParams);
      if (response.status !== 200) {
        try {
          const errorData = JSON.parse(response.text);
          let errorMsg = `HTTP ${response.status}`;
          if (errorData.detail && errorData.detail.length > 0) {
            errorMsg = errorData.detail.map((err) => err.msg).join("; ");
          }
          console.error("Python API error response:", errorData);
          new import_obsidian9.Notice(`Python API conversion failed: ${errorMsg}`);
          return false;
        } catch (parseErr) {
          console.error(
            `Python API error: HTTP ${response.status}`,
            response.text
          );
          new import_obsidian9.Notice(
            `Python API conversion failed: HTTP ${response.status} - ${response.text ? response.text.substring(0, 100) : "No response details"}`
          );
          return false;
        }
      }
      try {
        const responseData = JSON.parse(
          response.text
        );
        const conversionResult = {
          success: responseData.success || false,
          markdown: responseData.output || "",
          images: responseData.images || {},
          metadata: responseData.metadata || {}
        };
        if (!conversionResult.success) {
          conversionResult.error = "Unknown conversion error";
          console.error(
            `Python API conversion failed: ${conversionResult.error}`,
            responseData
          );
          new import_obsidian9.Notice(`Python API conversion failed: ${conversionResult.error}`);
          return false;
        }
        await this.processConversionResult(
          app,
          settings,
          conversionResult,
          folderPath,
          file
        );
        new import_obsidian9.Notice("Conversion with Python API completed");
        if (settings.movePDFtoFolder) {
          const newFilePath = folderPath + file.name;
          await app.vault.rename(file, newFilePath);
        }
        if (settings.deleteOriginal) {
          await deleteOriginalFile(app, file);
        }
        return true;
      } catch (parseError) {
        console.error(
          "Error parsing Python API response:",
          parseError,
          "Response text:",
          response.text.substring(0, 500) + (response.text.length > 500 ? "..." : "")
        );
        new import_obsidian9.Notice(
          "Error parsing Python API response. Check console for details."
        );
        return false;
      }
    } catch (error) {
      console.error("Python API conversion error:", error.message, error.stack);
      new import_obsidian9.Notice(
        `Python API conversion failed: ${error.message || "Network or server error"}`
      );
      return false;
    }
  }
  async testConnection(settings, silent) {
    try {
      const requestParams = {
        url: `http://${settings.pythonEndpoint}/`,
        method: "GET",
        throw: false
      };
      const response = await (0, import_obsidian9.requestUrl)(requestParams);
      if (response.status === 200) {
        if (!silent)
          new import_obsidian9.Notice("Connection successful!");
        return true;
      } else {
        new import_obsidian9.Notice(`Error connecting to Python API: ${response.status}`);
        return false;
      }
    } catch (error) {
      new import_obsidian9.Notice("Error connecting to Python API");
      console.error("Error connecting to Python API:", error);
      return false;
    }
  }
  getConverterSettings() {
    return [
      {
        id: "pythonEndpoint",
        name: "Python API address",
        description: "The endpoint to use for the Python API.",
        type: "text",
        placeholder: "localhost:8001",
        defaultValue: "localhost:8001",
        buttonText: "Test connection",
        buttonAction: async (app, settings) => {
          await this.testConnection(settings, false);
        }
      },
      {
        id: "langs",
        name: "Languages",
        description: "The languages to use if OCR is needed, separated by commas",
        type: "text",
        placeholder: "en",
        defaultValue: "en"
      },
      {
        id: "forceOCR",
        name: "Force OCR",
        description: "Force OCR (Activate this when auto-detect often fails)",
        type: "toggle",
        defaultValue: false
      },
      {
        id: "paginate",
        name: "Paginate",
        description: "Add horizontal rules between each page",
        type: "toggle",
        defaultValue: false
      }
    ];
  }
};

// src/converters/mistralaiConverter.ts
var import_obsidian10 = require("obsidian");
var import_mistralai = __toESM(require_mistralai());
var MistralAIConverter = class extends BaseConverter {
  async convert(app, settings, file) {
    var _a, _b;
    const folderPath = await this.prepareConversion(settings, file);
    if (!folderPath)
      return false;
    if ((settings.extractContent === "images" || settings.extractContent === "all") && !await checkForExistingFiles(app, folderPath)) {
      return true;
    }
    if (!settings.mistralaiApiKey) {
      new import_obsidian10.Notice("Error: MistralAI API key is not configured");
      console.error("Missing MistralAI API key in settings");
      return false;
    }
    new import_obsidian10.Notice("Converting file with MistralAI OCR...", 4e3);
    try {
      const client = new import_mistralai.Mistral({ apiKey: settings.mistralaiApiKey });
      const fileContent = await app.vault.readBinary(file);
      new import_obsidian10.Notice("Uploading file to MistralAI...", 2e3);
      const fileUpload = await client.files.upload({
        file: {
          fileName: file.name,
          content: fileContent
        },
        purpose: "ocr"
      });
      if (!fileUpload || !fileUpload.id) {
        new import_obsidian10.Notice("Failed to upload file to MistralAI");
        return false;
      }
      const signedUrl = await client.files.getSignedUrl({
        fileId: fileUpload.id
      });
      const includeImages = settings.extractContent !== "text";
      const imageLimit = ((_a = settings.imageLimit) != null ? _a : 0) > 0 ? settings.imageLimit : void 0;
      const imageMinSize = ((_b = settings.imageMinSize) != null ? _b : 0) > 0 ? settings.imageMinSize : void 0;
      const ocrResponse = await client.ocr.process({
        model: "mistral-ocr-latest",
        document: {
          type: "document_url",
          documentUrl: signedUrl.url
        },
        includeImageBase64: includeImages,
        imageLimit,
        imageMinSize
      });
      if (!ocrResponse || !ocrResponse.pages) {
        new import_obsidian10.Notice("Failed to process file with OCR");
        return false;
      }
      const conversionResult = this.parseOCRResults(
        ocrResponse.pages,
        settings.extractContent
      );
      await this.processConversionResult(
        app,
        settings,
        conversionResult,
        folderPath,
        file
      );
      new import_obsidian10.Notice("MistralAI OCR conversion completed successfully");
      if (settings.deleteOriginal) {
        await deleteOriginalFile(app, file);
      }
      return true;
    } catch (error) {
      console.error("MistralAI conversion error:", error.message, error.stack);
      new import_obsidian10.Notice(
        `MistralAI conversion failed: ${error.message || "Network or server error"}`
      );
      return false;
    }
  }
  parseOCRResults(pages, extractContent = "all") {
    try {
      let markdown = "";
      const images = {};
      pages.forEach((page, index) => {
        if (index > 0) {
          markdown += "\n\n---\n\n";
        }
        if (extractContent !== "images") {
          markdown += page.markdown || "";
        }
        if (extractContent !== "text" && page.images && page.images.length > 0) {
          page.images.forEach((image) => {
            const imageName = image.id;
            let base64Data = image.imageBase64 || "";
            if (base64Data.startsWith("data:")) {
              base64Data = base64Data.split(",")[1];
            }
            images[imageName] = base64Data;
          });
        }
      });
      return {
        success: true,
        markdown,
        images,
        metadata: {
          page_count: pages.length,
          processor: "mistralai-ocr"
        }
      };
    } catch (error) {
      console.error("Error parsing OCR results:", error);
      return {
        success: false,
        error: `Failed to parse OCR results: ${error.message}`
      };
    }
  }
  async testConnection(settings, silent) {
    if (!settings.mistralaiApiKey) {
      if (!silent)
        new import_obsidian10.Notice("Error: MistralAI API key is not configured");
      return false;
    }
    try {
      const client = new import_mistralai.Mistral({ apiKey: settings.mistralaiApiKey });
      const response = await client.files.list();
      if (response) {
        if (!silent)
          new import_obsidian10.Notice("MistralAI connection successful!");
        return true;
      }
      if (!silent)
        new import_obsidian10.Notice("Error connecting to MistralAI API");
      return false;
    } catch (error) {
      if (!silent) {
        new import_obsidian10.Notice(`Error connecting to MistralAI API: ${error.message}`);
      }
      console.error("Error connecting to MistralAI API:", error);
      return false;
    }
  }
  getConverterSettings() {
    return [
      {
        id: "mistralaiApiKey",
        name: "MistralAI API Key",
        description: "Enter your MistralAI API key",
        type: "text",
        placeholder: "API Key",
        defaultValue: "",
        buttonText: "Test connection",
        buttonAction: async (app, settings) => {
          await this.testConnection(settings, false);
        }
      },
      {
        id: "imageLimit",
        name: "Image limit",
        description: "Maximum number of images to extract (0 for no limit)",
        type: "text",
        placeholder: "0",
        defaultValue: "0",
        onChange: async (value, settings) => {
          const numValue = value ? parseInt(value) : 0;
          settings.imageLimit = isNaN(numValue) ? 0 : numValue;
        }
      },
      {
        id: "imageMinSize",
        name: "Image minimum size",
        description: "Minimum height and width of images to extract (0 for no minimum)",
        type: "text",
        placeholder: "0",
        defaultValue: "0",
        onChange: async (value, settings) => {
          const numValue = value ? parseInt(value) : 0;
          settings.imageMinSize = isNaN(numValue) ? 0 : numValue;
        }
      },
      {
        id: "paginate",
        name: "Paginate",
        description: "Add horizontal rules between each page",
        type: "toggle",
        defaultValue: false
      }
    ];
  }
};

// src/main.ts
var Marker = class extends import_obsidian11.Plugin {
  async onload() {
    await this.loadSettings();
    this.setConverter();
    this.addCommands();
    this.addSettingTab(new MarkerSettingTab(this.app, this));
    this.registerFileMenuEvents();
  }
  setConverter() {
    switch (this.settings.apiEndpoint) {
      case "datalab":
        this.converter = new DatalabConverter();
        break;
      case "selfhosted":
        this.converter = new MarkerApiDockerConverter();
        break;
      case "python-api":
        this.converter = new PythonAPIConverter();
        break;
      case "mistralai":
        this.converter = new MistralAIConverter();
        break;
      default:
        console.error("Invalid API endpoint setting.");
        this.converter = new MarkerApiDockerConverter();
    }
  }
  registerFileMenuEvents() {
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (!(file instanceof import_obsidian11.TFile) || !this.isValidFile(file))
          return;
        menu.addItem((item) => {
          item.setIcon("pdf-file");
          item.setTitle(this.getMenuItemTitle(file));
          item.setSection("action");
          item.onClick(async () => {
            await this.convertFile(file);
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("files-menu", (menu, files) => {
        const pdfFiles = files.filter((file) => this.isValidFile(file));
        if (pdfFiles.length === 0)
          return;
        menu.addItem((item) => {
          item.setIcon("files");
          item.setTitle("Convert " + pdfFiles.length + " files to MD");
          item.setSection("action");
          item.onClick(async () => {
            for (const file of pdfFiles) {
              await this.convertFile(file);
            }
          });
        });
      })
    );
  }
  isValidFile(file) {
    const allowedExtensions = this.settings.apiEndpoint === "datalab" ? ["pdf", "docx", "pptx", "ppt", "doc"] : ["pdf"];
    return allowedExtensions.includes(file.extension);
  }
  getMenuItemTitle(file) {
    const titles = {
      pdf: "Convert PDF to MD",
      docx: "Convert DOCX to MD",
      pptx: "Convert PPTX to MD",
      ppt: "Convert PPT to MD",
      doc: "Convert DOC to MD"
    };
    return titles[file.extension] || "Convert to MD";
  }
  async convertFile(file) {
    if (this.converter) {
      await this.converter.convert(this.app, this.settings, file);
    } else {
      console.error("No converter initialized.");
    }
  }
  addCommands() {
    this.addCommand({
      id: "marker-convert-to-md",
      name: "Convert to MD",
      checkCallback: (checking) => {
        const activeFile = this.app.workspace.getActiveFile();
        if (!activeFile || !this.isValidFile(activeFile))
          return false;
        if (checking)
          return true;
        this.convertFile(activeFile);
      }
    });
  }
  async onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.setConverter();
  }
  async testConnection(silent) {
    if (this.converter) {
      return this.converter.testConnection(this.settings, silent);
    } else {
      console.error("No converter initialized.");
      return false;
    }
  }
};

/* nosourcemap */